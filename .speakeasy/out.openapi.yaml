openapi: "3.1.0"
paths:
  "/connect_sessions":
    post:
      operationId: "stackone_create_connect_session"
      requestBody:
        required: true
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/ConnectSessionCreate"}
      responses:
        "201":
          description: "The details of the connect session created with token and auth link"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConnectSessionTokenAuthLink"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      summary: "Create Connect Session"
      tags:
        - "Connect Sessions"
      x-speakeasy-name-override: "create"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
      x-speakeasy-group: "connectSessions"
  "/connect_sessions/authenticate":
    post:
      operationId: "stackone_authenticate_connect_session"
      requestBody:
        required: true
        description: "The parameters to authenticate"
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/ConnectSessionAuthenticate"}
      responses:
        "201":
          description: "The details of the authenticated connect session."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConnectSession"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      summary: "Authenticate Connect Session"
      tags:
        - "Connect Sessions"
      x-speakeasy-name-override: "authenticate"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
      x-speakeasy-group: "connectSessions"
  "/accounts":
    get:
      operationId: "stackone_list_linked_accounts"
      parameters:
        - name: "page"
          required: false
          in: "query"
          description: "The page number of the results to fetch"
          schema:
            nullable: true
            type: "number"
        - name: "page_size"
          required: false
          in: "query"
          description: "The number of results per page"
          schema:
            nullable: true
            default: 25
            type: "number"
        - name: "provider"
          required: false
          in: "query"
          description: "The provider of the results to fetch"
          deprecated: true
          schema:
            nullable: true
            type: "string"
        - name: "origin_owner_id"
          required: false
          in: "query"
          description: "The origin owner identifier of the results to fetch"
          schema:
            nullable: true
            type: "string"
        - name: "providers"
          required: false
          in: "query"
          description: "The providers list of the results to fetch"
          schema:
            type: "array"
            items:
              type: "string"
        - name: "account_ids"
          required: false
          in: "query"
          description: "The providers list of the results to fetch"
          schema:
            type: "array"
            items:
              type: "string"
        - name: "status"
          required: false
          in: "query"
          description: "The status of the results to fetch"
          schema:
            type: "array"
            items:
              type: "string"
      responses:
        "200":
          description: "The list of accounts was retrieved."
          content:
            "application/json":
              schema:
                type: "array"
                items: {"$ref": "#/components/schemas/LinkedAccount"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      summary: "List Accounts"
      tags:
        - "Accounts"
      x-speakeasy-name-override: "list"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  "/accounts/{id}":
    get:
      operationId: "stackone_get_account"
      parameters:
        - name: "id"
          required: true
          in: "path"
          schema:
            type: "string"
      responses:
        "200":
          description: "The account with the given identifier was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/LinkedAccount"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      summary: "Get Account"
      tags:
        - "Accounts"
      x-speakeasy-name-override: "get"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
    patch:
      operationId: "stackone_update_account"
      parameters:
        - name: "id"
          required: true
          in: "path"
          schema:
            type: "string"
      requestBody:
        required: true
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/PatchAccountExternalDto"}
      responses:
        "200":
          description: "The account with the given identifier was updated."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/LinkedAccount"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      summary: "Update Account"
      tags:
        - "Accounts"
      x-speakeasy-name-override: "update"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
    delete:
      operationId: "stackone_delete_account"
      parameters:
        - name: "id"
          required: true
          in: "path"
          schema:
            type: "string"
      responses:
        "200":
          description: "The account with the given identifier was deleted."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/LinkedAccount"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      summary: "Delete Account"
      tags:
        - "Accounts"
      x-speakeasy-name-override: "delete"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  "/accounts/{id}/meta":
    get:
      operationId: "stackone_get_account_meta_info"
      parameters:
        - name: "id"
          required: true
          in: "path"
          schema:
            type: "string"
      responses:
        "200":
          description: "The meta information of the account was retrieved"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/LinkedAccountMeta"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      summary: "Get meta information of the account"
      tags:
        - "Accounts"
      x-speakeasy-name-override: "getMeta"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  "/requests/logs/steps":
    get:
      operationId: "stackone_list_step_logs"
      parameters:
        - name: "order_by"
          required: false
          in: "query"
          description: "The field to order the results by."
          x-speakeasy-unknown-values: "allow"
          schema:
            additionalProperties: false
            nullable: true
            example: "created_at"
            type: "string"
            enum:
              - "provider"
              - "service"
              - "status"
              - "eventDatetime"
              - "duration"
              - null
        - name: "order_direction"
          required: false
          in: "query"
          description: "The direction to order the results by."
          x-speakeasy-unknown-values: "allow"
          schema:
            additionalProperties: false
            nullable: true
            example: "asc"
            type: "string"
            enum:
              - "asc"
              - "desc"
              - null
        - name: "page_size"
          required: false
          in: "query"
          description: "The number of results per page (default value is 25)"
          schema:
            maximum: 100
            nullable: true
            type: "number"
        - name: "next"
          required: false
          in: "query"
          description: "The unified cursor"
          schema:
            nullable: true
            type: "string"
        - name: "filter"
          required: false
          in: "query"
          description: "Filter parameters that allow greater customisation of the list response"
          schema:
            properties:
              "account_ids":
                description: "A comma-separated list of account IDs to filter the results by."
                example: "45355976281015164504,45355976281015164505"
                type: "string"
                nullable: true
                additionalProperties: false
              "start_date":
                description: "A ISO8601 date string to filter the results by start_date."
                example: "2020-01-01T00:00:00.000Z"
                type: "string"
                nullable: true
                additionalProperties: false
              "end_date":
                description: "A ISO8601 date string to filter the results by end_date."
                example: "2020-01-01T00:00:00.000Z"
                type: "string"
                nullable: true
                additionalProperties: false
              "request_ids":
                description: "A comma-separated list of request IDs to filter the results by."
                example: "adbf752f-6457-4ddd-89b3-98ae2252b83b,adbf752f-6457-4ddd-89b3-98ae2252b83c"
                type: "string"
                nullable: true
                additionalProperties: false
              "http_methods":
                description: "A comma-separated list of HTTP methods to filter the results by."
                example: "GET,POST"
                type: "string"
                nullable: true
                additionalProperties: false
              "providers":
                description: "A comma-separated list of provider keys to filter the results by."
                example: "ashby,greenhouse"
                type: "string"
                nullable: true
                additionalProperties: false
              "services":
                description: "A comma-separated list of services to filter the results by."
                example: "hris,ats"
                type: "string"
                nullable: true
                additionalProperties: false
              "resources":
                description: "A comma-separated list of resources to filter the results by."
                example: "employees,users"
                type: "string"
                nullable: true
                additionalProperties: false
              "child_resources":
                description: "A comma-separated list of child resources to filter the results by."
                example: "documents,time-off"
                type: "string"
                nullable: true
                additionalProperties: false
              "sub_resources":
                description: "A comma-separated list of sub resources to filter the results by."
                example: "documents,employees"
                type: "string"
                nullable: true
                additionalProperties: false
              "actions":
                description: "A comma-separated list of actions to filter the results by."
                example: "download,upload"
                type: "string"
                nullable: true
                additionalProperties: false
              "status_codes":
                description: "A comma-separated list of status codes to filter the results by."
                example: "200,400"
                type: "string"
                nullable: true
                additionalProperties: false
              "success":
                description: "A boolean value to filter the results by success or failure."
                example: true
                type: "boolean"
                nullable: true
                additionalProperties: false
            nullable: true
            type: "object"
      responses:
        "200":
          description: "The list of step logs was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/StepLogsPaginated"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      summary: "List Step Logs"
      tags:
        - "Request Logs"
      x-speakeasy-name-override: "listSteps"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
      x-speakeasy-group: "requestLogs"
  "/requests/logs/{id}":
    get:
      operationId: "stackone_get_log"
      parameters:
        - name: "id"
          required: true
          in: "path"
          schema:
            type: "string"
        - name: "include"
          required: false
          in: "query"
          description: "The include parameter allows you to include additional data in the response."
          x-speakeasy-unknown-values: "allow"
          schema:
            nullable: true
            example: "step_logs"
            type: "string"
            enum:
              - "step_logs"
              - "advanced_logs"
              - null
      responses:
        "200":
          description: "The log was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnifiedLogResult"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      summary: "Get a Log"
      tags:
        - "Request Logs"
      x-speakeasy-name-override: "get"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
      x-speakeasy-group: "requestLogs"
  "/requests/logs":
    get:
      operationId: "stackone_list_logs"
      parameters:
        - name: "order_by"
          required: false
          in: "query"
          description: "The field to order the results by."
          x-speakeasy-unknown-values: "allow"
          schema:
            additionalProperties: false
            nullable: true
            example: "created_at"
            type: "string"
            enum:
              - "provider"
              - "service"
              - "status"
              - "eventDatetime"
              - "duration"
              - null
        - name: "order_direction"
          required: false
          in: "query"
          description: "The direction to order the results by."
          x-speakeasy-unknown-values: "allow"
          schema:
            additionalProperties: false
            nullable: true
            example: "asc"
            type: "string"
            enum:
              - "asc"
              - "desc"
              - null
        - name: "page_size"
          required: false
          in: "query"
          description: "The number of results per page (default value is 25)"
          schema:
            maximum: 100
            nullable: true
            type: "number"
        - name: "next"
          required: false
          in: "query"
          description: "The unified cursor"
          schema:
            nullable: true
            type: "string"
        - name: "include"
          required: false
          in: "query"
          description: "The include parameter allows you to include additional data in the response."
          x-speakeasy-unknown-values: "allow"
          schema:
            nullable: true
            example: "step_logs"
            type: "string"
            enum:
              - "step_logs"
              - null
        - name: "filter"
          required: false
          in: "query"
          description: "Filter parameters that allow greater customisation of the list response"
          schema:
            properties:
              "account_ids":
                description: "A comma-separated list of account IDs to filter the results by."
                example: "45355976281015164504,45355976281015164505"
                type: "string"
                nullable: true
                additionalProperties: false
              "start_date":
                description: "A ISO8601 date string to filter the results by start_date."
                example: "2020-01-01T00:00:00.000Z"
                type: "string"
                nullable: true
                additionalProperties: false
              "end_date":
                description: "A ISO8601 date string to filter the results by end_date."
                example: "2020-01-01T00:00:00.000Z"
                type: "string"
                nullable: true
                additionalProperties: false
              "request_ids":
                description: "A comma-separated list of request IDs to filter the results by."
                example: "adbf752f-6457-4ddd-89b3-98ae2252b83b,adbf752f-6457-4ddd-89b3-98ae2252b83c"
                type: "string"
                nullable: true
                additionalProperties: false
              "source_types":
                description: "A comma-separated list of source types to filter the results by."
                example: "DASHBOARD,SYNTHETIC_WEBHOOK"
                type: "string"
                nullable: true
                additionalProperties: false
              "source_values":
                description: "A comma-separated list of source values to filter the results by."
                type: "string"
                nullable: true
                additionalProperties: false
              "source_ids":
                description: "A comma-separated list of source IDs to filter the results by."
                type: "string"
                nullable: true
                additionalProperties: false
              "http_methods":
                description: "A comma-separated list of HTTP methods to filter the results by."
                example: "GET,POST"
                type: "string"
                nullable: true
                additionalProperties: false
              "providers":
                description: "A comma-separated list of provider keys to filter the results by."
                example: "ashby,greenhouse"
                type: "string"
                nullable: true
                additionalProperties: false
              "services":
                description: "A comma-separated list of services to filter the results by."
                example: "hris,ats"
                type: "string"
                nullable: true
                additionalProperties: false
              "resources":
                description: "A comma-separated list of resources to filter the results by."
                example: "employees,users"
                type: "string"
                nullable: true
                additionalProperties: false
              "child_resources":
                description: "A comma-separated list of child resources to filter the results by."
                example: "documents,time-off"
                type: "string"
                nullable: true
                additionalProperties: false
              "sub_resources":
                description: "A comma-separated list of sub resources to filter the results by."
                example: "documents,employees"
                type: "string"
                nullable: true
                additionalProperties: false
              "actions":
                description: "A comma-separated list of actions to filter the results by."
                example: "download,upload"
                type: "string"
                nullable: true
                additionalProperties: false
              "status_codes":
                description: "A comma-separated list of status codes to filter the results by."
                example: "200,400"
                type: "string"
                nullable: true
                additionalProperties: false
              "success":
                description: "A boolean value to filter the results by success or failure."
                example: true
                type: "boolean"
                nullable: true
                additionalProperties: false
              "order_by":
                description: "The field to order the results by."
                example: "created_at"
                type: "string"
                nullable: true
                enum:
                  - "provider"
                  - "service"
                  - "status"
                  - "eventDatetime"
                  - "duration"
                  - null
                additionalProperties: false
              "order_direction":
                description: "The direction to order the results by."
                example: "asc"
                type: "string"
                nullable: true
                enum:
                  - "asc"
                  - "desc"
                  - null
                additionalProperties: false
            nullable: true
            type: "object"
      responses:
        "200":
          description: "The list of logs was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnifiedLogsPaginated"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      summary: "List Logs"
      tags:
        - "Request Logs"
      x-speakeasy-name-override: "list"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
      x-speakeasy-group: "requestLogs"
  "/connectors/meta":
    get:
      operationId: "stackone_list_connectors_meta"
      parameters:
        - name: "include"
          required: false
          in: "query"
          description: "The comma separated list of data that will be included in the response"
          schema:
            nullable: true
            example: "field_path,unmapped_fields,resources,inactive,webhooks,static_fields"
            type: "string"
      responses:
        "200":
          description: "The list of connectors meta information was retrieved."
          content:
            "application/json":
              schema:
                type: "array"
                items: {"$ref": "#/components/schemas/ConnectorsMeta"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      summary: "List Connectors Meta Information for all providers"
      tags:
        - "Connectors"
      x-speakeasy-name-override: "listMeta"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  "/connectors/meta/{provider}":
    get:
      operationId: "stackone_get_connector_meta"
      parameters:
        - name: "provider"
          required: true
          in: "path"
          schema:
            type: "string"
        - name: "include"
          required: false
          in: "query"
          description: "The comma separated list of data that will be included in the response"
          schema:
            nullable: true
            example: "field_path,unmapped_fields,resources,inactive,webhooks,static_fields"
            type: "string"
      responses:
        "200":
          description: "The connector meta information was retrieved"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConnectorsMeta"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      summary: "Get Connector Meta information for the given provider key"
      tags:
        - "Connectors"
      x-speakeasy-name-override: "getMeta"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  "/unified/proxy":
    post:
      operationId: "stackone_proxy_request"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
      requestBody:
        required: true
        description: "The request body"
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/ProxyRequestBody"}
      responses:
        "200":
          description: "The proxy request was successful."
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      summary: "Proxy Request"
      tags:
        - "Proxy"
      x-speakeasy-name-override: "perform"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
info:
  title: "StackOne"
  description: "The documentation for the StackOne API"
  version: "1.0.0"
  contact: {}
tags:
  - name: "Accounts"
    description: "View and manage linked accounts."
  - name: "AI"
    description: "AI-powered features."
  - name: "Connect Sessions"
    description: "Generate connection session tokens or auth URLs to allow your customers to connect their accounts."
  - name: "Connectors"
    description: "Retrieve metadata for connectors."
  - name: "Proxy"
    description: "Routing API requests through StackOne directly to the underlying provider."
  - name: "Request Logs"
    description: "API requests and response logs."
  - name: "Webhooks"
    description: "Configure and manage webhooks."
servers:
  - url: "https://api.stackone.com"
components:
  securitySchemes:
    "basic":
      type: "http"
      scheme: "basic"
  schemas:
    "AdvancedLogRequestData":
      type: "object"
      properties:
        "id":
          type: "string"
          description: "The request ID"
          example: "adbf752f-6457-4ddd-89b3-98ae2252b83b"
          nullable: true
        "method":
          type: "string"
          description: "The request method"
          example: "get"
          nullable: true
        "headers":
          type: "object"
          additionalProperties: true
          example: {"content-type": "application/json", "authorization": "Bearer token"}
          nullable: true
        "url":
          description: "The request URL data"
          nullable: true
          allOf:
            - {"$ref": "#/components/schemas/AdvancedLogRequestDataUrl"}
        "body":
          oneOf:
            - type: "string"
            - type: "object"
            - type: "string"
              format: "binary"
            - type: "array"
              items:
                type: "integer"
                format: "int32"
                minimum: 0
                maximum: 255
            - type: "string"
              format: "byte"
          additionalProperties: true
          nullable: true
    "AdvancedLogRequestDataUrl":
      type: "object"
      properties:
        "url":
          type: "string"
          description: "The request URL"
          example: "https://example.com/api/v1/resource"
          nullable: true
        "hostname":
          type: "string"
          description: "The request URL hostname"
          example: "example.com"
          nullable: true
        "path":
          type: "string"
          description: "The request path"
          example: "/api/v1/resource"
          nullable: true
        "query_params":
          type: "object"
          description: "The request query parameters"
          additionalProperties: true
          example: {"page": 1, "limit": 10}
          nullable: true
    "AdvancedLogResponseData":
      type: "object"
      properties:
        "status_code":
          type: "number"
          description: "The response status code"
          example: 200
          nullable: true
        "headers":
          type: "object"
          additionalProperties: true
          example: {"content-type": "application/json", "authorization": "Bearer token"}
          nullable: true
        "body":
          oneOf:
            - type: "string"
            - type: "object"
            - type: "string"
              format: "binary"
            - type: "array"
              items:
                type: "integer"
                format: "int32"
                minimum: 0
                maximum: 255
            - type: "string"
              format: "byte"
          additionalProperties: true
          nullable: true
        "custom_mapping_errors":
          description: "The custom mapping errors"
          nullable: true
          type: "array"
          items: {"$ref": "#/components/schemas/CustomMappingError"}
        "provider_errors":
          description: "The provider errors"
          nullable: true
          type: "array"
          items: {"$ref": "#/components/schemas/ProviderError"}
    "BadGatewayResponse":
      type: "object"
      properties:
        "statusCode":
          type: "number"
          description: "HTTP status code"
          example: 502
        "message":
          type: "string"
          description: "Error message"
          example: "Bad Gateway"
        "timestamp":
          type: "string"
          description: "Timestamp when the error occurred"
          example: "2023-05-30T00:00:00.000Z"
          format: "date-time"
      required:
        - "statusCode"
        - "message"
        - "timestamp"
    "BadRequestResponse":
      type: "object"
      properties:
        "statusCode":
          type: "number"
          description: "HTTP status code"
          example: 400
        "message":
          type: "string"
          description: "Error message"
          example: "Bad Request"
        "timestamp":
          type: "string"
          description: "Timestamp when the error occurred"
          example: "2023-05-30T00:00:00.000Z"
          format: "date-time"
        "data":
          description: "Error details"
          nullable: true
          allOf:
            - {"$ref": "#/components/schemas/UnifiedError"}
        "provider_errors":
          description: "List of provider-specific errors"
          nullable: true
          type: "array"
          items: {"$ref": "#/components/schemas/ProviderError"}
      required:
        - "statusCode"
        - "message"
        - "timestamp"
    "ConflictResponse":
      type: "object"
      properties:
        "statusCode":
          type: "number"
          description: "HTTP status code"
          example: 409
        "message":
          type: "string"
          description: "Error message"
          example: "Conflict"
        "timestamp":
          type: "string"
          description: "Timestamp when the error occurred"
          example: "2023-05-30T00:00:00.000Z"
          format: "date-time"
      required:
        - "statusCode"
        - "message"
        - "timestamp"
    "ConnectorsMeta":
      type: "object"
      properties:
        "provider":
          type: "string"
          example: "hibob"
          description: "The provider key"
        "provider_name":
          type: "string"
          example: "Hibob"
          description: "The provider human-readable label"
        "category":
          type: "string"
          enum:
            - "ats"
            - "hris"
            - "hris-legacy"
            - "crm"
            - "iam"
            - "marketing"
            - "lms"
            - "stackone"
            - "documents"
            - "ticketing"
            - "screening"
            - "messaging"
            - "accounting"
          example: "hris"
          description: "The provider service category"
          x-speakeasy-unknown-values: "allow"
        "active":
          type: "boolean"
          example: true
          description: "Whether this provider has been enabled on the integrations page for the current project"
          nullable: true
        "models":
          type: "object"
          additionalProperties: true
          example: {"employees": {"create": {"apiPath": "/unified/hris/employees/:id", "input": {"defaultFields": [{"name": "first_name", "type": "string"}]}, "output": {"defaultFields": [{"name": "id", "type": "string"}]}}}, "time_off": {"get": {"apiPath": "/unified/hris/employees/:id/time_off/:id", "output": {"defaultFields": [{"name": "id", "type": "string"}]}}}}
        "resources":
          description: "Resources for this provider, such as image assets"
          example: {"images": {"logo_url": "https://app.stackone.com/assets/logos/hibob.png", "original_logo_horizontal_url": "https://app.stackone.com/assets/logos/original/hibob_horizontal.png"}}
          nullable: true
          allOf:
            - {"$ref": "#/components/schemas/ConnectorsMetaResources"}
      required:
        - "provider"
        - "provider_name"
        - "category"
        - "models"
    "ConnectorsMetaResources":
      type: "object"
      properties:
        "images":
          description: "Image assets for this provider"
          nullable: true
          allOf:
            - {"$ref": "#/components/schemas/ConnectorsMetaResourcesImagesApiModel"}
    "ConnectorsMetaResourcesImagesApiModel":
      type: "object"
      properties:
        "logo_url":
          type: "string"
          example: "https://app.stackone.com/assets/logos/hibob.png"
          description: "URL of the square logo designed and used by StackOne for this provider"
          nullable: true
        "original_logo_horizontal_url":
          type: "string"
          example: "https://app.stackone.com/assets/logos/source/hibob.png"
          description: "URL of the original provider logo (with logo and/or name aligned horizontally)"
          nullable: true
    "ConnectSession":
      type: "object"
      properties:
        "id":
          type: "number"
        "organization_id":
          type: "number"
        "project_id":
          type: "string"
        "categories":
          type: "array"
          example: ["ats", "hris", "hrisLegacy", "crm", "iam", "marketing", "lms", "stackOne", "documents", "ticketing", "screening", "messaging", "accounting"]
          x-speakeasy-unknown-values: "allow"
          nullable: true
          items:
            type: "string"
            enum:
              - "ats"
              - "hris"
              - "hris-legacy"
              - "crm"
              - "iam"
              - "marketing"
              - "lms"
              - "stackone"
              - "documents"
              - "ticketing"
              - "screening"
              - "messaging"
              - "accounting"
              - null
        "provider":
          type: "string"
          nullable: true
        "origin_owner_id":
          type: "string"
        "origin_owner_name":
          type: "string"
        "origin_username":
          type: "string"
          nullable: true
        "account_id":
          type: "string"
          nullable: true
        "label":
          type: "string"
          nullable: true
        "created_at":
          format: "date-time"
          type: "string"
        "metadata":
          type: "object"
          description: "Arbitrary set of key and values defined during the session token creation. This can be used to tag an account (eg. based on their pricing plan)"
          nullable: true
        "external_trigger_token":
          type: "string"
          description: "External trigger token to be used to trigger actions on the account"
          example: "f0bc3d88-2178-5423-8c81-b81d6c9da824"
          nullable: true
        "type":
          type: "string"
          description: "The connect session account type"
          enum:
            - "production"
            - "test"
            - "unmapped_value"
            - null
          example: ["PRODUCTION", "TEST"]
          x-speakeasy-unknown-values: "allow"
          nullable: true
      required:
        - "id"
        - "organization_id"
        - "project_id"
        - "origin_owner_id"
        - "origin_owner_name"
        - "created_at"
    "ConnectSessionAuthenticate":
      type: "object"
      properties:
        "token":
          type: "string"
          description: "The token to authenticate with"
      required:
        - "token"
    "ConnectSessionCreate":
      type: "object"
      properties:
        "categories":
          type: "array"
          description: "The categories of the provider to connect to"
          example: ["ats", "hris", "hrisLegacy", "crm", "iam", "marketing", "lms", "stackOne", "documents", "ticketing", "screening", "messaging", "accounting"]
          x-speakeasy-unknown-values: "allow"
          nullable: true
          items:
            type: "string"
            enum:
              - "ats"
              - "hris"
              - "hris-legacy"
              - "crm"
              - "iam"
              - "marketing"
              - "lms"
              - "stackone"
              - "documents"
              - "ticketing"
              - "screening"
              - "messaging"
              - "accounting"
              - null
        "provider":
          type: "string"
          description: "The provider to connect to"
          nullable: true
        "provider_version":
          type: "string"
          description: "The provider version to connect to"
          nullable: true
        "origin_owner_id":
          type: "string"
          description: "The origin owner identifier"
        "origin_owner_name":
          type: "string"
          description: "The origin owner name"
        "origin_username":
          type: "string"
          description: "The origin username"
          nullable: true
        "account_id":
          type: "string"
          description: "The unique identifier for the account associated with this connect session. When this field is present, the hub will launch in edit mode using the retrieved token."
          nullable: true
        "expires_in":
          type: "number"
          description: "How long the session should be valid for in seconds"
          default: 1800
          nullable: true
        "metadata":
          type: "object"
          description: "The metadata for the connection"
          nullable: true
        "multiple":
          type: "boolean"
          description: "If set, this connect session will allow creation of multiple accounts with the same origin owner id and provider. Has no effect if account_id is set."
          default: false
          nullable: true
        "label":
          type: "string"
          description: "The label to be applied to the account associated with this connect session."
          nullable: true
        "type":
          type: "string"
          description: "The connect session account type"
          enum:
            - "production"
            - "test"
            - null
          example: ["PRODUCTION", "TEST"]
          default: "production"
          x-speakeasy-unknown-values: "allow"
          nullable: true
      required:
        - "origin_owner_id"
        - "origin_owner_name"
    "ConnectSessionTokenAuthLink":
      type: "object"
      properties:
        "id":
          type: "number"
        "organization_id":
          type: "number"
        "project_id":
          type: "string"
        "categories":
          type: "array"
          example: ["ats", "hris", "hrisLegacy", "crm", "iam", "marketing", "lms", "stackOne", "documents", "ticketing", "screening", "messaging", "accounting"]
          x-speakeasy-unknown-values: "allow"
          nullable: true
          items:
            type: "string"
            enum:
              - "ats"
              - "hris"
              - "hris-legacy"
              - "crm"
              - "iam"
              - "marketing"
              - "lms"
              - "stackone"
              - "documents"
              - "ticketing"
              - "screening"
              - "messaging"
              - "accounting"
              - null
        "provider":
          type: "string"
          nullable: true
        "origin_owner_id":
          type: "string"
        "origin_owner_name":
          type: "string"
        "origin_username":
          type: "string"
          nullable: true
        "account_id":
          type: "string"
          nullable: true
        "label":
          type: "string"
          nullable: true
        "created_at":
          format: "date-time"
          type: "string"
        "metadata":
          type: "object"
          description: "Arbitrary set of key and values defined during the session token creation. This can be used to tag an account (eg. based on their pricing plan)"
          nullable: true
        "external_trigger_token":
          type: "string"
          description: "External trigger token to be used to trigger actions on the account"
          example: "f0bc3d88-2178-5423-8c81-b81d6c9da824"
          nullable: true
        "type":
          type: "string"
          description: "The connect session account type"
          enum:
            - "production"
            - "test"
            - "unmapped_value"
            - null
          example: ["PRODUCTION", "TEST"]
          x-speakeasy-unknown-values: "allow"
          nullable: true
        "token":
          type: "string"
        "auth_link_url":
          type: "string"
      required:
        - "id"
        - "organization_id"
        - "project_id"
        - "origin_owner_id"
        - "origin_owner_name"
        - "created_at"
        - "token"
        - "auth_link_url"
    "CustomMappingError":
      type: "object"
      properties:
        "id":
          type: "string"
          description: "The custom mapping identifier"
          example: "adbf752f-6457-4ddd-89b3-98ae2252b83b"
          nullable: true
        "message":
          type: "string"
          description: "The error message"
          example: "Invalid value"
          nullable: true
        "targetField":
          type: "string"
          description: "The target field where the error occurred"
          example: "first_name"
          nullable: true
    "ForbiddenResponse":
      type: "object"
      properties:
        "statusCode":
          type: "number"
          description: "HTTP status code"
          example: 403
        "message":
          type: "string"
          description: "Error message"
          example: "Forbidden resource"
        "timestamp":
          type: "string"
          description: "Timestamp when the error occurred"
          example: "2023-05-30T00:00:00.000Z"
          format: "date-time"
      required:
        - "statusCode"
        - "message"
        - "timestamp"
    "InternalServerErrorResponse":
      type: "object"
      properties:
        "statusCode":
          type: "number"
          description: "HTTP status code"
          example: 500
        "message":
          type: "string"
          description: "Error message"
          example: "Internal server error"
        "timestamp":
          type: "string"
          description: "Timestamp when the error occurred"
          example: "2023-05-30T00:00:00.000Z"
          format: "date-time"
      required:
        - "statusCode"
        - "message"
        - "timestamp"
    "LinkedAccount":
      type: "object"
      properties:
        "id":
          type: "string"
        "provider":
          type: "string"
        "provider_name":
          type: "string"
          nullable: true
        "status":
          type: "string"
          enum:
            - "active"
            - "inactive"
            - "error"
          x-speakeasy-unknown-values: "allow"
        "status_reasons":
          nullable: true
          type: "array"
          items: {"$ref": "#/components/schemas/StatusReason"}
        "origin_owner_id":
          type: "string"
        "origin_owner_name":
          type: "string"
        "origin_username":
          type: "string"
          nullable: true
        "credentials":
          type: "object"
          nullable: true
        "setup_information":
          type: "object"
          nullable: true
        "label":
          type: "string"
          nullable: true
        "created_at":
          format: "date-time"
          type: "string"
        "updated_at":
          format: "date-time"
          type: "string"
        "type":
          type: "string"
          description: "The account type"
          enum:
            - "production"
            - "test"
            - "unmapped_value"
            - null
          example: ["PRODUCTION", "TEST"]
          x-speakeasy-unknown-values: "allow"
          nullable: true
      required:
        - "id"
        - "provider"
        - "status"
        - "origin_owner_id"
        - "origin_owner_name"
        - "created_at"
        - "updated_at"
    "LinkedAccountMeta":
      type: "object"
      properties:
        "provider":
          type: "string"
        "category":
          type: "string"
          enum:
            - "ats"
            - "hris"
            - "hris-legacy"
            - "crm"
            - "iam"
            - "marketing"
            - "lms"
            - "stackone"
            - "documents"
            - "ticketing"
            - "screening"
            - "messaging"
            - "accounting"
          x-speakeasy-unknown-values: "allow"
        "models":
          type: "object"
          additionalProperties: true
      required:
        - "provider"
        - "category"
        - "models"
    "NotFoundResponse":
      type: "object"
      properties:
        "statusCode":
          type: "number"
          description: "HTTP status code"
          example: 404
        "message":
          type: "string"
          description: "Error message"
          example: "Not Found"
        "timestamp":
          type: "string"
          description: "Timestamp when the error occurred"
          example: "2023-05-30T00:00:00.000Z"
          format: "date-time"
      required:
        - "statusCode"
        - "message"
        - "timestamp"
    "NotImplementedResponse":
      type: "object"
      properties:
        "statusCode":
          type: "number"
          description: "HTTP status code"
          example: 501
        "message":
          type: "string"
          description: "Error message"
          example: "Not Implemented"
        "timestamp":
          type: "string"
          description: "Timestamp when the error occurred"
          example: "2023-05-30T00:00:00.000Z"
          format: "date-time"
      required:
        - "statusCode"
        - "message"
        - "timestamp"
    "PatchAccountExternalDto":
      type: "object"
      properties:
        "provider":
          type: "string"
          nullable: true
        "origin_owner_id":
          type: "string"
          nullable: true
        "origin_owner_name":
          type: "string"
          nullable: true
        "origin_username":
          type: "string"
          nullable: true
        "credentials":
          type: "object"
          additionalProperties: false
          nullable: true
        "setup_information":
          type: "object"
          additionalProperties: false
          nullable: true
        "secrets":
          type: "object"
          additionalProperties: false
          nullable: true
        "authentication_config_key":
          type: "string"
          nullable: true
        "environment":
          type: "string"
          nullable: true
        "label":
          type: "object"
          nullable: true
        "metadata":
          type: "object"
          additionalProperties: false
          nullable: true
        "type":
          type: "string"
          description: "The account type"
          enum:
            - "production"
            - "test"
            - null
          example: ["PRODUCTION", "TEST"]
          default: "production"
          x-speakeasy-unknown-values: "allow"
          nullable: true
    "PreconditionFailedResponse":
      type: "object"
      properties:
        "statusCode":
          type: "number"
          description: "HTTP status code"
          example: 412
        "message":
          type: "string"
          description: "Error message"
          example: "Precondition failed"
        "timestamp":
          type: "string"
          description: "Timestamp when the error occurred"
          example: "2023-05-30T00:00:00.000Z"
          format: "date-time"
      required:
        - "statusCode"
        - "message"
        - "timestamp"
    "ProviderError":
      type: "object"
      properties:
        "status":
          type: "number"
          description: "HTTP status code of the provider error"
          example: 400
          nullable: true
        "url":
          type: "string"
          description: "URL that caused the error"
          example: "https://api.provider.com/v1/resource"
          nullable: true
        "raw":
          type: "object"
          description: "Raw error response from the provider"
          example: {"message": "Invalid input parameters"}
          nullable: true
        "headers":
          type: "object"
          description: "Response headers"
          example: {"content-type": "application/json", "x-request-id": "5678c28b211dace4e0a0f9171e6b88c5"}
          nullable: true
    "ProxyRequestBody":
      type: "object"
      properties:
        "url":
          type: "string"
          description: "The base url of the request"
          example: "https://api.sample-integration.com/v1"
          nullable: true
        "method":
          type: "string"
          description: "The method of the request"
          enum:
            - "get"
            - "post"
            - "put"
            - "delete"
            - "patch"
            - null
          default: "get"
          x-speakeasy-unknown-values: "allow"
          nullable: true
        "path":
          type: "string"
          description: "The path of the request including any query paramters"
          example: "/employees/directory"
          nullable: true
        "headers":
          type: "object"
          description: "The headers to send in the request"
          additionalProperties: true
          example: {"Content-Type": "application/json"}
          nullable: true
        "body":
          type: "object"
          description: "The body of the request"
          additionalProperties: true
          nullable: true
    "RequestTimedOutResponse":
      type: "object"
      properties:
        "statusCode":
          type: "number"
          description: "HTTP status code"
          example: 408
        "message":
          type: "string"
          description: "Error message"
          example: "Request timed out"
        "timestamp":
          type: "string"
          description: "Timestamp when the error occurred"
          example: "2023-05-30T00:00:00.000Z"
          format: "date-time"
      required:
        - "statusCode"
        - "message"
        - "timestamp"
    "StatusReason":
      type: "object"
      properties:
        "code":
          type: "string"
          nullable: true
        "description":
          type: "string"
          nullable: true
        "timestamp":
          format: "date-time"
          type: "string"
      required:
        - "timestamp"
    "StepLog":
      type: "object"
      properties:
        "request_id":
          type: "string"
          description: "The request ID"
          example: "adbf752f-6457-4ddd-89b3-98ae2252b83b"
          nullable: true
        "start_time":
          type: "string"
          description: "The request start time ISO8601 date string"
          example: "2021-01-01T00:00:00Z"
          format: "date-time"
          nullable: true
        "end_time":
          type: "string"
          description: "The request end time ISO8601 date string"
          example: "2021-01-01T00:00:00Z"
          format: "date-time"
          nullable: true
        "account_id":
          type: "string"
          description: "The account ID of the request"
          example: "45355976281015164504"
          nullable: true
        "project_id":
          type: "string"
          description: "The project ID of the request"
          example: "dev-project-68574"
          nullable: true
        "http_method":
          type: "string"
          description: "The requested HTTP method"
          example: "get"
          nullable: true
        "path":
          type: "string"
          description: "The requested path"
          example: "/unified/hris/employees"
          nullable: true
        "url":
          type: "string"
          description: "The requested URL"
          example: "https://api.stackone.com/unified/hris/employees?raw=false"
          nullable: true
        "status":
          type: "number"
          description: "The requests response status code"
          example: 200
          nullable: true
        "duration":
          type: "number"
          description: "The request duration in milliseconds"
          example: 356
          nullable: true
        "success":
          type: "boolean"
          description: "The request success flag"
          example: true
          nullable: true
        "provider":
          type: "string"
          description: "The requested provider"
          example: "planday"
          nullable: true
        "service":
          type: "string"
          description: "The requested service"
          example: "hris"
          nullable: true
        "resource":
          type: "string"
          description: "The requested resource"
          example: "employees"
          nullable: true
        "child_resource":
          type: "string"
          description: "The requested child resource"
          example: "time-off"
          nullable: true
        "sub_resource":
          type: "string"
          description: "The requested sub resource"
          example: "documents"
          nullable: true
        "action":
          type: "string"
          description: "The requested action"
          example: "download"
          nullable: true
        "is_worker":
          type: "boolean"
          description: "The asynchronous worker flag"
          example: false
          nullable: true
        "id":
          type: "string"
          description: "The provider request ID"
          example: "adbf752f-6457-4ddd-89b3-98ae2252b83b"
          nullable: true
        "request":
          description: "The advanced log request data"
          nullable: true
          allOf:
            - {"$ref": "#/components/schemas/AdvancedLogRequestData"}
        "response":
          description: "The advanced log response data"
          nullable: true
          allOf:
            - {"$ref": "#/components/schemas/AdvancedLogResponseData"}
    "StepLogPartial":
      type: "object"
      properties:
        "request_id":
          type: "string"
          description: "The request ID"
          example: "adbf752f-6457-4ddd-89b3-98ae2252b83b"
          nullable: true
        "start_time":
          type: "string"
          description: "The request start time ISO8601 date string"
          example: "2021-01-01T00:00:00Z"
          format: "date-time"
          nullable: true
        "end_time":
          type: "string"
          description: "The request end time ISO8601 date string"
          example: "2021-01-01T00:00:00Z"
          format: "date-time"
          nullable: true
        "account_id":
          type: "string"
          description: "The account ID of the request"
          example: "45355976281015164504"
          nullable: true
        "project_id":
          type: "string"
          description: "The project ID of the request"
          example: "dev-project-68574"
          nullable: true
        "http_method":
          type: "string"
          description: "The requested HTTP method"
          example: "get"
          nullable: true
        "path":
          type: "string"
          description: "The requested path"
          example: "/unified/hris/employees"
          nullable: true
        "url":
          type: "string"
          description: "The requested URL"
          example: "https://api.stackone.com/unified/hris/employees?raw=false"
          nullable: true
        "status":
          type: "number"
          description: "The requests response status code"
          example: 200
          nullable: true
        "duration":
          type: "number"
          description: "The request duration in milliseconds"
          example: 356
          nullable: true
        "success":
          type: "boolean"
          description: "The request success flag"
          example: true
          nullable: true
        "provider":
          type: "string"
          description: "The requested provider"
          example: "planday"
          nullable: true
        "service":
          type: "string"
          description: "The requested service"
          example: "hris"
          nullable: true
        "resource":
          type: "string"
          description: "The requested resource"
          example: "employees"
          nullable: true
        "child_resource":
          type: "string"
          description: "The requested child resource"
          example: "time-off"
          nullable: true
        "sub_resource":
          type: "string"
          description: "The requested sub resource"
          example: "documents"
          nullable: true
        "action":
          type: "string"
          description: "The requested action"
          example: "download"
          nullable: true
        "is_worker":
          type: "boolean"
          description: "The asynchronous worker flag"
          example: false
          nullable: true
        "id":
          type: "string"
          description: "The provider request ID"
          example: "adbf752f-6457-4ddd-89b3-98ae2252b83b"
          nullable: true
    "StepLogsPaginated":
      type: "object"
      properties:
        "next":
          type: "string"
          nullable: true
        "data":
          type: "array"
          items: {"$ref": "#/components/schemas/StepLogPartial"}
      required:
        - "data"
    "TooManyRequestsResponse":
      type: "object"
      properties:
        "statusCode":
          type: "number"
          description: "HTTP status code"
          example: 429
        "message":
          type: "string"
          description: "Error message"
          example: "Too many requests"
        "timestamp":
          type: "string"
          description: "Timestamp when the error occurred"
          example: "2023-05-30T00:00:00.000Z"
          format: "date-time"
      required:
        - "statusCode"
        - "message"
        - "timestamp"
    "UnauthorizedResponse":
      type: "object"
      properties:
        "statusCode":
          type: "number"
          description: "HTTP status code"
          example: 401
        "message":
          type: "string"
          description: "Error message"
          example: "Unauthorized"
        "timestamp":
          type: "string"
          description: "Timestamp when the error occurred"
          example: "2023-05-30T00:00:00.000Z"
          format: "date-time"
      required:
        - "statusCode"
        - "message"
        - "timestamp"
    "UnifiedError":
      type: "object"
      properties:
        "statusCode":
          type: "number"
          description: "HTTP status code"
          example: 400
          nullable: true
        "message":
          type: "string"
          description: "Error message"
          example: "Bad Request"
          nullable: true
        "headers":
          type: "object"
          description: "Response headers"
          example: {"content-type": "application/json", "x-request-id": "5678c28b211dace4e0a0f9171e6b88c5"}
          nullable: true
    "UnifiedLogResult":
      type: "object"
      properties:
        "data": {"$ref": "#/components/schemas/UnifiedLogs"}
      required:
        - "data"
    "UnifiedLogs":
      type: "object"
      properties:
        "request_id":
          type: "string"
          description: "The request ID"
          example: "adbf752f-6457-4ddd-89b3-98ae2252b83b"
          nullable: true
        "event_datetime":
          type: "string"
          description: "The event ISO8601 date string"
          example: "2021-01-01T00:00:00Z"
          format: "date-time"
          nullable: true
        "start_time":
          type: "string"
          description: "The request start time ISO8601 date string"
          example: "2021-01-01T00:00:00Z"
          format: "date-time"
          nullable: true
        "end_time":
          type: "string"
          description: "The request end time ISO8601 date string"
          example: "2021-01-01T00:00:00Z"
          format: "date-time"
          nullable: true
        "account_id":
          type: "string"
          description: "The account ID of the request"
          example: "45355976281015164504"
          nullable: true
        "project_id":
          type: "string"
          description: "The project ID of the request"
          example: "dev-project-68574"
          nullable: true
        "http_method":
          type: "string"
          description: "The requested HTTP method"
          example: "get"
          nullable: true
        "path":
          type: "string"
          description: "The requested path"
          example: "/unified/hris/employees"
          nullable: true
        "url":
          type: "string"
          description: "The requested URL"
          example: "https://api.stackone.com/unified/hris/employees?raw=false"
          nullable: true
        "status":
          type: "number"
          description: "The requests response status code"
          example: 200
          nullable: true
        "duration":
          type: "number"
          description: "The request duration in milliseconds"
          example: 356
          nullable: true
        "success":
          type: "boolean"
          description: "The request success flag"
          example: true
          nullable: true
        "provider":
          type: "string"
          description: "The requested provider"
          example: "planday"
          nullable: true
        "service":
          type: "string"
          description: "The requested service"
          example: "hris"
          nullable: true
        "resource":
          type: "string"
          description: "The requested resource"
          example: "employees"
          nullable: true
        "child_resource":
          type: "string"
          description: "The requested child resource"
          example: "time-off"
          nullable: true
        "sub_resource":
          type: "string"
          description: "The requested sub resource"
          example: "documents"
          nullable: true
        "action":
          type: "string"
          description: "The requested action"
          example: "download"
          nullable: true
        "is_worker":
          type: "boolean"
          description: "The asynchronous worker flag"
          example: false
          nullable: true
        "source_type":
          type: "string"
          description: "The requests source type"
          example: "DASHBOARD"
          nullable: true
        "source_value":
          type: "string"
          description: "The requests source value"
          example: "ACCOUNT_TESTER"
          nullable: true
        "source_id":
          type: "string"
          description: "The requests source ID"
          example: "1234567890"
          nullable: true
        "request":
          description: "The advanced log request data"
          nullable: true
          allOf:
            - {"$ref": "#/components/schemas/AdvancedLogRequestData"}
        "response":
          description: "The advanced log response data"
          nullable: true
          allOf:
            - {"$ref": "#/components/schemas/AdvancedLogResponseData"}
        "step_requests":
          type: "array"
          description: "The list of provider requests"
          items: {"$ref": "#/components/schemas/StepLog"}
          nullable: true
    "UnifiedLogsPaginated":
      type: "object"
      properties:
        "next":
          type: "string"
          nullable: true
        "data":
          type: "array"
          items: {"$ref": "#/components/schemas/UnifiedLogsPartial"}
      required:
        - "data"
    "UnifiedLogsPartial":
      type: "object"
      properties:
        "request_id":
          type: "string"
          description: "The request ID"
          example: "adbf752f-6457-4ddd-89b3-98ae2252b83b"
          nullable: true
        "event_datetime":
          type: "string"
          description: "The event ISO8601 date string"
          example: "2021-01-01T00:00:00Z"
          format: "date-time"
          nullable: true
        "start_time":
          type: "string"
          description: "The request start time ISO8601 date string"
          example: "2021-01-01T00:00:00Z"
          format: "date-time"
          nullable: true
        "end_time":
          type: "string"
          description: "The request end time ISO8601 date string"
          example: "2021-01-01T00:00:00Z"
          format: "date-time"
          nullable: true
        "account_id":
          type: "string"
          description: "The account ID of the request"
          example: "45355976281015164504"
          nullable: true
        "project_id":
          type: "string"
          description: "The project ID of the request"
          example: "dev-project-68574"
          nullable: true
        "http_method":
          type: "string"
          description: "The requested HTTP method"
          example: "get"
          nullable: true
        "path":
          type: "string"
          description: "The requested path"
          example: "/unified/hris/employees"
          nullable: true
        "url":
          type: "string"
          description: "The requested URL"
          example: "https://api.stackone.com/unified/hris/employees?raw=false"
          nullable: true
        "status":
          type: "number"
          description: "The requests response status code"
          example: 200
          nullable: true
        "duration":
          type: "number"
          description: "The request duration in milliseconds"
          example: 356
          nullable: true
        "success":
          type: "boolean"
          description: "The request success flag"
          example: true
          nullable: true
        "provider":
          type: "string"
          description: "The requested provider"
          example: "planday"
          nullable: true
        "service":
          type: "string"
          description: "The requested service"
          example: "hris"
          nullable: true
        "resource":
          type: "string"
          description: "The requested resource"
          example: "employees"
          nullable: true
        "child_resource":
          type: "string"
          description: "The requested child resource"
          example: "time-off"
          nullable: true
        "sub_resource":
          type: "string"
          description: "The requested sub resource"
          example: "documents"
          nullable: true
        "action":
          type: "string"
          description: "The requested action"
          example: "download"
          nullable: true
        "is_worker":
          type: "boolean"
          description: "The asynchronous worker flag"
          example: false
          nullable: true
        "source_type":
          type: "string"
          description: "The requests source type"
          example: "DASHBOARD"
          nullable: true
        "source_value":
          type: "string"
          description: "The requests source value"
          example: "ACCOUNT_TESTER"
          nullable: true
        "source_id":
          type: "string"
          description: "The requests source ID"
          example: "1234567890"
          nullable: true
        "step_requests":
          type: "array"
          description: "The list of provider requests"
          items: {"$ref": "#/components/schemas/StepLogPartial"}
          nullable: true
    "UnprocessableEntityResponse":
      type: "object"
      properties:
        "statusCode":
          type: "number"
          description: "HTTP status code"
          example: 422
        "message":
          type: "string"
          description: "Error message"
          example: "Unprocessable Entity"
        "timestamp":
          type: "string"
          description: "Timestamp when the error occurred"
          example: "2023-05-30T00:00:00.000Z"
          format: "date-time"
      required:
        - "statusCode"
        - "message"
        - "timestamp"
