openapi: "3.1.0"
info:
  title: "Documents"
  description: "The documentation for the StackOne Unified API - DOCUMENTS"
  contact: {}
  version: "1.0.0"
servers:
  - url: "https://api.stackone.com"
paths:
  "/connect_sessions":
    post:
      tags:
        - "Connect Sessions"
      summary: "Create Connect Session"
      operationId: "stackone_create_connect_session"
      requestBody:
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/ConnectSessionCreate"}
        required: true
      responses:
        "201":
          description: "The details of the connect session created with token and auth link"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConnectSessionTokenAuthLink"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-name-override: "create"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
      x-speakeasy-group: connectSessions
  "/connect_sessions/authenticate":
    post:
      tags:
        - "Connect Sessions"
      summary: "Authenticate Connect Session"
      operationId: "stackone_authenticate_connect_session"
      requestBody:
        description: "The parameters to authenticate"
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/ConnectSessionAuthenticate"}
        required: true
      responses:
        "201":
          description: "The details of the authenticated connect session."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConnectSession"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-name-override: "authenticate"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
      x-speakeasy-group: connectSessions
  "/accounts":
    get:
      tags:
        - "Accounts"
      summary: "List Accounts"
      operationId: "stackone_list_linked_accounts"
      parameters:
        - name: "page"
          in: "query"
          description: "The page number of the results to fetch"
          required: false
          schema:
            type: "number"
            nullable: true
        - name: "page_size"
          in: "query"
          description: "The number of results per page"
          required: false
          schema:
            type: "number"
            default: 25
            nullable: true
        - name: "provider"
          in: "query"
          description: "The provider of the results to fetch"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
        - name: "origin_owner_id"
          in: "query"
          description: "The origin owner identifier of the results to fetch"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "providers"
          in: "query"
          description: "The providers list of the results to fetch"
          required: false
          schema:
            type: "array"
            items:
              type: "string"
        - name: "account_ids"
          in: "query"
          description: "The providers list of the results to fetch"
          required: false
          schema:
            type: "array"
            items:
              type: "string"
        - name: "status"
          in: "query"
          description: "The status of the results to fetch"
          required: false
          schema:
            type: "array"
            items:
              type: "string"
      responses:
        "200":
          description: "The list of accounts was retrieved."
          content:
            "application/json":
              schema:
                type: "array"
                items: {"$ref": "#/components/schemas/LinkedAccount"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-name-override: "list"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  "/accounts/{id}":
    get:
      tags:
        - "Accounts"
      summary: "Get Account"
      operationId: "stackone_get_account"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "The account with the given identifier was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/LinkedAccount"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-name-override: "get"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
    delete:
      tags:
        - "Accounts"
      summary: "Delete Account"
      operationId: "stackone_delete_account"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "The account with the given identifier was deleted."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/LinkedAccount"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-name-override: "delete"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
    patch:
      tags:
        - "Accounts"
      summary: "Update Account"
      operationId: "stackone_update_account"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
      requestBody:
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/PatchAccountExternalDto"}
        required: true
      responses:
        "200":
          description: "The account with the given identifier was updated."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/LinkedAccount"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-name-override: "update"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  "/accounts/{id}/meta":
    get:
      tags:
        - "Accounts"
      summary: "Get meta information of the account"
      operationId: "stackone_get_account_meta_info"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "The meta information of the account was retrieved"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/LinkedAccountMeta"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-name-override: "getMeta"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  "/requests/logs/steps":
    get:
      tags:
        - "Request Logs"
      summary: "List Step Logs"
      operationId: "stackone_list_step_logs"
      parameters:
        - name: "order_by"
          in: "query"
          description: "The field to order the results by."
          required: false
          schema:
            type: "string"
            enum:
              - "provider"
              - "service"
              - "status"
              - "eventDatetime"
              - "duration"
              - null
            additionalProperties: false
            nullable: true
            example: "created_at"
          x-speakeasy-unknown-values: "allow"
        - name: "order_direction"
          in: "query"
          description: "The direction to order the results by."
          required: false
          schema:
            type: "string"
            enum:
              - "asc"
              - "desc"
              - null
            additionalProperties: false
            nullable: true
            example: "asc"
          x-speakeasy-unknown-values: "allow"
        - name: "page_size"
          in: "query"
          description: "The number of results per page (default value is 25)"
          required: false
          schema:
            type: "number"
            maximum: 100
            nullable: true
        - name: "next"
          in: "query"
          description: "The unified cursor"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "filter"
          in: "query"
          description: "Filter parameters that allow greater customisation of the list response"
          required: false
          schema:
            type: "object"
            properties:
              "account_ids":
                type: "string"
                additionalProperties: false
                description: "A comma-separated list of account IDs to filter the results by."
                nullable: true
                example: "45355976281015164504,45355976281015164505"
              "start_date":
                type: "string"
                additionalProperties: false
                description: "A ISO8601 date string to filter the results by start_date."
                nullable: true
                example: "2020-01-01T00:00:00.000Z"
              "end_date":
                type: "string"
                additionalProperties: false
                description: "A ISO8601 date string to filter the results by end_date."
                nullable: true
                example: "2020-01-01T00:00:00.000Z"
              "request_ids":
                type: "string"
                additionalProperties: false
                description: "A comma-separated list of request IDs to filter the results by."
                nullable: true
                example: "adbf752f-6457-4ddd-89b3-98ae2252b83b,adbf752f-6457-4ddd-89b3-98ae2252b83c"
              "http_methods":
                type: "string"
                additionalProperties: false
                description: "A comma-separated list of HTTP methods to filter the results by."
                nullable: true
                example: "GET,POST"
              "providers":
                type: "string"
                additionalProperties: false
                description: "A comma-separated list of provider keys to filter the results by."
                nullable: true
                example: "ashby,greenhouse"
              "services":
                type: "string"
                additionalProperties: false
                description: "A comma-separated list of services to filter the results by."
                nullable: true
                example: "hris,ats"
              "resources":
                type: "string"
                additionalProperties: false
                description: "A comma-separated list of resources to filter the results by."
                nullable: true
                example: "employees,users"
              "child_resources":
                type: "string"
                additionalProperties: false
                description: "A comma-separated list of child resources to filter the results by."
                nullable: true
                example: "documents,time-off"
              "sub_resources":
                type: "string"
                additionalProperties: false
                description: "A comma-separated list of sub resources to filter the results by."
                nullable: true
                example: "documents,employees"
              "actions":
                type: "string"
                additionalProperties: false
                description: "A comma-separated list of actions to filter the results by."
                nullable: true
                example: "download,upload"
              "status_codes":
                type: "string"
                additionalProperties: false
                description: "A comma-separated list of status codes to filter the results by."
                nullable: true
                example: "200,400"
              "success":
                type: "boolean"
                additionalProperties: false
                description: "A boolean value to filter the results by success or failure."
                nullable: true
                example: true
            nullable: true
      responses:
        "200":
          description: "The list of step logs was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/StepLogsPaginated"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-name-override: "listSteps"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
      x-speakeasy-group: requestLogs
  "/requests/logs/{id}":
    get:
      tags:
        - "Request Logs"
      summary: "Get a Log"
      operationId: "stackone_get_log"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "include"
          in: "query"
          description: "The include parameter allows you to include additional data in the response."
          required: false
          schema:
            type: "string"
            enum:
              - "step_logs"
              - "advanced_logs"
              - null
            nullable: true
            example: "step_logs"
          x-speakeasy-unknown-values: "allow"
      responses:
        "200":
          description: "The log was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnifiedLogResult"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-name-override: "get"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
      x-speakeasy-group: requestLogs
  "/requests/logs":
    get:
      tags:
        - "Request Logs"
      summary: "List Logs"
      operationId: "stackone_list_logs"
      parameters:
        - name: "order_by"
          in: "query"
          description: "The field to order the results by."
          required: false
          schema:
            type: "string"
            enum:
              - "provider"
              - "service"
              - "status"
              - "eventDatetime"
              - "duration"
              - null
            additionalProperties: false
            nullable: true
            example: "created_at"
          x-speakeasy-unknown-values: "allow"
        - name: "order_direction"
          in: "query"
          description: "The direction to order the results by."
          required: false
          schema:
            type: "string"
            enum:
              - "asc"
              - "desc"
              - null
            additionalProperties: false
            nullable: true
            example: "asc"
          x-speakeasy-unknown-values: "allow"
        - name: "page_size"
          in: "query"
          description: "The number of results per page (default value is 25)"
          required: false
          schema:
            type: "number"
            maximum: 100
            nullable: true
        - name: "next"
          in: "query"
          description: "The unified cursor"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "include"
          in: "query"
          description: "The include parameter allows you to include additional data in the response."
          required: false
          schema:
            type: "string"
            enum:
              - "step_logs"
              - null
            nullable: true
            example: "step_logs"
          x-speakeasy-unknown-values: "allow"
        - name: "filter"
          in: "query"
          description: "Filter parameters that allow greater customisation of the list response"
          required: false
          schema:
            type: "object"
            properties:
              "account_ids":
                type: "string"
                additionalProperties: false
                description: "A comma-separated list of account IDs to filter the results by."
                nullable: true
                example: "45355976281015164504,45355976281015164505"
              "start_date":
                type: "string"
                additionalProperties: false
                description: "A ISO8601 date string to filter the results by start_date."
                nullable: true
                example: "2020-01-01T00:00:00.000Z"
              "end_date":
                type: "string"
                additionalProperties: false
                description: "A ISO8601 date string to filter the results by end_date."
                nullable: true
                example: "2020-01-01T00:00:00.000Z"
              "request_ids":
                type: "string"
                additionalProperties: false
                description: "A comma-separated list of request IDs to filter the results by."
                nullable: true
                example: "adbf752f-6457-4ddd-89b3-98ae2252b83b,adbf752f-6457-4ddd-89b3-98ae2252b83c"
              "source_types":
                type: "string"
                additionalProperties: false
                description: "A comma-separated list of source types to filter the results by."
                nullable: true
                example: "DASHBOARD,SYNTHETIC_WEBHOOK"
              "source_values":
                type: "string"
                additionalProperties: false
                description: "A comma-separated list of source values to filter the results by."
                nullable: true
              "source_ids":
                type: "string"
                additionalProperties: false
                description: "A comma-separated list of source IDs to filter the results by."
                nullable: true
              "http_methods":
                type: "string"
                additionalProperties: false
                description: "A comma-separated list of HTTP methods to filter the results by."
                nullable: true
                example: "GET,POST"
              "providers":
                type: "string"
                additionalProperties: false
                description: "A comma-separated list of provider keys to filter the results by."
                nullable: true
                example: "ashby,greenhouse"
              "services":
                type: "string"
                additionalProperties: false
                description: "A comma-separated list of services to filter the results by."
                nullable: true
                example: "hris,ats"
              "resources":
                type: "string"
                additionalProperties: false
                description: "A comma-separated list of resources to filter the results by."
                nullable: true
                example: "employees,users"
              "child_resources":
                type: "string"
                additionalProperties: false
                description: "A comma-separated list of child resources to filter the results by."
                nullable: true
                example: "documents,time-off"
              "sub_resources":
                type: "string"
                additionalProperties: false
                description: "A comma-separated list of sub resources to filter the results by."
                nullable: true
                example: "documents,employees"
              "actions":
                type: "string"
                additionalProperties: false
                description: "A comma-separated list of actions to filter the results by."
                nullable: true
                example: "download,upload"
              "status_codes":
                type: "string"
                additionalProperties: false
                description: "A comma-separated list of status codes to filter the results by."
                nullable: true
                example: "200,400"
              "success":
                type: "boolean"
                additionalProperties: false
                description: "A boolean value to filter the results by success or failure."
                nullable: true
                example: true
              "order_by":
                type: "string"
                enum:
                  - "provider"
                  - "service"
                  - "status"
                  - "eventDatetime"
                  - "duration"
                  - null
                additionalProperties: false
                description: "The field to order the results by."
                nullable: true
                example: "created_at"
              "order_direction":
                type: "string"
                enum:
                  - "asc"
                  - "desc"
                  - null
                additionalProperties: false
                description: "The direction to order the results by."
                nullable: true
                example: "asc"
            nullable: true
      responses:
        "200":
          description: "The list of logs was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnifiedLogsPaginated"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-name-override: "list"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
      x-speakeasy-group: requestLogs
  "/connectors/meta":
    get:
      tags:
        - "Connectors"
      summary: "List Connectors Meta Information for all providers"
      operationId: "stackone_list_connectors_meta"
      parameters:
        - name: "include"
          in: "query"
          description: "The comma separated list of data that will be included in the response"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "field_path,unmapped_fields,resources,inactive,webhooks,static_fields"
      responses:
        "200":
          description: "The list of connectors meta information was retrieved."
          content:
            "application/json":
              schema:
                type: "array"
                items: {"$ref": "#/components/schemas/ConnectorsMeta"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-name-override: "listMeta"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  "/connectors/meta/{provider}":
    get:
      tags:
        - "Connectors"
      summary: "Get Connector Meta information for the given provider key"
      operationId: "stackone_get_connector_meta"
      parameters:
        - name: "provider"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "include"
          in: "query"
          description: "The comma separated list of data that will be included in the response"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "field_path,unmapped_fields,resources,inactive,webhooks,static_fields"
      responses:
        "200":
          description: "The connector meta information was retrieved"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConnectorsMeta"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-name-override: "getMeta"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  "/unified/proxy":
    post:
      tags:
        - "Proxy"
      summary: "Proxy Request"
      operationId: "stackone_proxy_request"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
      requestBody:
        description: "The request body"
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/ProxyRequestBody"}
        required: true
      responses:
        "200":
          description: "The proxy request was successful."
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-name-override: "perform"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/hris/companies:
    get:
      tags:
        - "Companies"
      summary: "List Companies"
      operationId: "hris_list_companies"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,name,full_name,display_name,created_at,updated_at"
        - name: "filter"
          in: "query"
          description: "Filter parameters that allow greater customisation of the list response"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            properties:
              "updated_after":
                type: "string"
                additionalProperties: false
                description: "Use a string with a date to only select results updated after that given date"
                nullable: true
                example: "2020-01-01T00:00:00.000Z"
            nullable: true
        - name: "page"
          in: "query"
          description: "The page number of the results to fetch"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
        - name: "page_size"
          in: "query"
          description: "The number of results per page (default value is 25)"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "next"
          in: "query"
          description: "The unified cursor"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "updated_after"
          in: "query"
          description: "Use a string with a date to only select results updated after that given date"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
            example: "2020-01-01T00:00:00.000Z"
      responses:
        "200":
          description: "The list of Companies was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/CompaniesPaginated"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "hris"
      x-speakeasy-name-override: "list_companies"
      x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "next", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.next"}}
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/hris/companies/{id}:
    get:
      tags:
        - "Companies"
      summary: "Get Company"
      operationId: "hris_get_company"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,name,full_name,display_name,created_at,updated_at"
      responses:
        "200":
          description: "The Company with the given identifier was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/CompanyResult"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "hris"
      x-speakeasy-name-override: "get_company"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/hris/custom_field_definitions/employees:
    get:
      tags:
        - "Custom Field Definitions"
      summary: "List employee Custom Field Definitions"
      operationId: "hris_list_employee_custom_field_definitions"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,name,description,type,options"
        - name: "filter"
          in: "query"
          description: "Filter parameters that allow greater customisation of the list response"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            properties:
              "updated_after":
                type: "string"
                additionalProperties: false
                description: "Use a string with a date to only select results updated after that given date"
                nullable: true
                example: "2020-01-01T00:00:00.000Z"
            nullable: true
        - name: "page"
          in: "query"
          description: "The page number of the results to fetch"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
        - name: "page_size"
          in: "query"
          description: "The number of results per page (default value is 25)"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "next"
          in: "query"
          description: "The unified cursor"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "updated_after"
          in: "query"
          description: "Use a string with a date to only select results updated after that given date"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
            example: "2020-01-01T00:00:00.000Z"
      responses:
        "200":
          description: "The list of employee custom field definitions was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/CustomFieldDefinitionsPaginated"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "hris"
      x-speakeasy-name-override: "list_employee_custom_field_definitions"
      x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "next", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.next"}}
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/hris/custom_field_definitions/employees/{id}:
    get:
      tags:
        - "Custom Field Definitions"
      summary: "Get employee Custom Field Definition"
      operationId: "hris_get_employee_custom_field_definition"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,name,description,type,options"
        - name: "filter"
          in: "query"
          description: "Filter parameters that allow greater customisation of the list response"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            properties:
              "updated_after":
                type: "string"
                additionalProperties: false
                description: "Use a string with a date to only select results updated after that given date"
                nullable: true
                example: "2020-01-01T00:00:00.000Z"
            nullable: true
        - name: "page"
          in: "query"
          description: "The page number of the results to fetch"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
        - name: "page_size"
          in: "query"
          description: "The number of results per page (default value is 25)"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "next"
          in: "query"
          description: "The unified cursor"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "updated_after"
          in: "query"
          description: "Use a string with a date to only select results updated after that given date"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
            example: "2020-01-01T00:00:00.000Z"
      responses:
        "200":
          description: "The employee custom field definition was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/CustomFieldDefinitionResultApiModel"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "hris"
      x-speakeasy-name-override: "get_employee_custom_field_definition"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/hris/employees:
    get:
      tags:
        - "Employees"
      summary: "List Employees"
      operationId: "hris_list_employees"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,first_name,last_name,name,display_name,gender,ethnicity,date_of_birth,birthday,marital_status,avatar_url,avatar,personal_email,personal_phone_number,work_email,work_phone_number,job_id,remote_job_id,job_title,job_description,department_id,remote_department_id,department,cost_centers,company,manager_id,remote_manager_id,hire_date,start_date,tenure,work_anniversary,employment_type,employment_contract_type,employment_status,termination_date,company_name,company_id,remote_company_id,preferred_language,citizenships,home_location,work_location,employments,custom_fields,documents,created_at,updated_at,benefits,employee_number,national_identity_number,national_identity_numbers,skills"
        - name: "filter"
          in: "query"
          description: "HRIS Employees filters"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            properties:
              "updated_after":
                type: "string"
                additionalProperties: false
                description: "Use a string with a date to only select results updated after that given date"
                nullable: true
                example: "2020-01-01T00:00:00.000Z"
              "email":
                type: "string"
                description: "Filter to select employees by email"
                nullable: true
              "employee_number":
                type: "string"
                description: "Filter to select employees by employee_number"
                nullable: true
            nullable: true
        - name: "page"
          in: "query"
          description: "The page number of the results to fetch"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
        - name: "page_size"
          in: "query"
          description: "The number of results per page (default value is 25)"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "next"
          in: "query"
          description: "The unified cursor"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "updated_after"
          in: "query"
          description: "Use a string with a date to only select results updated after that given date"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
            example: "2020-01-01T00:00:00.000Z"
        - name: "expand"
          in: "query"
          description: "The comma separated list of fields that will be expanded in the response"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "company,employments,work_location,home_location,groups,skills"
        - name: "include"
          in: "query"
          description: "The comma separated list of fields that will be included in the response"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "avatar_url,avatar,custom_fields,job_description,benefits"
      responses:
        "200":
          description: "The list of employees was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/EmployeesPaginated"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "hris"
      x-speakeasy-name-override: "list_employees"
      x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "next", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.next"}}
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
      x-speakeasy-usage-example: {"title": "List Employees", "position": 1}
    post:
      tags:
        - "Employees"
      summary: "Creates an employee"
      operationId: "hris_create_employee"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
      requestBody:
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/HrisCreateEmployeeRequestDto"}
        required: true
      responses:
        "201":
          description: "The employee was created successfully."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/CreateResult"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "hris"
      x-speakeasy-name-override: "create_employee"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/hris/employees/{id}:
    get:
      tags:
        - "Employees"
      summary: "Get Employee"
      operationId: "hris_get_employee"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,first_name,last_name,name,display_name,gender,ethnicity,date_of_birth,birthday,marital_status,avatar_url,avatar,personal_email,personal_phone_number,work_email,work_phone_number,job_id,remote_job_id,job_title,job_description,department_id,remote_department_id,department,cost_centers,company,manager_id,remote_manager_id,hire_date,start_date,tenure,work_anniversary,employment_type,employment_contract_type,employment_status,termination_date,company_name,company_id,remote_company_id,preferred_language,citizenships,home_location,work_location,employments,custom_fields,documents,created_at,updated_at,benefits,employee_number,national_identity_number,national_identity_numbers,skills"
        - name: "expand"
          in: "query"
          description: "The comma separated list of fields that will be expanded in the response"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "company,employments,work_location,home_location,groups,skills"
        - name: "include"
          in: "query"
          description: "The comma separated list of fields that will be included in the response"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "avatar_url,avatar,custom_fields,job_description,benefits"
      responses:
        "200":
          description: "The employee with the given identifier was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/EmployeeResult"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "hris"
      x-speakeasy-name-override: "get_employee"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
    patch:
      tags:
        - "Employees"
      summary: "Updates an employee"
      operationId: "hris_update_employee"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
      requestBody:
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/HrisUpdateEmployeeRequestDto"}
        required: true
      responses:
        "200":
          description: "Record updated successfully"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UpdateResult"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "hris"
      x-speakeasy-name-override: "update_employee"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/hris/employees/{id}/invite:
    post:
      tags:
        - "Employees"
      summary: "Invite Employee"
      operationId: "hris_invite_employee"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
      requestBody:
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/HrisInviteEmployeeRequestDto"}
        required: true
      responses:
        "200":
          description: "Record invited successfully"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InviteEmployeeResult"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "hris"
      x-speakeasy-name-override: "invite_employee"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/hris/employees/{id}/time_off:
    get:
      tags:
        - "Employees"
        - "Time Off"
      summary: "List Employee Time Off Requests"
      operationId: "hris_list_employee_time_off_requests"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,employee_id,remote_employee_id,approver_id,remote_approver_id,status,type,start_date,end_date,start_half_day,end_half_day,time_off_policy_id,remote_time_off_policy_id,reason,comment,duration,created_at,updated_at,policy"
        - name: "filter"
          in: "query"
          description: "HRIS Time Off filters"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            properties:
              "updated_after":
                type: "string"
                additionalProperties: false
                description: "Use a string with a date to only select results updated after that given date"
                nullable: true
                example: "2020-01-01T00:00:00.000Z"
              "type_ids":
                type: "array"
                items:
                  type: "string"
                description: "List of time off type ids to filter by."
                nullable: true
            nullable: true
        - name: "page"
          in: "query"
          description: "The page number of the results to fetch"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
        - name: "page_size"
          in: "query"
          description: "The number of results per page (default value is 25)"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "next"
          in: "query"
          description: "The unified cursor"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "updated_after"
          in: "query"
          description: "Use a string with a date to only select results updated after that given date"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
            example: "2020-01-01T00:00:00.000Z"
        - name: "expand"
          in: "query"
          description: "The comma separated list of fields that will be expanded in the response"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "policy"
      responses:
        "200":
          description: "The time off requests related to the employee with the given identifier were retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TimeOffPaginated"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "hris"
      x-speakeasy-name-override: "list_employee_time_off_requests"
      x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "next", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.next"}}
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
    post:
      tags:
        - "Employees"
        - "Time Off"
      summary: "Create Employee Time Off Request"
      operationId: "hris_create_employee_time_off_request"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
      requestBody:
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/HrisCreateTimeOffRequestDto"}
        required: true
      responses:
        "201":
          description: "Record created successfully."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/CreateResult"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "hris"
      x-speakeasy-name-override: "create_employee_time_off_request"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/hris/employees/{id}/time_off/{subResourceId}:
    get:
      tags:
        - "Employees"
        - "Time Off"
      summary: "Get Employees Time Off Request"
      operationId: "hris_get_employees_time_off_request"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "subResourceId"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,employee_id,remote_employee_id,approver_id,remote_approver_id,status,type,start_date,end_date,start_half_day,end_half_day,time_off_policy_id,remote_time_off_policy_id,reason,comment,duration,created_at,updated_at,policy"
        - name: "expand"
          in: "query"
          description: "The comma separated list of fields that will be expanded in the response"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "policy"
      responses:
        "200":
          description: "The time off request related to the employee with the given identifiers was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TimeOffResult"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "hris"
      x-speakeasy-name-override: "get_employees_time_off_request"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
    delete:
      tags:
        - "Employees"
        - "Time Off"
      summary: "Cancel Employee Time Off Request"
      operationId: "hris_cancel_employee_time_off_request"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "subResourceId"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "Record cancelled successfully."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/DeleteResult"}
        "204":
          description: "The time off request was cancelled successfully but no content was returned."
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "hris"
      x-speakeasy-name-override: "cancel_employee_time_off_request"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
    patch:
      tags:
        - "Employees"
        - "Time Off"
      summary: "Update Employee Time Off Request"
      operationId: "hris_update_employee_time_off_request"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "subResourceId"
          in: "path"
          required: true
          schema:
            type: "string"
      requestBody:
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/HrisCreateTimeOffRequestDto"}
        required: true
      responses:
        "200":
          description: "Record updated successfully"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/CreateResult"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "hris"
      x-speakeasy-name-override: "update_employee_time_off_request"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/hris/employees/{id}/documents/upload/batch:
    post:
      tags:
        - "Employees"
        - "Documents"
      summary: "Batch Upload Employee Document"
      operationId: "hris_batch_upload_employee_document"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
      requestBody:
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/HrisBatchDocumentUploadRequestDto"}
        required: true
      responses:
        "202":
          description: "Batch operation accepted"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BatchResultApiModel"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "hris"
      x-speakeasy-name-override: "batch_upload_employee_document"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/hris/employees/{id}/documents/upload:
    post:
      tags:
        - "Employees"
        - "Documents"
      summary: "Upload Employee Document"
      operationId: "hris_upload_employee_document"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
      requestBody:
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/HrisDocumentsUploadRequestDto"}
        required: true
      responses:
        "201":
          description: "The document related to the employee with the given identifier was uploaded."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/WriteResultApiModel"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "hris"
      x-speakeasy-name-override: "upload_employee_document"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/hris/employees/{id}/documents/{subResourceId}/download:
    get:
      tags:
        - "Employees"
        - "Documents"
      summary: "Download Employee Document"
      operationId: "hris_download_employee_document"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "subResourceId"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "format"
          in: "query"
          description: "The format to download the file in"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "base64"
        - name: "export_format"
          in: "query"
          description: "The export format of the file"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "text/plain"
      responses:
        "200":
          description: "The document related to the employee with the given identifiers was retrieved."
          content:
            "application/octet-stream":
              schema:
                type: "string"
                format: "binary"
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "hris"
      x-speakeasy-name-override: "download_employee_document"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/hris/employees/{id}/documents:
    get:
      tags:
        - "Employees"
        - "Documents"
      summary: "List Employee Documents"
      operationId: "hris_list_employee_documents"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,name,path,type,category,category_id,remote_category_id,contents,created_at,updated_at,remote_url,file_format"
        - name: "filter"
          in: "query"
          description: "Filter parameters that allow greater customisation of the list response"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            properties:
              "updated_after":
                type: "string"
                additionalProperties: false
                description: "Use a string with a date to only select results updated after that given date"
                nullable: true
                example: "2020-01-01T00:00:00.000Z"
            nullable: true
        - name: "page"
          in: "query"
          description: "The page number of the results to fetch"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
        - name: "page_size"
          in: "query"
          description: "The number of results per page (default value is 25)"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "next"
          in: "query"
          description: "The unified cursor"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "updated_after"
          in: "query"
          description: "Use a string with a date to only select results updated after that given date"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
            example: "2020-01-01T00:00:00.000Z"
      responses:
        "200":
          description: "The documents related to the employee with the given identifier were retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/HrisDocumentsPaginated"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "hris"
      x-speakeasy-name-override: "list_employee_documents"
      x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "next", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.next"}}
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/hris/employees/{id}/documents/{subResourceId}:
    get:
      tags:
        - "Employees"
        - "Documents"
      summary: "Get Employee Document"
      operationId: "hris_get_employee_document"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "subResourceId"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,name,path,type,category,category_id,remote_category_id,contents,created_at,updated_at,remote_url,file_format"
      responses:
        "200":
          description: "The document related to the employee with the given identifiers was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/HrisDocumentResult"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "hris"
      x-speakeasy-name-override: "get_employee_document"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/hris/documents/employee_categories:
    get:
      tags:
        - "Documents"
      summary: "List Employee Document Categories"
      operationId: "hris_list_employee_categories"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,name,active"
        - name: "filter"
          in: "query"
          description: "Filter parameters that allow greater customisation of the list response"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            properties:
              "updated_after":
                type: "string"
                additionalProperties: false
                description: "Use a string with a date to only select results updated after that given date"
                nullable: true
                example: "2020-01-01T00:00:00.000Z"
            nullable: true
        - name: "page"
          in: "query"
          description: "The page number of the results to fetch"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
        - name: "page_size"
          in: "query"
          description: "The number of results per page (default value is 25)"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "next"
          in: "query"
          description: "The unified cursor"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "updated_after"
          in: "query"
          description: "Use a string with a date to only select results updated after that given date"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
            example: "2020-01-01T00:00:00.000Z"
      responses:
        "200":
          description: "The list of employee document categories were retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ReferencePaginated"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "hris"
      x-speakeasy-name-override: "list_employee_categories"
      x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "next", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.next"}}
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/hris/documents/employee_categories/{id}:
    get:
      tags:
        - "Documents"
      summary: "Get Employee Document Category"
      operationId: "hris_get_employee_document_category"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,name,active"
      responses:
        "200":
          description: "The employee document category with the given identifier was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ReferenceResult"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "hris"
      x-speakeasy-name-override: "get_employee_document_category"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/hris/employees/{id}/work_eligibility:
    get:
      tags:
        - "Employees"
        - "Work Eligibility"
      summary: "List Employee Work Eligibility"
      operationId: "hris_list_employee_work_eligibility"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,type,sub_type,document,valid_from,valid_to,issued_by,number"
        - name: "filter"
          in: "query"
          description: "Filter parameters that allow greater customisation of the list response"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            properties:
              "updated_after":
                type: "string"
                additionalProperties: false
                description: "Use a string with a date to only select results updated after that given date"
                nullable: true
                example: "2020-01-01T00:00:00.000Z"
            nullable: true
        - name: "page"
          in: "query"
          description: "The page number of the results to fetch"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
        - name: "page_size"
          in: "query"
          description: "The number of results per page (default value is 25)"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "next"
          in: "query"
          description: "The unified cursor"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "updated_after"
          in: "query"
          description: "Use a string with a date to only select results updated after that given date"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
            example: "2020-01-01T00:00:00.000Z"
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "The work eligibility of the employee with the given identifier were retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/WorkEligibilityPaginated"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "hris"
      x-speakeasy-name-override: "list_employee_work_eligibility"
      x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "next", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.next"}}
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
    post:
      tags:
        - "Employees"
        - "Work Eligibility"
      summary: "Create Employee Work Eligibility Request"
      operationId: "hris_create_employee_work_eligibility_request"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
      requestBody:
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/HrisCreateWorkEligibilityRequestDto"}
        required: true
      responses:
        "201":
          description: "Record created successfully."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/CreateResult"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "hris"
      x-speakeasy-name-override: "create_employee_work_eligibility_request"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/hris/employees/{id}/work_eligibility/{subResourceId}:
    get:
      tags:
        - "Employees"
        - "Work Eligibility"
      summary: "Get Employees Work Eligibility"
      operationId: "hris_get_employees_work_eligibility"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "subResourceId"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,type,sub_type,document,valid_from,valid_to,issued_by,number"
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "The work eligibility of the employee with the given identifiers was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/WorkEligibilityResult"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "hris"
      x-speakeasy-name-override: "get_employees_work_eligibility"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
    patch:
      tags:
        - "Employees"
        - "Work Eligibility"
      summary: "Update Employee Work Eligibility Request"
      operationId: "hris_update_employee_work_eligibility_request"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "subResourceId"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
      requestBody:
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/HrisCreateWorkEligibilityRequestDto"}
        required: true
      responses:
        "200": {}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "hris"
      x-speakeasy-name-override: "update_employee_work_eligibility_request"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/hris/employees/{id}/time_off_balances:
    get:
      tags:
        - "Employees"
        - "Time Off Balances"
      summary: "List Employee Time Off Balances"
      operationId: "hris_list_employee_time_off_balances"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,employee_id,remote_employee_id,policy_id,remote_policy_id,policy,current_balance,initial_balance,balance_unit,balance_start_date,balance_expiry_date,updated_at"
        - name: "filter"
          in: "query"
          description: "HRIS Time Off Balance filters"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            properties:
              "updated_after":
                type: "string"
                additionalProperties: false
                description: "Use a string with a date to only select results updated after that given date"
                nullable: true
                example: "2020-01-01T00:00:00.000Z"
              "policy_ids":
                type: "array"
                items:
                  type: "string"
                additionalProperties: false
                description: "List of policy ids to filter time off balances by."
                nullable: true
            nullable: true
        - name: "page"
          in: "query"
          description: "The page number of the results to fetch"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
        - name: "page_size"
          in: "query"
          description: "The number of results per page (default value is 25)"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "next"
          in: "query"
          description: "The unified cursor"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "updated_after"
          in: "query"
          description: "Use a string with a date to only select results updated after that given date"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
            example: "2020-01-01T00:00:00.000Z"
        - name: "expand"
          in: "query"
          description: "The comma separated list of fields that will be expanded in the response"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "policy"
      responses:
        "200":
          description: "The list of time off balances of the employee with the given identifier was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TimeOffBalancesPaginated"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "hris"
      x-speakeasy-name-override: "list_employee_time_off_balances"
      x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "next", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.next"}}
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/hris/employees/{id}/time_off_balances/{subResourceId}:
    get:
      tags:
        - "Employees"
        - "Time Off Balances"
      summary: "Get Employee Time Off Balance"
      operationId: "hris_get_employee_time_off_balance"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "subResourceId"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,employee_id,remote_employee_id,policy_id,remote_policy_id,policy,current_balance,initial_balance,balance_unit,balance_start_date,balance_expiry_date,updated_at"
        - name: "expand"
          in: "query"
          description: "The comma separated list of fields that will be expanded in the response"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "policy"
      responses:
        "200":
          description: "The time off balance of the employee with the given identifier was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TimeOffBalanceResult"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "hris"
      x-speakeasy-name-override: "get_employee_time_off_balance"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/hris/employments:
    get:
      tags:
        - "Employments"
      summary: "List Employments"
      operationId: "hris_list_employments"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,employee_id,remote_employee_id,job_title,pay_rate,pay_period,pay_frequency,pay_currency,effective_date,end_date,employment_type,employment_contract_type,change_reason,grade,work_time,payroll_code,fte,created_at,updated_at,start_date,active,department,team,cost_center,cost_centers,division,job,type,contract_type,manager"
        - name: "filter"
          in: "query"
          description: "Filter parameters that allow greater customisation of the list response"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            properties:
              "updated_after":
                type: "string"
                additionalProperties: false
                description: "Use a string with a date to only select results updated after that given date"
                nullable: true
                example: "2020-01-01T00:00:00.000Z"
            nullable: true
        - name: "page"
          in: "query"
          description: "The page number of the results to fetch"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
        - name: "page_size"
          in: "query"
          description: "The number of results per page (default value is 25)"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "next"
          in: "query"
          description: "The unified cursor"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "updated_after"
          in: "query"
          description: "Use a string with a date to only select results updated after that given date"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
            example: "2020-01-01T00:00:00.000Z"
        - name: "expand"
          in: "query"
          description: "The comma separated list of fields that will be expanded in the response"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "groups"
      responses:
        "200":
          description: "The list of Employments was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/EmploymentsPaginated"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "hris"
      x-speakeasy-name-override: "list_employments"
      x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "next", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.next"}}
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/hris/employments/{id}:
    get:
      tags:
        - "Employments"
      summary: "Get Employment"
      operationId: "hris_get_employment"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,employee_id,remote_employee_id,job_title,pay_rate,pay_period,pay_frequency,pay_currency,effective_date,end_date,employment_type,employment_contract_type,change_reason,grade,work_time,payroll_code,fte,created_at,updated_at,start_date,active,department,team,cost_center,cost_centers,division,job,type,contract_type,manager"
        - name: "expand"
          in: "query"
          description: "The comma separated list of fields that will be expanded in the response"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "groups"
      responses:
        "200":
          description: "The Employment with the given identifier was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/EmploymentResult"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "hris"
      x-speakeasy-name-override: "get_employment"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/hris/employees/{id}/employments:
    get:
      tags:
        - "Employees"
        - "Employments"
      summary: "List Employee Employments"
      operationId: "hris_list_employee_employments"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,employee_id,remote_employee_id,job_title,pay_rate,pay_period,pay_frequency,pay_currency,effective_date,end_date,employment_type,employment_contract_type,change_reason,grade,work_time,payroll_code,fte,created_at,updated_at,start_date,active,department,team,cost_center,cost_centers,division,job,type,contract_type,manager"
        - name: "filter"
          in: "query"
          description: "Filter parameters that allow greater customisation of the list response"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            properties:
              "updated_after":
                type: "string"
                additionalProperties: false
                description: "Use a string with a date to only select results updated after that given date"
                nullable: true
                example: "2020-01-01T00:00:00.000Z"
            nullable: true
        - name: "page"
          in: "query"
          description: "The page number of the results to fetch"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
        - name: "page_size"
          in: "query"
          description: "The number of results per page (default value is 25)"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "next"
          in: "query"
          description: "The unified cursor"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "updated_after"
          in: "query"
          description: "Use a string with a date to only select results updated after that given date"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
            example: "2020-01-01T00:00:00.000Z"
        - name: "expand"
          in: "query"
          description: "The comma separated list of fields that will be expanded in the response"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "groups"
      responses:
        "200":
          description: "The list of Employee Employments was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/EmploymentsPaginated"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "hris"
      x-speakeasy-name-override: "list_employee_employments"
      x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "next", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.next"}}
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
    post:
      tags:
        - "Employees"
        - "Employments"
      summary: "Create Employee Employment"
      operationId: "hris_create_employee_employment"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
      requestBody:
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/HrisCreateEmploymentRequestDto"}
        required: true
      responses:
        "201":
          description: "The employee employment was created successfully."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/CreateResult"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "hris"
      x-speakeasy-name-override: "create_employee_employment"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/hris/employees/{id}/employments/{subResourceId}:
    get:
      tags:
        - "Employees"
        - "Employments"
      summary: "Get Employee Employment"
      operationId: "hris_get_employee_employment"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "subResourceId"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,employee_id,remote_employee_id,job_title,pay_rate,pay_period,pay_frequency,pay_currency,effective_date,end_date,employment_type,employment_contract_type,change_reason,grade,work_time,payroll_code,fte,created_at,updated_at,start_date,active,department,team,cost_center,cost_centers,division,job,type,contract_type,manager"
        - name: "expand"
          in: "query"
          description: "The comma separated list of fields that will be expanded in the response"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "groups"
      responses:
        "200":
          description: "The Employee Employment with the given identifier was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/EmploymentResult"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "hris"
      x-speakeasy-name-override: "get_employee_employment"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
    patch:
      tags:
        - "Employees"
        - "Employments"
      summary: "Update Employee Employment"
      operationId: "hris_update_employee_employment"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "subResourceId"
          in: "path"
          required: true
          schema:
            type: "string"
      requestBody:
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/HrisUpdateEmploymentRequestDto"}
        required: true
      responses:
        "200":
          description: "The employee employment was updated successfully."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UpdateResult"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "hris"
      x-speakeasy-name-override: "update_employee_employment"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/hris/groups:
    get:
      tags:
        - "Groups"
      summary: "List Groups"
      operationId: "hris_list_groups"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,name,type,parent_ids,remote_parent_ids,owner_ids,remote_owner_ids,company_id,remote_company_id"
        - name: "filter"
          in: "query"
          description: "Filter parameters that allow greater customisation of the list response"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            properties:
              "updated_after":
                type: "string"
                additionalProperties: false
                description: "Use a string with a date to only select results updated after that given date"
                nullable: true
                example: "2020-01-01T00:00:00.000Z"
            nullable: true
        - name: "page"
          in: "query"
          description: "The page number of the results to fetch"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
        - name: "page_size"
          in: "query"
          description: "The number of results per page (default value is 25)"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "next"
          in: "query"
          description: "The unified cursor"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "updated_after"
          in: "query"
          description: "Use a string with a date to only select results updated after that given date"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
            example: "2020-01-01T00:00:00.000Z"
      responses:
        "200":
          description: "The list of groups was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/HRISGroupsPaginated"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "hris"
      x-speakeasy-name-override: "list_groups"
      x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "next", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.next"}}
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/hris/groups/departments:
    get:
      tags:
        - "Groups"
      summary: "List Department Groups"
      operationId: "hris_list_department_groups"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,name,type,parent_ids,remote_parent_ids,owner_ids,remote_owner_ids,company_id,remote_company_id"
        - name: "filter"
          in: "query"
          description: "Filter parameters that allow greater customisation of the list response"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            properties:
              "updated_after":
                type: "string"
                additionalProperties: false
                description: "Use a string with a date to only select results updated after that given date"
                nullable: true
                example: "2020-01-01T00:00:00.000Z"
            nullable: true
        - name: "page"
          in: "query"
          description: "The page number of the results to fetch"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
        - name: "page_size"
          in: "query"
          description: "The number of results per page (default value is 25)"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "next"
          in: "query"
          description: "The unified cursor"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "updated_after"
          in: "query"
          description: "Use a string with a date to only select results updated after that given date"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
            example: "2020-01-01T00:00:00.000Z"
      responses:
        "200":
          description: "The list of department groups was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/HRISDepartmentsPaginated"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "hris"
      x-speakeasy-name-override: "list_department_groups"
      x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "next", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.next"}}
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/hris/groups/cost_centers:
    get:
      tags:
        - "Groups"
      summary: "List Cost Center Groups"
      operationId: "hris_list_cost_center_groups"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,name,type,distribution_percentage,parent_ids,remote_parent_ids,owner_ids,remote_owner_ids,company_id,remote_company_id"
        - name: "filter"
          in: "query"
          description: "Filter parameters that allow greater customisation of the list response"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            properties:
              "updated_after":
                type: "string"
                additionalProperties: false
                description: "Use a string with a date to only select results updated after that given date"
                nullable: true
                example: "2020-01-01T00:00:00.000Z"
            nullable: true
        - name: "page"
          in: "query"
          description: "The page number of the results to fetch"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
        - name: "page_size"
          in: "query"
          description: "The number of results per page (default value is 25)"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "next"
          in: "query"
          description: "The unified cursor"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "updated_after"
          in: "query"
          description: "Use a string with a date to only select results updated after that given date"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
            example: "2020-01-01T00:00:00.000Z"
      responses:
        "200":
          description: "The list of cost center groups was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/HRISCostCenterPaginated"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "hris"
      x-speakeasy-name-override: "list_cost_center_groups"
      x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "next", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.next"}}
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/hris/groups/teams:
    get:
      tags:
        - "Groups"
      summary: "List Team Groups"
      operationId: "hris_list_team_groups"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,name,type,parent_ids,remote_parent_ids,owner_ids,remote_owner_ids"
        - name: "filter"
          in: "query"
          description: "Filter parameters that allow greater customisation of the list response"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            properties:
              "updated_after":
                type: "string"
                additionalProperties: false
                description: "Use a string with a date to only select results updated after that given date"
                nullable: true
                example: "2020-01-01T00:00:00.000Z"
            nullable: true
        - name: "page"
          in: "query"
          description: "The page number of the results to fetch"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
        - name: "page_size"
          in: "query"
          description: "The number of results per page (default value is 25)"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "next"
          in: "query"
          description: "The unified cursor"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "updated_after"
          in: "query"
          description: "Use a string with a date to only select results updated after that given date"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
            example: "2020-01-01T00:00:00.000Z"
      responses:
        "200":
          description: "The list of team groups was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/HRISTeamsPaginated"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "hris"
      x-speakeasy-name-override: "list_team_groups"
      x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "next", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.next"}}
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/hris/groups/divisions:
    get:
      tags:
        - "Groups"
      summary: "List Division Groups"
      operationId: "hris_list_division_groups"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,name,type,parent_ids,remote_parent_ids,owner_ids,remote_owner_ids,company_id,remote_company_id"
        - name: "filter"
          in: "query"
          description: "Filter parameters that allow greater customisation of the list response"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            properties:
              "updated_after":
                type: "string"
                additionalProperties: false
                description: "Use a string with a date to only select results updated after that given date"
                nullable: true
                example: "2020-01-01T00:00:00.000Z"
            nullable: true
        - name: "page"
          in: "query"
          description: "The page number of the results to fetch"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
        - name: "page_size"
          in: "query"
          description: "The number of results per page (default value is 25)"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "next"
          in: "query"
          description: "The unified cursor"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "updated_after"
          in: "query"
          description: "Use a string with a date to only select results updated after that given date"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
            example: "2020-01-01T00:00:00.000Z"
      responses:
        "200":
          description: "The list of division groups was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/HRISDivisionsPaginated"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "hris"
      x-speakeasy-name-override: "list_division_groups"
      x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "next", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.next"}}
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/hris/groups/companies:
    get:
      tags:
        - "Groups"
      summary: "List Companies Groups"
      operationId: "hris_list_companies_groups"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,name,full_name,display_name,created_at,updated_at"
        - name: "filter"
          in: "query"
          description: "Filter parameters that allow greater customisation of the list response"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            properties:
              "updated_after":
                type: "string"
                additionalProperties: false
                description: "Use a string with a date to only select results updated after that given date"
                nullable: true
                example: "2020-01-01T00:00:00.000Z"
            nullable: true
        - name: "page"
          in: "query"
          description: "The page number of the results to fetch"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
        - name: "page_size"
          in: "query"
          description: "The number of results per page (default value is 25)"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "next"
          in: "query"
          description: "The unified cursor"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "updated_after"
          in: "query"
          description: "Use a string with a date to only select results updated after that given date"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
            example: "2020-01-01T00:00:00.000Z"
      responses:
        "200":
          description: "The list of companies groups was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/CompaniesPaginated"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "hris"
      x-speakeasy-name-override: "list_companies_groups"
      x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "next", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.next"}}
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/hris/groups/{id}:
    get:
      tags:
        - "Groups"
      summary: "Get Group"
      operationId: "hris_get_group"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,name,type,parent_ids,remote_parent_ids,owner_ids,remote_owner_ids,company_id,remote_company_id"
      responses:
        "200":
          description: "The group with the given identifier was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/HRISGroupsResult"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "hris"
      x-speakeasy-name-override: "get_group"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/hris/groups/departments/{id}:
    get:
      tags:
        - "Groups"
      summary: "Get Department Group"
      operationId: "hris_get_department_group"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,name,type,parent_ids,remote_parent_ids,owner_ids,remote_owner_ids,company_id,remote_company_id"
      responses:
        "200":
          description: "The department group with the given identifier was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/HRISDepartmentsResult"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "hris"
      x-speakeasy-name-override: "get_department_group"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/hris/groups/cost_centers/{id}:
    get:
      tags:
        - "Groups"
      summary: "Get Cost Center Group"
      operationId: "hris_get_cost_center_group"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,name,type,distribution_percentage,parent_ids,remote_parent_ids,owner_ids,remote_owner_ids,company_id,remote_company_id"
      responses:
        "200":
          description: "The cost center group with the given identifier was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/HRISCostCenterResult"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "hris"
      x-speakeasy-name-override: "get_cost_center_group"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/hris/groups/teams/{id}:
    get:
      tags:
        - "Groups"
      summary: "Get Team Group"
      operationId: "hris_get_team_group"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,name,type,parent_ids,remote_parent_ids,owner_ids,remote_owner_ids"
      responses:
        "200":
          description: "The team group with the given identifier was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/HRISTeamsResult"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "hris"
      x-speakeasy-name-override: "get_team_group"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/hris/groups/divisions/{id}:
    get:
      tags:
        - "Groups"
      summary: "Get Division Group"
      operationId: "hris_get_division_group"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,name,type,parent_ids,remote_parent_ids,owner_ids,remote_owner_ids,company_id,remote_company_id"
      responses:
        "200":
          description: "The division group with the given identifier was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/HRISDivisionsResult"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "hris"
      x-speakeasy-name-override: "get_division_group"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/hris/groups/companies/{id}:
    get:
      tags:
        - "Groups"
      summary: "Get Company Group"
      operationId: "hris_get_company_group"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,name,full_name,display_name,created_at,updated_at"
      responses:
        "200":
          description: "The company group with the given identifier was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/CompanyResult"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "hris"
      x-speakeasy-name-override: "get_company_group"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/hris/jobs:
    get:
      tags:
        - "Jobs"
      summary: "List Jobs"
      operationId: "hris_list_jobs"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,name,type,parent_ids,remote_parent_ids,owner_ids,remote_owner_ids,company_id,remote_company_id"
        - name: "filter"
          in: "query"
          description: "Filter parameters that allow greater customisation of the list response"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            properties:
              "updated_after":
                type: "string"
                additionalProperties: false
                description: "Use a string with a date to only select results updated after that given date"
                nullable: true
                example: "2020-01-01T00:00:00.000Z"
            nullable: true
        - name: "page"
          in: "query"
          description: "The page number of the results to fetch"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
        - name: "page_size"
          in: "query"
          description: "The number of results per page (default value is 25)"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "next"
          in: "query"
          description: "The unified cursor"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "updated_after"
          in: "query"
          description: "Use a string with a date to only select results updated after that given date"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
            example: "2020-01-01T00:00:00.000Z"
      responses:
        "200":
          description: "The list of jobs was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/JobsPaginated"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "hris"
      x-speakeasy-name-override: "list_jobs"
      x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "next", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.next"}}
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/hris/jobs/{id}:
    get:
      tags:
        - "Jobs"
      summary: "Get Job"
      operationId: "hris_get_job"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,name,type,parent_ids,remote_parent_ids,owner_ids,remote_owner_ids,company_id,remote_company_id"
      responses:
        "200":
          description: "The job with the given identifier was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/JobResult"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "hris"
      x-speakeasy-name-override: "get_job"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/hris/locations:
    get:
      tags:
        - "Locations"
      summary: "List Work Locations"
      operationId: "hris_list_locations"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,employee_id,remote_employee_id,name,phone_number,street_1,street_2,city,state,zip_code,country,location_type,created_at,updated_at"
        - name: "filter"
          in: "query"
          description: "Filter parameters that allow greater customisation of the list response"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            properties:
              "updated_after":
                type: "string"
                additionalProperties: false
                description: "Use a string with a date to only select results updated after that given date"
                nullable: true
                example: "2020-01-01T00:00:00.000Z"
            nullable: true
        - name: "page"
          in: "query"
          description: "The page number of the results to fetch"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
        - name: "page_size"
          in: "query"
          description: "The number of results per page (default value is 25)"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "next"
          in: "query"
          description: "The unified cursor"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "updated_after"
          in: "query"
          description: "Use a string with a date to only select results updated after that given date"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
            example: "2020-01-01T00:00:00.000Z"
      responses:
        "200":
          description: "The list of work locations was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/HRISLocationsPaginated"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "hris"
      x-speakeasy-name-override: "list_locations"
      x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "next", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.next"}}
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/hris/locations/{id}:
    get:
      tags:
        - "Locations"
      summary: "Get Work Location"
      operationId: "hris_get_location"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,employee_id,remote_employee_id,name,phone_number,street_1,street_2,city,state,zip_code,country,location_type,created_at,updated_at"
      responses:
        "200":
          description: "The work location with the given identifier was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/HRISLocationResult"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "hris"
      x-speakeasy-name-override: "get_location"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/hris/positions:
    get:
      tags:
        - "Positions"
      summary: "List Positions"
      operationId: "hris_list_positions"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields to return in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "filter"
          in: "query"
          description: "Filter parameters that allow greater customisation of the list response"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            properties:
              "updated_after":
                type: "string"
                additionalProperties: false
                description: "Use a string with a date to only select results updated after that given date"
                nullable: true
                example: "2020-01-01T00:00:00.000Z"
            nullable: true
        - name: "page"
          in: "query"
          description: "The page number of the results to fetch"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
        - name: "page_size"
          in: "query"
          description: "The number of results per page (default value is 25)"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "next"
          in: "query"
          description: "The unified cursor"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "updated_after"
          in: "query"
          description: "Use a string with a date to only select results updated after that given date"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
            example: "2020-01-01T00:00:00.000Z"
        - name: "status"
          in: "query"
          description: "Filter positions by status"
          required: false
          schema:
            type: "string"
            enum:
              - "open"
              - "closed"
              - "paused"
              - "unmapped_value"
              - null
            nullable: true
            example: "open"
          x-speakeasy-unknown-values: "allow"
      responses:
        "200":
          description: "The list of positions was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PositionsPaginated"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "hris"
      x-speakeasy-name-override: "list_positions"
      x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "next", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.next"}}
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/hris/positions/{id}:
    get:
      tags:
        - "Positions"
      summary: "Get Position"
      operationId: "hris_get_position"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields to return in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
      responses:
        "200":
          description: "The position with the given identifier was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PositionResult"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "hris"
      x-speakeasy-name-override: "get_position"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/hris/time_entries:
    get:
      tags:
        - "Time Entries"
      summary: "List Time Entries"
      operationId: "hris_list_time_entries"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,employee_id,remote_employee_id,start_time,end_time,hours_worked,break_duration,labor_type,location,status,created_at,updated_at"
        - name: "filter"
          in: "query"
          description: "HRIS Time Entries filters"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            properties:
              "updated_after":
                type: "string"
                additionalProperties: false
                description: "Use a string with a date to only select results updated after that given date"
                nullable: true
                example: "2020-01-01T00:00:00.000Z"
              "employee_id":
                type: "string"
                additionalProperties: false
                description: "Filter to select time entries by employee_id"
                nullable: true
              "start_time":
                type: "string"
                additionalProperties: false
                description: "Filter to select time entries after a given time"
                nullable: true
                example: "2020-01-01T00:00:00.000Z"
              "end_time":
                type: "string"
                additionalProperties: false
                description: "Filter to select time entries before a given time"
                nullable: true
                example: "2020-01-01T00:00:00.000Z"
            nullable: true
        - name: "page"
          in: "query"
          description: "The page number of the results to fetch"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
        - name: "page_size"
          in: "query"
          description: "The number of results per page (default value is 25)"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "next"
          in: "query"
          description: "The unified cursor"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "updated_after"
          in: "query"
          description: "Use a string with a date to only select results updated after that given date"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
            example: "2020-01-01T00:00:00.000Z"
      responses:
        "200":
          description: "The list of time entries was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TimeEntriesPaginated"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "hris"
      x-speakeasy-name-override: "list_time_entries"
      x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "next", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.next"}}
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/hris/time_entries/{id}:
    get:
      tags:
        - "Time Entries"
      summary: "Get Time Entry"
      operationId: "hris_get_time_entries"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,employee_id,remote_employee_id,start_time,end_time,hours_worked,break_duration,labor_type,location,status,created_at,updated_at"
      responses:
        "200":
          description: "The time entry with the given identifier was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TimeEntriesResult"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "hris"
      x-speakeasy-name-override: "get_time_entries"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/hris/time_off:
    get:
      tags:
        - "Time Off"
      summary: "List time off requests"
      operationId: "hris_list_time_off_requests"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,employee_id,remote_employee_id,approver_id,remote_approver_id,status,type,start_date,end_date,start_half_day,end_half_day,time_off_policy_id,remote_time_off_policy_id,reason,comment,duration,created_at,updated_at,policy"
        - name: "filter"
          in: "query"
          description: "HRIS Time Off filters"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            properties:
              "updated_after":
                type: "string"
                additionalProperties: false
                description: "Use a string with a date to only select results updated after that given date"
                nullable: true
                example: "2020-01-01T00:00:00.000Z"
              "type_ids":
                type: "array"
                items:
                  type: "string"
                description: "List of time off type ids to filter by."
                nullable: true
            nullable: true
        - name: "page"
          in: "query"
          description: "The page number of the results to fetch"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
        - name: "page_size"
          in: "query"
          description: "The number of results per page (default value is 25)"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "next"
          in: "query"
          description: "The unified cursor"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "updated_after"
          in: "query"
          description: "Use a string with a date to only select results updated after that given date"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
            example: "2020-01-01T00:00:00.000Z"
        - name: "expand"
          in: "query"
          description: "The comma separated list of fields that will be expanded in the response"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "policy"
      responses:
        "200":
          description: "The list of time off requests was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TimeOffPaginated"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "hris"
      x-speakeasy-name-override: "list_time_off_requests"
      x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "next", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.next"}}
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/hris/time_off/{id}:
    get:
      tags:
        - "Time Off"
      summary: "Get time off request"
      operationId: "hris_get_time_off_request"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,employee_id,remote_employee_id,approver_id,remote_approver_id,status,type,start_date,end_date,start_half_day,end_half_day,time_off_policy_id,remote_time_off_policy_id,reason,comment,duration,created_at,updated_at,policy"
        - name: "expand"
          in: "query"
          description: "The comma separated list of fields that will be expanded in the response"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "policy"
      responses:
        "200":
          description: "The time off request with the given identifier was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TimeOffResult"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "hris"
      x-speakeasy-name-override: "get_time_off_request"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/hris/shifts:
    get:
      tags:
        - "Shifts"
      summary: "List Shifts"
      operationId: "hris_list_shifts"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields to return in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "filter"
          in: "query"
          description: "HRIS Shifts filters"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            properties:
              "updated_after":
                type: "string"
                additionalProperties: false
                description: "Use a string with a date to only select results updated after that given date"
                nullable: true
                example: "2020-01-01T00:00:00.000Z"
              "employee_id":
                type: "string"
                description: "Filter to select shifts by employee ID"
                nullable: true
              "status":
                type: "string"
                enum:
                  - "draft"
                  - "published"
                  - "confirmed"
                  - "cancelled"
                  - "unmapped_value"
                description: "Filter to select shifts by status"
                nullable: true
              "starts_after":
                type: "string"
                format: "date-time"
                description: "Filter shifts that start after this date"
                nullable: true
              "ends_before":
                type: "string"
                format: "date-time"
                description: "Filter shifts that end before this date"
                nullable: true
            nullable: true
        - name: "page"
          in: "query"
          description: "The page number of the results to fetch"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
        - name: "page_size"
          in: "query"
          description: "The number of results per page (default value is 25)"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "next"
          in: "query"
          description: "The unified cursor"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "updated_after"
          in: "query"
          description: "Use a string with a date to only select results updated after that given date"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
            example: "2020-01-01T00:00:00.000Z"
      responses:
        "200":
          description: "The list of shifts was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/HrisShiftsPaginated"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "hris"
      x-speakeasy-name-override: "list_shifts"
      x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "next", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.next"}}
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/hris/shifts/{id}:
    get:
      tags:
        - "Shifts"
      summary: "Get Shift"
      operationId: "hris_get_shift"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields to return in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
      responses:
        "200":
          description: "The shift with the given identifier was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/HrisShiftResult"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "hris"
      x-speakeasy-name-override: "get_shift"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/hris/time_off_types:
    get:
      tags:
        - "Time Off"
      summary: "List time off types"
      operationId: "hris_list_time_off_types"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,name,active"
        - name: "filter"
          in: "query"
          description: "Filter parameters that allow greater customisation of the list response"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            properties:
              "updated_after":
                type: "string"
                additionalProperties: false
                description: "Use a string with a date to only select results updated after that given date"
                nullable: true
                example: "2020-01-01T00:00:00.000Z"
            nullable: true
        - name: "page"
          in: "query"
          description: "The page number of the results to fetch"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
        - name: "page_size"
          in: "query"
          description: "The number of results per page (default value is 25)"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "next"
          in: "query"
          description: "The unified cursor"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "updated_after"
          in: "query"
          description: "Use a string with a date to only select results updated after that given date"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
            example: "2020-01-01T00:00:00.000Z"
      responses:
        "200":
          description: "The list of time off types was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ReferencePaginated"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      deprecated: true
      security:
        - basic: []
      x-speakeasy-group: "hris"
      x-speakeasy-name-override: "list_time_off_types"
      x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "next", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.next"}}
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/hris/time_off_types/{id}:
    get:
      tags:
        - "Time Off"
      summary: "Get time off type"
      operationId: "hris_get_time_off_type"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,name,active"
      responses:
        "200":
          description: "The time off type with the given identifier was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ReferenceResult"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      deprecated: true
      security:
        - basic: []
      x-speakeasy-group: "hris"
      x-speakeasy-name-override: "get_time_off_type"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/hris/time_off_policies:
    get:
      tags:
        - "Time Off Policies"
      summary: "List Time Off Policies"
      operationId: "hris_list_time_off_policies"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,name,description,type,duration_unit,reasons,updated_at,created_at"
        - name: "filter"
          in: "query"
          description: "HRIS Time-Off Policies filters"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            properties:
              "updated_after":
                type: "string"
                additionalProperties: false
                description: "Use a string with a date to only select results updated after that given date"
                nullable: true
                example: "2020-01-01T00:00:00.000Z"
              "type":
                type: "string"
                enum:
                  - "sick"
                  - "unmapped_value"
                  - "vacation"
                  - "long_term_disability"
                  - "short_term_disability"
                  - "absent"
                  - "comp_time"
                  - "training"
                  - "annual_leave"
                  - "leave_of_absence"
                  - "break"
                  - "child_care_leave"
                  - "maternity_leave"
                  - "jury_duty"
                  - "sabbatical"
                  - "accident"
                  - "paid"
                  - "unpaid"
                  - "holiday"
                  - "personal"
                  - "in_lieu"
                  - "bereavement"
                  - null
                description: "Filter to select time-off policies by type"
                nullable: true
            nullable: true
        - name: "page"
          in: "query"
          description: "The page number of the results to fetch"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
        - name: "page_size"
          in: "query"
          description: "The number of results per page (default value is 25)"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "next"
          in: "query"
          description: "The unified cursor"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "updated_after"
          in: "query"
          description: "Use a string with a date to only select results updated after that given date"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
            example: "2020-01-01T00:00:00.000Z"
      responses:
        "200":
          description: "The list of time off policies was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TimeOffPoliciesPaginated"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "hris"
      x-speakeasy-name-override: "list_time_off_policies"
      x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "next", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.next"}}
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/hris/time_off_policies/{id}:
    get:
      tags:
        - "Time Off Policies"
      summary: "Get Time Off Policy"
      operationId: "hris_get_time_off_policy"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,name,description,type,duration_unit,reasons,updated_at,created_at"
      responses:
        "200":
          description: "The time off policy with the given identifier was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TimeOffPolicyResult"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "hris"
      x-speakeasy-name-override: "get_time_off_policy"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/hris/employees/{id}/time_off_policies:
    get:
      tags:
        - "Employees"
        - "Time Off Policies"
      summary: "List Assigned Time Off Policies"
      operationId: "hris_list_employee_time_off_policies"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,name,description,type,duration_unit,reasons,updated_at,created_at"
        - name: "filter"
          in: "query"
          description: "HRIS Time-Off Policies filters"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            properties:
              "updated_after":
                type: "string"
                additionalProperties: false
                description: "Use a string with a date to only select results updated after that given date"
                nullable: true
                example: "2020-01-01T00:00:00.000Z"
              "type":
                type: "string"
                enum:
                  - "sick"
                  - "unmapped_value"
                  - "vacation"
                  - "long_term_disability"
                  - "short_term_disability"
                  - "absent"
                  - "comp_time"
                  - "training"
                  - "annual_leave"
                  - "leave_of_absence"
                  - "break"
                  - "child_care_leave"
                  - "maternity_leave"
                  - "jury_duty"
                  - "sabbatical"
                  - "accident"
                  - "paid"
                  - "unpaid"
                  - "holiday"
                  - "personal"
                  - "in_lieu"
                  - "bereavement"
                  - null
                description: "Filter to select time-off policies by type"
                nullable: true
            nullable: true
        - name: "page"
          in: "query"
          description: "The page number of the results to fetch"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
        - name: "page_size"
          in: "query"
          description: "The number of results per page (default value is 25)"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "next"
          in: "query"
          description: "The unified cursor"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "updated_after"
          in: "query"
          description: "Use a string with a date to only select results updated after that given date"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
            example: "2020-01-01T00:00:00.000Z"
      responses:
        "200":
          description: "The time off policies related to the employee with the given identifier were retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TimeOffPoliciesPaginated"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "hris"
      x-speakeasy-name-override: "list_employee_time_off_policies"
      x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "next", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.next"}}
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/hris/benefits:
    get:
      tags:
        - "Benefits"
      summary: "List benefits"
      operationId: "hris_list_benefits"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,name,benefit_type,provider,description,created_at,updated_at"
        - name: "filter"
          in: "query"
          description: "Filter parameters that allow greater customisation of the list response"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            properties:
              "updated_after":
                type: "string"
                additionalProperties: false
                description: "Use a string with a date to only select results updated after that given date"
                nullable: true
                example: "2020-01-01T00:00:00.000Z"
            nullable: true
        - name: "page"
          in: "query"
          description: "The page number of the results to fetch"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
        - name: "page_size"
          in: "query"
          description: "The number of results per page (default value is 25)"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "next"
          in: "query"
          description: "The unified cursor"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "updated_after"
          in: "query"
          description: "Use a string with a date to only select results updated after that given date"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
            example: "2020-01-01T00:00:00.000Z"
      responses:
        "200":
          description: "The list of Benefits was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/HRISBenefitsPaginated"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "hris"
      x-speakeasy-name-override: "list_benefits"
      x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "next", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.next"}}
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/hris/benefits/{id}:
    get:
      tags:
        - "Benefits"
      summary: "Get Benefit"
      operationId: "hris_get_benefit"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,name,benefit_type,provider,description,created_at,updated_at"
      responses:
        "200":
          description: "The Benefit with the given identifier was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/HRISBenefitResult"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "hris"
      x-speakeasy-name-override: "get_benefit"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/hris/employees/{id}/skills:
    get:
      tags:
        - "Employees"
        - "Skills"
      summary: "List Employee Skills"
      operationId: "hris_list_employee_skills"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,name,active,language,maximum_proficiency,minimum_proficiency"
        - name: "filter"
          in: "query"
          description: "Filter parameters that allow greater customisation of the list response"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            properties:
              "updated_after":
                type: "string"
                additionalProperties: false
                description: "Use a string with a date to only select results updated after that given date"
                nullable: true
                example: "2020-01-01T00:00:00.000Z"
            nullable: true
        - name: "page"
          in: "query"
          description: "The page number of the results to fetch"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
        - name: "page_size"
          in: "query"
          description: "The number of results per page (default value is 25)"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "next"
          in: "query"
          description: "The unified cursor"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "updated_after"
          in: "query"
          description: "Use a string with a date to only select results updated after that given date"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
            example: "2020-01-01T00:00:00.000Z"
      responses:
        "200":
          description: "The skills related to the employee with the given identifier were retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/EntitySkillsPaginated"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "hris"
      x-speakeasy-name-override: "list_employee_skills"
      x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "next", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.next"}}
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
    post:
      tags:
        - "Employees"
        - "Skills"
      summary: "Create Employee Skill"
      operationId: "hris_create_employee_skill"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
      requestBody:
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/EntitySkillsCreateRequestDto"}
        required: true
      responses:
        "201":
          description: "The skill was created successfully."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/CreateResult"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "hris"
      x-speakeasy-name-override: "create_employee_skill"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/hris/employees/{id}/skills/{subResourceId}:
    get:
      tags:
        - "Employees"
        - "Skills"
      summary: "Get Employee Skill"
      operationId: "hris_get_employee_skill"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "subResourceId"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,name,active,language,maximum_proficiency,minimum_proficiency"
      responses:
        "200":
          description: "The skill related to the employee with the given identifiers was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/EntitySkillResult"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "hris"
      x-speakeasy-name-override: "get_employee_skill"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/hris/employees/{id}/tasks:
    get:
      tags:
        - "Employees"
        - "Tasks"
      summary: "List Employee Tasks"
      operationId: "hris_list_employee_tasks"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,employee_id,remote_employee_id,name,description,type,status,due_date,completion_date,assigned_by_employee_id,remote_assigned_by_employee_id,assigned_by_employee_name,link_to_task,extracted_links,next_task_id,remote_next_task_id,parent_process_name,comments,attachments,created_at,updated_at"
        - name: "filter"
          in: "query"
          description: "Filter parameters that allow greater customisation of the list response"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            properties:
              "updated_after":
                type: "string"
                additionalProperties: false
                description: "Use a string with a date to only select results updated after that given date"
                nullable: true
                example: "2020-01-01T00:00:00.000Z"
            nullable: true
        - name: "page"
          in: "query"
          description: "The page number of the results to fetch"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
        - name: "page_size"
          in: "query"
          description: "The number of results per page (default value is 25)"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "next"
          in: "query"
          description: "The unified cursor"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "updated_after"
          in: "query"
          description: "Use a string with a date to only select results updated after that given date"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
            example: "2020-01-01T00:00:00.000Z"
        - name: "expand"
          in: "query"
          description: "The comma separated list of fields that will be expanded in the response"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "attachments"
      responses:
        "200":
          description: "The list of tasks for the employee with the given identifier was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TasksPaginated"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "hris"
      x-speakeasy-name-override: "list_employee_tasks"
      x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "next", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.next"}}
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/hris/employees/{id}/tasks/{subResourceId}:
    get:
      tags:
        - "Employees"
        - "Tasks"
      summary: "Get Employee Task"
      operationId: "hris_get_employee_task"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "subResourceId"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,employee_id,remote_employee_id,name,description,type,status,due_date,completion_date,assigned_by_employee_id,remote_assigned_by_employee_id,assigned_by_employee_name,link_to_task,extracted_links,next_task_id,remote_next_task_id,parent_process_name,comments,attachments,created_at,updated_at"
        - name: "expand"
          in: "query"
          description: "The comma separated list of fields that will be expanded in the response"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "attachments"
      responses:
        "200":
          description: "The task with the given identifier for the employee was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TaskResult"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "hris"
      x-speakeasy-name-override: "get_employee_task"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
    patch:
      tags:
        - "Employees"
        - "Tasks"
      summary: "Complete Employee Task"
      operationId: "hris_complete_employee_task"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "subResourceId"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "proxy"
          in: "query"
          required: false
          style: "deepObject"
          explode: true
          schema: {}
      requestBody:
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/CompleteTaskRequestDto"}
        required: true
      responses:
        "200":
          description: "The task has been successfully completed"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TaskResult"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "hris"
      x-speakeasy-name-override: "complete_employee_task"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/hris/tasks:
    get:
      tags:
        - "Tasks"
      summary: "List Tasks"
      operationId: "hris_list_tasks"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,employee_id,remote_employee_id,name,description,type,status,due_date,completion_date,assigned_by_employee_id,remote_assigned_by_employee_id,assigned_by_employee_name,link_to_task,extracted_links,next_task_id,remote_next_task_id,parent_process_name,comments,attachments,created_at,updated_at"
        - name: "filter"
          in: "query"
          description: "Filter parameters that allow greater customisation of the list response"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            properties:
              "updated_after":
                type: "string"
                additionalProperties: false
                description: "Use a string with a date to only select results updated after that given date"
                nullable: true
                example: "2020-01-01T00:00:00.000Z"
            nullable: true
        - name: "page"
          in: "query"
          description: "The page number of the results to fetch"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
        - name: "page_size"
          in: "query"
          description: "The number of results per page (default value is 25)"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "next"
          in: "query"
          description: "The unified cursor"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "updated_after"
          in: "query"
          description: "Use a string with a date to only select results updated after that given date"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
            example: "2020-01-01T00:00:00.000Z"
        - name: "expand"
          in: "query"
          description: "The comma separated list of fields that will be expanded in the response"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "attachments"
      responses:
        "200":
          description: "The list of tasks was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TasksPaginated"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "hris"
      x-speakeasy-name-override: "list_tasks"
      x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "next", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.next"}}
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/hris/tasks/{id}:
    get:
      tags:
        - "Tasks"
      summary: "Get Task"
      operationId: "hris_get_task"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,employee_id,remote_employee_id,name,description,type,status,due_date,completion_date,assigned_by_employee_id,remote_assigned_by_employee_id,assigned_by_employee_name,link_to_task,extracted_links,next_task_id,remote_next_task_id,parent_process_name,comments,attachments,created_at,updated_at"
        - name: "expand"
          in: "query"
          description: "The comma separated list of fields that will be expanded in the response"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "attachments"
      responses:
        "200":
          description: "The task with the given identifier was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TaskResult"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "hris"
      x-speakeasy-name-override: "get_task"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/ats/applications:
    get:
      tags:
        - "Applications"
      summary: "List Applications"
      operationId: "ats_list_applications"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,candidate_id,remote_candidate_id,job_id,remote_job_id,job_posting_id,remote_job_posting_id,interview_stage,interview_stage_id,remote_interview_stage_id,rejected_reason,rejected_reason_id,remote_rejected_reason_id,rejected_reason_ids,remote_rejected_reason_ids,rejected_reasons,rejected_at,location_id,remote_location_id,location_ids,remote_location_ids,status,application_status,questionnaires,attachments,result_links,source,created_at,updated_at,documents,custom_fields,candidate"
        - name: "filter"
          in: "query"
          description: "ATS Application Filter"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            properties:
              "updated_after":
                type: "string"
                additionalProperties: false
                description: "Use a string with a date to only select results updated after that given date"
                nullable: true
                example: "2020-01-01T00:00:00.000Z"
              "created_after":
                type: "string"
                additionalProperties: false
                description: "Use a string with a date to only select results created after that given date"
                nullable: true
                example: "2020-01-01T00:00:00.000Z"
              "job_id":
                type: "string"
                description: "Filter to select applications by job_id"
                nullable: true
              "stage":
                type: "string"
                description: "Filter to select applications by stage and sub-stage"
                nullable: true
            nullable: true
        - name: "page"
          in: "query"
          description: "The page number of the results to fetch"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
        - name: "page_size"
          in: "query"
          description: "The number of results per page (default value is 25)"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "next"
          in: "query"
          description: "The unified cursor"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "updated_after"
          in: "query"
          description: "Use a string with a date to only select results updated after that given date"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
            example: "2020-01-01T00:00:00.000Z"
        - name: "sync_token"
          in: "query"
          description: "The sync token to select the only updated results"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
        - name: "expand"
          in: "query"
          description: "The comma separated list of fields that will be expanded in the response"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "documents"
        - name: "include"
          in: "query"
          description: "The comma separated list of fields that will be included in the response"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "attachments,custom_fields"
        - name: "job_id"
          in: "query"
          description: "Filter for job ID to retrieve a list of applications related to this job"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
            example: "cxQiyiuasdFKfdsYfer"
      responses:
        "200":
          description: "The list of applications was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ApplicationsPaginated"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "ats"
      x-speakeasy-name-override: "list_applications"
      x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "next", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.next"}}
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
    post:
      tags:
        - "Applications"
      summary: "Create Application"
      operationId: "ats_create_application"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
      requestBody:
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/AtsCreateApplicationRequestDto"}
        required: true
      responses:
        "201":
          description: "The application was created successfully."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/CreateResult"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "ats"
      x-speakeasy-name-override: "create_application"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/ats/applications/{id}:
    get:
      tags:
        - "Applications"
      summary: "Get Application"
      operationId: "ats_get_application"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,candidate_id,remote_candidate_id,job_id,remote_job_id,job_posting_id,remote_job_posting_id,interview_stage,interview_stage_id,remote_interview_stage_id,rejected_reason,rejected_reason_id,remote_rejected_reason_id,rejected_reason_ids,remote_rejected_reason_ids,rejected_reasons,rejected_at,location_id,remote_location_id,location_ids,remote_location_ids,status,application_status,questionnaires,attachments,result_links,source,created_at,updated_at,documents,custom_fields,candidate"
        - name: "expand"
          in: "query"
          description: "The comma separated list of fields that will be expanded in the response"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "documents"
        - name: "include"
          in: "query"
          description: "The comma separated list of fields that will be included in the response"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "attachments,custom_fields"
      responses:
        "200":
          description: "The application with the given identifier was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ApplicationResult"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "ats"
      x-speakeasy-name-override: "get_application"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
    patch:
      tags:
        - "Applications"
      summary: "Update an Application"
      operationId: "ats_update_application"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
      requestBody:
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/AtsUpdateApplicationRequestDto"}
        required: true
      responses:
        "200":
          description: "Record updated successfully."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UpdateResult"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "ats"
      x-speakeasy-name-override: "update_application"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/ats/applications/{id}/offers:
    get:
      tags:
        - "Applications"
        - "Offers"
      summary: "List Application Offers"
      operationId: "ats_list_applications_offers"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,application_id,remote_application_id,start_date,status,offer_status,salary,currency,created_at,updated_at,offer_history"
        - name: "filter"
          in: "query"
          description: "Filter parameters that allow greater customisation of the list response"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            properties:
              "updated_after":
                type: "string"
                additionalProperties: false
                description: "Use a string with a date to only select results updated after that given date"
                nullable: true
                example: "2020-01-01T00:00:00.000Z"
            nullable: true
        - name: "page"
          in: "query"
          description: "The page number of the results to fetch"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
        - name: "page_size"
          in: "query"
          description: "The number of results per page (default value is 25)"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "next"
          in: "query"
          description: "The unified cursor"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "updated_after"
          in: "query"
          description: "Use a string with a date to only select results updated after that given date"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
            example: "2020-01-01T00:00:00.000Z"
        - name: "sync_token"
          in: "query"
          description: "The sync token to select the only updated results"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
      responses:
        "200":
          description: "The offers related to the application with the given identifier were retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/OffersPaginated"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "ats"
      x-speakeasy-name-override: "list_applications_offers"
      x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "next", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.next"}}
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/ats/applications/{id}/move:
    post:
      tags:
        - "Applications"
      summary: "Move Application"
      operationId: "ats_move_application"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
      requestBody:
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/AtsMoveApplicationRequestDto"}
        required: true
      responses:
        "200":
          description: "The application was moved successfully."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/MoveApplicationResult"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "ats"
      x-speakeasy-name-override: "move_application"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/ats/applications/{id}/reject:
    post:
      tags:
        - "Applications"
      summary: "Reject Application"
      operationId: "ats_reject_application"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
      requestBody:
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/AtsRejectApplicationRequestDto"}
        required: true
      responses:
        "200":
          description: "The application was rejected successfully."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RejectApplicationResult"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "ats"
      x-speakeasy-name-override: "reject_application"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/ats/applications/{id}/offers/{subResourceId}:
    get:
      tags:
        - "Applications"
        - "Offers"
      summary: "Get Application Offer"
      operationId: "ats_get_application_offer"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "subResourceId"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,application_id,remote_application_id,start_date,status,offer_status,salary,currency,created_at,updated_at,offer_history"
      responses:
        "200":
          description: "The offer related to the application with the given identifiers was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/OffersResult"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "ats"
      x-speakeasy-name-override: "get_application_offer"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/ats/applications/{id}/scorecards:
    get:
      tags:
        - "Applications"
        - "Scorecards"
      summary: "List Application Scorecards"
      operationId: "ats_list_application_scorecards"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,sections,label,candidate_id,remote_candidate_id,application_id,remote_application_id,interview_id,remote_interview_id,author_id,remote_author_id,overall_recommendation,created_at,updated_at"
        - name: "filter"
          in: "query"
          description: "Filter parameters that allow greater customisation of the list response"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            properties:
              "updated_after":
                type: "string"
                additionalProperties: false
                description: "Use a string with a date to only select results updated after that given date"
                nullable: true
                example: "2020-01-01T00:00:00.000Z"
            nullable: true
        - name: "page"
          in: "query"
          description: "The page number of the results to fetch"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
        - name: "page_size"
          in: "query"
          description: "The number of results per page (default value is 25)"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "next"
          in: "query"
          description: "The unified cursor"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "updated_after"
          in: "query"
          description: "Use a string with a date to only select results updated after that given date"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
            example: "2020-01-01T00:00:00.000Z"
        - name: "sync_token"
          in: "query"
          description: "The sync token to select the only updated results"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
      responses:
        "200":
          description: "The scorecards related to the application with the given identifier were retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ScorecardsPaginated"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "ats"
      x-speakeasy-name-override: "list_application_scorecards"
      x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "next", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.next"}}
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/ats/applications/{id}/scorecards/{subResourceId}:
    get:
      tags:
        - "Applications"
      summary: "Get Application Scorecard"
      operationId: "ats_get_application_scorecard"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "subResourceId"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,sections,label,candidate_id,remote_candidate_id,application_id,remote_application_id,interview_id,remote_interview_id,author_id,remote_author_id,overall_recommendation,created_at,updated_at"
      responses:
        "200":
          description: "The scorecard related to the application with the given identifiers was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ScorecardsResult"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "ats"
      x-speakeasy-name-override: "get_application_scorecard"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/ats/applications/{id}/changes:
    get:
      tags:
        - "Applications"
        - "Application Changes"
      summary: "List Application Changes"
      operationId: "ats_list_application_changes"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "event_id,remote_event_id,created_at,effective_at,change_type,actor,new_values"
        - name: "page_size"
          in: "query"
          description: "The number of results per page (default value is 25)"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "next"
          in: "query"
          description: "The unified cursor"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "filter"
          in: "query"
          description: "Filter parameters for application changes (supports created_after and change_type)"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            properties:
              "created_after":
                type: "string"
                additionalProperties: false
                description: "Use a string with a date to only select results created after that given date"
                nullable: true
                example: "2020-01-01T00:00:00.000Z"
              "change_type":
                type: "string"
                enum:
                  - "application_status"
                  - "interview_stage"
                  - "rejected_reasons"
                  - "unmapped_value"
                description: "Filter by the type of change that occurred to the application"
                nullable: true
            nullable: true
      responses:
        "200":
          description: "The changes related to the application with the given identifier was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ApplicationChangesPaginated"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "ats"
      x-speakeasy-name-override: "list_application_changes"
      x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "next", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.next"}}
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/ats/applications/{id}/notes:
    get:
      tags:
        - "Applications"
        - "Notes"
      summary: "List Application Notes"
      operationId: "ats_list_application_notes"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,content,author_id,remote_author_id,visibility,created_at,updated_at,deleted_at"
        - name: "filter"
          in: "query"
          description: "Filter parameters that allow greater customisation of the list response"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            properties:
              "updated_after":
                type: "string"
                additionalProperties: false
                description: "Use a string with a date to only select results updated after that given date"
                nullable: true
                example: "2020-01-01T00:00:00.000Z"
            nullable: true
        - name: "page"
          in: "query"
          description: "The page number of the results to fetch"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
        - name: "page_size"
          in: "query"
          description: "The number of results per page (default value is 25)"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "next"
          in: "query"
          description: "The unified cursor"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "updated_after"
          in: "query"
          description: "Use a string with a date to only select results updated after that given date"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
            example: "2020-01-01T00:00:00.000Z"
        - name: "sync_token"
          in: "query"
          description: "The sync token to select the only updated results"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
      responses:
        "200":
          description: "The notes related to the application with the given identifier was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotesPaginated"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "ats"
      x-speakeasy-name-override: "list_application_notes"
      x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "next", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.next"}}
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
    post:
      tags:
        - "Applications"
        - "Notes"
      summary: "Create Application Note"
      operationId: "ats_create_application_note"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
      requestBody:
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/AtsCreateNotesRequestDto"}
        required: true
      responses:
        "201":
          description: "Record created successfully."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/CreateResult"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "ats"
      x-speakeasy-name-override: "create_application_note"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/ats/applications/{id}/notes/{subResourceId}:
    get:
      tags:
        - "Applications"
        - "Notes"
      summary: "Get Application Note"
      operationId: "ats_get_application_note"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "subResourceId"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,content,author_id,remote_author_id,visibility,created_at,updated_at,deleted_at"
      responses:
        "200":
          description: "The note with the given identifier related to the application with the given identifier was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NoteResult"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "ats"
      x-speakeasy-name-override: "get_application_note"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
    patch:
      tags:
        - "Applications"
        - "Notes"
      summary: "Update an Application Note"
      operationId: "ats_update_application_note"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "subResourceId"
          in: "path"
          required: true
          schema:
            type: "string"
      requestBody:
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/AtsUpdateNotesRequestDto"}
        required: true
      responses:
        "200":
          description: "Record updated successfully."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UpdateResult"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "ats"
      x-speakeasy-name-override: "update_application_note"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/ats/applications/{id}/scheduled_interviews:
    get:
      tags:
        - "Applications"
        - "Scheduled Interviews"
      summary: "List Applications scheduled interviews"
      operationId: "ats_list_applications_scheduled_interviews"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,application_id,remote_application_id,interview_stage_id,remote_interview_stage_id,interview_stage,status,interview_status,interviewer_ids,remote_interviewer_ids,interview_parts,interviewers,start_at,end_at,meeting_url,created_at,updated_at"
        - name: "filter"
          in: "query"
          description: "Filter parameters that allow greater customisation of the list response"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            properties:
              "updated_after":
                type: "string"
                additionalProperties: false
                description: "Use a string with a date to only select results updated after that given date"
                nullable: true
                example: "2020-01-01T00:00:00.000Z"
            nullable: true
        - name: "page"
          in: "query"
          description: "The page number of the results to fetch"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
        - name: "page_size"
          in: "query"
          description: "The number of results per page (default value is 25)"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "next"
          in: "query"
          description: "The unified cursor"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "updated_after"
          in: "query"
          description: "Use a string with a date to only select results updated after that given date"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
            example: "2020-01-01T00:00:00.000Z"
        - name: "sync_token"
          in: "query"
          description: "The sync token to select the only updated results"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
      responses:
        "200":
          description: "The list of applications scheduled interviews was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ScheduledInterviewsPaginated"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "ats"
      x-speakeasy-name-override: "list_applications_scheduled_interviews"
      x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "next", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.next"}}
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/ats/applications/{id}/scheduled_interviews/{subResourceId}:
    get:
      tags:
        - "Applications"
        - "Scheduled Interviews"
      summary: "Get Applications scheduled interview"
      operationId: "ats_get_application_scheduled_interview"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "subResourceId"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,candidate_id,remote_candidate_id,job_id,remote_job_id,job_posting_id,remote_job_posting_id,interview_stage,interview_stage_id,remote_interview_stage_id,rejected_reason,rejected_reason_id,remote_rejected_reason_id,rejected_reason_ids,remote_rejected_reason_ids,rejected_reasons,rejected_at,location_id,remote_location_id,location_ids,remote_location_ids,status,application_status,questionnaires,attachments,result_links,source,created_at,updated_at,documents,custom_fields,candidate"
      responses:
        "200":
          description: "The applications scheduled interview with the given identifier was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ScheduledInterviewsResult"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "ats"
      x-speakeasy-name-override: "get_application_scheduled_interview"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/ats/applications/{id}/documents/upload:
    post:
      tags:
        - "Applications"
        - "Documents"
      summary: "Upload Application Document"
      operationId: "ats_upload_application_document"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
      requestBody:
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/UnifiedUploadRequestDto"}
        required: true
      responses:
        "201":
          description: "The document related to the application with the given identifier was uploaded."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/WriteResultApiModel"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "ats"
      x-speakeasy-name-override: "upload_application_document"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/ats/applications/{id}/documents/{subResourceId}/download:
    get:
      tags:
        - "Applications"
        - "Documents"
      summary: "Download Application Document"
      operationId: "ats_download_application_document"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "subResourceId"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "format"
          in: "query"
          description: "The format to download the file in"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "base64"
        - name: "export_format"
          in: "query"
          description: "The export format of the file"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "text/plain"
      responses:
        "200":
          description: "The document related to the application with the given identifiers was retrieved."
          content:
            "application/octet-stream":
              schema:
                type: "string"
                format: "binary"
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "ats"
      x-speakeasy-name-override: "download_application_document"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/ats/applications/{id}/documents:
    get:
      tags:
        - "Applications"
        - "Documents"
      summary: "List Application Documents"
      operationId: "ats_list_application_documents"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,name,path,type,category,category_id,remote_category_id,contents,created_at,updated_at,remote_url,file_format"
        - name: "filter"
          in: "query"
          description: "ATS Document Filter"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            properties:
              "updated_after":
                type: "string"
                additionalProperties: false
                description: "Use a string with a date to only select results updated after that given date"
                nullable: true
                example: "2020-01-01T00:00:00.000Z"
              "type":
                type: "string"
                description: "Filter to select documents by type"
                nullable: true
            nullable: true
        - name: "page"
          in: "query"
          description: "The page number of the results to fetch"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
        - name: "page_size"
          in: "query"
          description: "The number of results per page (default value is 25)"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "next"
          in: "query"
          description: "The unified cursor"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "updated_after"
          in: "query"
          description: "Use a string with a date to only select results updated after that given date"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
            example: "2020-01-01T00:00:00.000Z"
        - name: "sync_token"
          in: "query"
          description: "The sync token to select the only updated results"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
      responses:
        "200":
          description: "The documents related to the application with the given identifier were retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/AtsDocumentsPaginated"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "ats"
      x-speakeasy-name-override: "list_application_documents"
      x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "next", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.next"}}
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/ats/applications/{id}/documents/{subResourceId}:
    get:
      tags:
        - "Applications"
        - "Documents"
      summary: "Get Application Document"
      operationId: "ats_get_application_document"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "subResourceId"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,name,path,type,category,category_id,remote_category_id,contents,created_at,updated_at,remote_url,file_format"
      responses:
        "200":
          description: "The document related to the application with the given identifiers was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/AtsDocumentResult"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "ats"
      x-speakeasy-name-override: "get_application_document"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/ats/candidates:
    get:
      tags:
        - "Candidates"
      summary: "List Candidates"
      operationId: "ats_list_candidates"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,name,first_name,last_name,email,emails,social_links,phone,phone_numbers,company,country,title,application_ids,remote_application_ids,hired_at,custom_fields,created_at,updated_at"
        - name: "filter"
          in: "query"
          description: "ATS Candidate Filter"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            properties:
              "updated_after":
                type: "string"
                additionalProperties: false
                description: "Use a string with a date to only select results updated after that given date"
                nullable: true
                example: "2020-01-01T00:00:00.000Z"
              "created_after":
                type: "string"
                additionalProperties: false
                description: "Use a string with a date to only select results created after that given date"
                nullable: true
                example: "2020-01-01T00:00:00.000Z"
              "email":
                type: "string"
                description: "Filter to select candidates by email"
                nullable: true
            nullable: true
        - name: "page"
          in: "query"
          description: "The page number of the results to fetch"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
        - name: "page_size"
          in: "query"
          description: "The number of results per page (default value is 25)"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "next"
          in: "query"
          description: "The unified cursor"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "updated_after"
          in: "query"
          description: "Use a string with a date to only select results updated after that given date"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
            example: "2020-01-01T00:00:00.000Z"
        - name: "sync_token"
          in: "query"
          description: "The sync token to select the only updated results"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
        - name: "include"
          in: "query"
          description: "The comma separated list of fields that will be included in the response"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "custom_fields"
      responses:
        "200":
          description: "The list of candidates was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/CandidatesPaginated"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "ats"
      x-speakeasy-name-override: "list_candidates"
      x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "next", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.next"}}
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
    post:
      tags:
        - "Candidates"
      summary: "Create Candidate"
      operationId: "ats_create_candidate"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
      requestBody:
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/AtsCreateCandidateRequestDto"}
        required: true
      responses:
        "201":
          description: "The candidate was successfully created."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/CreateResult"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "ats"
      x-speakeasy-name-override: "create_candidate"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/ats/candidates/{id}:
    get:
      tags:
        - "Candidates"
      summary: "Get Candidate"
      operationId: "ats_get_candidate"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,name,first_name,last_name,email,emails,social_links,phone,phone_numbers,company,country,title,application_ids,remote_application_ids,hired_at,custom_fields,created_at,updated_at"
        - name: "include"
          in: "query"
          description: "The comma separated list of fields that will be included in the response"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "custom_fields"
      responses:
        "200":
          description: "The candidate with the given identifier was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/CandidateResult"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "ats"
      x-speakeasy-name-override: "get_candidate"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
    patch:
      tags:
        - "Candidates"
      summary: "Update Candidate"
      operationId: "ats_update_candidate"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
      requestBody:
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/AtsUpdateCandidateRequestDto"}
        required: true
      responses:
        "200":
          description: "The candidate was successfully updated."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/CreateResult"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "ats"
      x-speakeasy-name-override: "update_candidate"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/ats/candidates/{id}/notes:
    get:
      tags:
        - "Candidates"
        - "Notes"
      summary: "List Candidate Notes"
      operationId: "ats_list_candidate_notes"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,content,author_id,remote_author_id,visibility,created_at,updated_at,deleted_at"
        - name: "filter"
          in: "query"
          description: "Filter parameters that allow greater customisation of the list response"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            properties:
              "updated_after":
                type: "string"
                additionalProperties: false
                description: "Use a string with a date to only select results updated after that given date"
                nullable: true
                example: "2020-01-01T00:00:00.000Z"
            nullable: true
        - name: "page"
          in: "query"
          description: "The page number of the results to fetch"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
        - name: "page_size"
          in: "query"
          description: "The number of results per page (default value is 25)"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "next"
          in: "query"
          description: "The unified cursor"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "updated_after"
          in: "query"
          description: "Use a string with a date to only select results updated after that given date"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
            example: "2020-01-01T00:00:00.000Z"
        - name: "sync_token"
          in: "query"
          description: "The sync token to select the only updated results"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
      responses:
        "200":
          description: "The notes related to the candidate with the given identifier was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotesPaginated"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "ats"
      x-speakeasy-name-override: "list_candidate_notes"
      x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "next", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.next"}}
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
    post:
      tags:
        - "Candidates"
        - "Notes"
      summary: "Create Candidate Note"
      operationId: "ats_create_candidate_note"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
      requestBody:
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/AtsCreateNotesRequestDto"}
        required: true
      responses:
        "201":
          description: "Record created successfully."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/CreateResult"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "ats"
      x-speakeasy-name-override: "create_candidate_note"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/ats/candidates/{id}/notes/{subResourceId}:
    get:
      tags:
        - "Candidates"
        - "Notes"
      summary: "Get Candidate Note"
      operationId: "ats_get_candidate_note"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "subResourceId"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,content,author_id,remote_author_id,visibility,created_at,updated_at,deleted_at"
      responses:
        "200":
          description: "The note with the given identifier related to the candidate with the given identifier was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NoteResult"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "ats"
      x-speakeasy-name-override: "get_candidate_note"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/ats/custom_field_definitions/applications:
    get:
      tags:
        - "Custom Field Definitions"
      summary: "List Application Custom Field Definitions"
      operationId: "ats_list_application_custom_field_definitions"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,name,description,type,options"
        - name: "filter"
          in: "query"
          description: "Filter parameters that allow greater customisation of the list response"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            properties:
              "updated_after":
                type: "string"
                additionalProperties: false
                description: "Use a string with a date to only select results updated after that given date"
                nullable: true
                example: "2020-01-01T00:00:00.000Z"
            nullable: true
        - name: "page"
          in: "query"
          description: "The page number of the results to fetch"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
        - name: "page_size"
          in: "query"
          description: "The number of results per page (default value is 25)"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "next"
          in: "query"
          description: "The unified cursor"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "updated_after"
          in: "query"
          description: "Use a string with a date to only select results updated after that given date"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
            example: "2020-01-01T00:00:00.000Z"
      responses:
        "200":
          description: "The list of application custom field definitions was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/CustomFieldDefinitionsPaginated"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "ats"
      x-speakeasy-name-override: "list_application_custom_field_definitions"
      x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "next", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.next"}}
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/ats/custom_field_definitions/applications/{id}:
    get:
      tags:
        - "Custom Field Definitions"
      summary: "Get Application Custom Field Definition"
      operationId: "ats_get_application_custom_field_definition"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,name,description,type,options"
        - name: "filter"
          in: "query"
          description: "Filter parameters that allow greater customisation of the list response"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            properties:
              "updated_after":
                type: "string"
                additionalProperties: false
                description: "Use a string with a date to only select results updated after that given date"
                nullable: true
                example: "2020-01-01T00:00:00.000Z"
            nullable: true
        - name: "page"
          in: "query"
          description: "The page number of the results to fetch"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
        - name: "page_size"
          in: "query"
          description: "The number of results per page (default value is 25)"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "next"
          in: "query"
          description: "The unified cursor"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "updated_after"
          in: "query"
          description: "Use a string with a date to only select results updated after that given date"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
            example: "2020-01-01T00:00:00.000Z"
      responses:
        "200":
          description: "The application custom field definition was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/CustomFieldDefinitionResultApiModel"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "ats"
      x-speakeasy-name-override: "get_application_custom_field_definition"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/ats/custom_field_definitions/candidates:
    get:
      tags:
        - "Custom Field Definitions"
      summary: "List Candidate Custom Field Definitions"
      operationId: "ats_list_candidate_custom_field_definitions"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,name,description,type,options"
        - name: "filter"
          in: "query"
          description: "Filter parameters that allow greater customisation of the list response"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            properties:
              "updated_after":
                type: "string"
                additionalProperties: false
                description: "Use a string with a date to only select results updated after that given date"
                nullable: true
                example: "2020-01-01T00:00:00.000Z"
            nullable: true
        - name: "page"
          in: "query"
          description: "The page number of the results to fetch"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
        - name: "page_size"
          in: "query"
          description: "The number of results per page (default value is 25)"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "next"
          in: "query"
          description: "The unified cursor"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "updated_after"
          in: "query"
          description: "Use a string with a date to only select results updated after that given date"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
            example: "2020-01-01T00:00:00.000Z"
      responses:
        "200":
          description: "The list of candidate custom field definitions was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/CustomFieldDefinitionsPaginated"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "ats"
      x-speakeasy-name-override: "list_candidate_custom_field_definitions"
      x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "next", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.next"}}
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/ats/custom_field_definitions/candidates/{id}:
    get:
      tags:
        - "Custom Field Definitions"
      summary: "Get Candidate Custom Field Definition"
      operationId: "ats_get_candidate_custom_field_definition"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,name,description,type,options"
        - name: "filter"
          in: "query"
          description: "Filter parameters that allow greater customisation of the list response"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            properties:
              "updated_after":
                type: "string"
                additionalProperties: false
                description: "Use a string with a date to only select results updated after that given date"
                nullable: true
                example: "2020-01-01T00:00:00.000Z"
            nullable: true
        - name: "page"
          in: "query"
          description: "The page number of the results to fetch"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
        - name: "page_size"
          in: "query"
          description: "The number of results per page (default value is 25)"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "next"
          in: "query"
          description: "The unified cursor"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "updated_after"
          in: "query"
          description: "Use a string with a date to only select results updated after that given date"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
            example: "2020-01-01T00:00:00.000Z"
      responses:
        "200":
          description: "The candidate custom field definition was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/CustomFieldDefinitionResultApiModel"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "ats"
      x-speakeasy-name-override: "get_candidate_custom_field_definition"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/ats/custom_field_definitions/jobs:
    get:
      tags:
        - "Custom Field Definitions"
      summary: "List Job Custom Field Definitions"
      operationId: "ats_list_job_custom_field_definitions"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,name,description,type,options"
        - name: "filter"
          in: "query"
          description: "Filter parameters that allow greater customisation of the list response"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            properties:
              "updated_after":
                type: "string"
                additionalProperties: false
                description: "Use a string with a date to only select results updated after that given date"
                nullable: true
                example: "2020-01-01T00:00:00.000Z"
            nullable: true
        - name: "page"
          in: "query"
          description: "The page number of the results to fetch"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
        - name: "page_size"
          in: "query"
          description: "The number of results per page (default value is 25)"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "next"
          in: "query"
          description: "The unified cursor"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "updated_after"
          in: "query"
          description: "Use a string with a date to only select results updated after that given date"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
            example: "2020-01-01T00:00:00.000Z"
      responses:
        "200":
          description: "The list of job custom field definitions was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/CustomFieldDefinitionsPaginated"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "ats"
      x-speakeasy-name-override: "list_job_custom_field_definitions"
      x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "next", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.next"}}
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/ats/custom_field_definitions/jobs/{id}:
    get:
      tags:
        - "Custom Field Definitions"
      summary: "Get Job Custom Field Definition"
      operationId: "ats_get_job_custom_field_definition"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,name,description,type,options"
        - name: "filter"
          in: "query"
          description: "Filter parameters that allow greater customisation of the list response"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            properties:
              "updated_after":
                type: "string"
                additionalProperties: false
                description: "Use a string with a date to only select results updated after that given date"
                nullable: true
                example: "2020-01-01T00:00:00.000Z"
            nullable: true
        - name: "page"
          in: "query"
          description: "The page number of the results to fetch"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
        - name: "page_size"
          in: "query"
          description: "The number of results per page (default value is 25)"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "next"
          in: "query"
          description: "The unified cursor"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "updated_after"
          in: "query"
          description: "Use a string with a date to only select results updated after that given date"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
            example: "2020-01-01T00:00:00.000Z"
      responses:
        "200":
          description: "The job custom field definition was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/CustomFieldDefinitionResultApiModel"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "ats"
      x-speakeasy-name-override: "get_job_custom_field_definition"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/ats/departments:
    get:
      tags:
        - "Departments"
      summary: "List Departments"
      operationId: "ats_list_departments"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,name"
        - name: "filter"
          in: "query"
          description: "Filter parameters that allow greater customisation of the list response"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            properties:
              "updated_after":
                type: "string"
                additionalProperties: false
                description: "Use a string with a date to only select results updated after that given date"
                nullable: true
                example: "2020-01-01T00:00:00.000Z"
            nullable: true
        - name: "page"
          in: "query"
          description: "The page number of the results to fetch"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
        - name: "page_size"
          in: "query"
          description: "The number of results per page (default value is 25)"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "next"
          in: "query"
          description: "The unified cursor"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "updated_after"
          in: "query"
          description: "Use a string with a date to only select results updated after that given date"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
            example: "2020-01-01T00:00:00.000Z"
        - name: "sync_token"
          in: "query"
          description: "The sync token to select the only updated results"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
      responses:
        "200":
          description: "The list of departments was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/DepartmentsPaginated"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "ats"
      x-speakeasy-name-override: "list_departments"
      x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "next", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.next"}}
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/ats/departments/{id}:
    get:
      tags:
        - "Departments"
      summary: "Get Department"
      operationId: "ats_get_department"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,name"
      responses:
        "200":
          description: "The department with the given identifier was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/DepartmentResult"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "ats"
      x-speakeasy-name-override: "get_department"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/ats/interview_stages:
    get:
      tags:
        - "Interview Stages"
      summary: "List Interview Stages"
      operationId: "ats_list_interview_stages"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,name,order,created_at,updated_at"
        - name: "filter"
          in: "query"
          description: "Filter parameters that allow greater customisation of the list response"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            properties:
              "updated_after":
                type: "string"
                additionalProperties: false
                description: "Use a string with a date to only select results updated after that given date"
                nullable: true
                example: "2020-01-01T00:00:00.000Z"
            nullable: true
        - name: "page"
          in: "query"
          description: "The page number of the results to fetch"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
        - name: "page_size"
          in: "query"
          description: "The number of results per page (default value is 25)"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "next"
          in: "query"
          description: "The unified cursor"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "updated_after"
          in: "query"
          description: "Use a string with a date to only select results updated after that given date"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
            example: "2020-01-01T00:00:00.000Z"
        - name: "sync_token"
          in: "query"
          description: "The sync token to select the only updated results"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
      responses:
        "200":
          description: "The list of interview-stages was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InterviewStagesPaginated"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "ats"
      x-speakeasy-name-override: "list_interview_stages"
      x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "next", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.next"}}
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/ats/interview_stages/{id}:
    get:
      tags:
        - "Interview Stages"
      summary: "Get Interview Stage"
      operationId: "ats_get_interview_stage"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,name,order,created_at,updated_at"
      responses:
        "200":
          description: "The interview-stage with the given identifier was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InterviewStageResult"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "ats"
      x-speakeasy-name-override: "get_interview_stage"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/ats/interviews:
    get:
      tags:
        - "Interviews"
      summary: "List Interviews"
      operationId: "ats_list_interviews"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,application_id,remote_application_id,interview_stage_id,remote_interview_stage_id,interview_stage,status,interview_status,interviewer_ids,remote_interviewer_ids,interview_parts,interviewers,start_at,end_at,meeting_url,created_at,updated_at"
        - name: "filter"
          in: "query"
          description: "ATS Interviews Filter"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            properties:
              "updated_after":
                type: "string"
                additionalProperties: false
                description: "Use a string with a date to only select results updated after that given date"
                nullable: true
                example: "2020-01-01T00:00:00.000Z"
              "created_after":
                type: "string"
                additionalProperties: false
                description: "Use a string with a date to only select results created after that given date"
                nullable: true
                example: "2020-01-01T00:00:00.000Z"
            nullable: true
        - name: "page"
          in: "query"
          description: "The page number of the results to fetch"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
        - name: "page_size"
          in: "query"
          description: "The number of results per page (default value is 25)"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "next"
          in: "query"
          description: "The unified cursor"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "updated_after"
          in: "query"
          description: "Use a string with a date to only select results updated after that given date"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
            example: "2020-01-01T00:00:00.000Z"
        - name: "sync_token"
          in: "query"
          description: "The sync token to select the only updated results"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
      responses:
        "200":
          description: "The list of interviews was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InterviewsPaginated"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "ats"
      x-speakeasy-name-override: "list_interviews"
      x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "next", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.next"}}
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/ats/interviews/{id}:
    get:
      tags:
        - "Interviews"
      summary: "Get Interview"
      operationId: "ats_get_interview"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,application_id,remote_application_id,interview_stage_id,remote_interview_stage_id,interview_stage,status,interview_status,interviewer_ids,remote_interviewer_ids,interview_parts,interviewers,start_at,end_at,meeting_url,created_at,updated_at"
      responses:
        "200":
          description: "The interview with the given identifier was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InterviewsResult"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "ats"
      x-speakeasy-name-override: "get_interview"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/ats/jobs:
    get:
      tags:
        - "Jobs"
      summary: "List Jobs"
      operationId: "ats_list_jobs"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,code,title,description,status,job_status,department_ids,remote_department_ids,location_ids,remote_location_ids,hiring_team,interview_stages,confidential,custom_fields,created_at,updated_at"
        - name: "filter"
          in: "query"
          description: "ATS Jobs filters"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            properties:
              "updated_after":
                type: "string"
                additionalProperties: false
                description: "Use a string with a date to only select results updated after that given date"
                nullable: true
                example: "2020-01-01T00:00:00.000Z"
              "created_after":
                type: "string"
                additionalProperties: false
                description: "Use a string with a date to only select results created after that given date"
                nullable: true
                example: "2020-01-01T00:00:00.000Z"
              "status":
                type: "string"
                enum:
                  - "open"
                  - "draft"
                  - null
                description: "The status of the job"
                nullable: true
                deprecated: true
              "job_status":
                type: "string"
                enum:
                  - "open"
                  - "draft"
                  - null
                description: "The job_status of the job"
                nullable: true
            nullable: true
        - name: "page"
          in: "query"
          description: "The page number of the results to fetch"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
        - name: "page_size"
          in: "query"
          description: "The number of results per page (default value is 25)"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "next"
          in: "query"
          description: "The unified cursor"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "updated_after"
          in: "query"
          description: "Use a string with a date to only select results updated after that given date"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
            example: "2020-01-01T00:00:00.000Z"
        - name: "sync_token"
          in: "query"
          description: "The sync token to select the only updated results"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
        - name: "expand"
          in: "query"
          description: "The comma separated list of fields that will be expanded in the response"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "job_postings,interview_stages"
        - name: "include"
          in: "query"
          description: "The comma separated list of fields that will be included in the response"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "custom_fields"
      responses:
        "200":
          description: "The list of jobs was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/JobsPaginated"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "ats"
      x-speakeasy-name-override: "list_jobs"
      x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "next", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.next"}}
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
    post:
      tags:
        - "Jobs"
      summary: "Create Job"
      operationId: "ats_create_job"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
      requestBody:
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/AtsCreateJobRequestDto"}
        required: true
      responses:
        "201":
          description: "The job was successfully created."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/CreateResult"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "ats"
      x-speakeasy-name-override: "create_job"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/ats/jobs/{id}:
    get:
      tags:
        - "Jobs"
      summary: "Get Job"
      operationId: "ats_get_job"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,code,title,description,status,job_status,department_ids,remote_department_ids,location_ids,remote_location_ids,hiring_team,interview_stages,confidential,custom_fields,created_at,updated_at"
        - name: "expand"
          in: "query"
          description: "The comma separated list of fields that will be expanded in the response"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "job_postings,interview_stages"
        - name: "include"
          in: "query"
          description: "The comma separated list of fields that will be included in the response"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "custom_fields"
      responses:
        "200":
          description: "The job with the given identifier was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/JobResult"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "ats"
      x-speakeasy-name-override: "get_job"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
    patch:
      tags:
        - "Jobs"
      summary: "Update Job"
      operationId: "ats_update_job"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
      requestBody:
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/AtsUpdateJobRequestDto"}
        required: true
      responses:
        "200":
          description: "The job was successfully updated."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/CreateResult"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "ats"
      x-speakeasy-name-override: "update_job"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/ats/lists:
    get:
      tags:
        - "Lists"
      summary: "Get all Lists"
      operationId: "ats_list_lists"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,name,created_at,updated_at,items,type"
        - name: "filter"
          in: "query"
          description: "Filter parameters that allow greater customisation of the list response"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            properties:
              "updated_after":
                type: "string"
                additionalProperties: false
                description: "Use a string with a date to only select results updated after that given date"
                nullable: true
                example: "2020-01-01T00:00:00.000Z"
            nullable: true
        - name: "page"
          in: "query"
          description: "The page number of the results to fetch"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
        - name: "page_size"
          in: "query"
          description: "The number of results per page (default value is 25)"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "next"
          in: "query"
          description: "The unified cursor"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "updated_after"
          in: "query"
          description: "Use a string with a date to only select results updated after that given date"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
            example: "2020-01-01T00:00:00.000Z"
      responses:
        "200":
          description: "The collection of lists was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ListsPaginated"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "ats"
      x-speakeasy-name-override: "list_lists"
      x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "next", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.next"}}
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/ats/lists/{id}:
    get:
      tags:
        - "Lists"
      summary: "Get List"
      operationId: "ats_get_list"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,name,created_at,updated_at,items,type"
      responses:
        "200":
          description: "The list with the given identifier was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ListResult"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "ats"
      x-speakeasy-name-override: "get_list"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/ats/locations:
    get:
      tags:
        - "Locations"
      summary: "List locations"
      operationId: "ats_list_locations"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,name"
        - name: "filter"
          in: "query"
          description: "Filter parameters that allow greater customisation of the list response"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            properties:
              "updated_after":
                type: "string"
                additionalProperties: false
                description: "Use a string with a date to only select results updated after that given date"
                nullable: true
                example: "2020-01-01T00:00:00.000Z"
            nullable: true
        - name: "page"
          in: "query"
          description: "The page number of the results to fetch"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
        - name: "page_size"
          in: "query"
          description: "The number of results per page (default value is 25)"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "next"
          in: "query"
          description: "The unified cursor"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "updated_after"
          in: "query"
          description: "Use a string with a date to only select results updated after that given date"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
            example: "2020-01-01T00:00:00.000Z"
        - name: "sync_token"
          in: "query"
          description: "The sync token to select the only updated results"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
      responses:
        "200":
          description: "The list of locations was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ATSLocationsPaginated"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "ats"
      x-speakeasy-name-override: "list_locations"
      x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "next", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.next"}}
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/ats/locations/{id}:
    get:
      tags:
        - "Locations"
      summary: "Get Location"
      operationId: "ats_get_location"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,name"
      responses:
        "200":
          description: "The location with the given identifier was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ATSLocationResult"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "ats"
      x-speakeasy-name-override: "get_location"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/ats/rejected_reasons:
    get:
      tags:
        - "Rejected Reasons"
      summary: "List Rejected Reasons"
      operationId: "ats_list_rejected_reasons"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,label,type,rejected_reason_type"
        - name: "filter"
          in: "query"
          description: "Filter parameters that allow greater customisation of the list response"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            properties:
              "updated_after":
                type: "string"
                additionalProperties: false
                description: "Use a string with a date to only select results updated after that given date"
                nullable: true
                example: "2020-01-01T00:00:00.000Z"
            nullable: true
        - name: "page"
          in: "query"
          description: "The page number of the results to fetch"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
        - name: "page_size"
          in: "query"
          description: "The number of results per page (default value is 25)"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "next"
          in: "query"
          description: "The unified cursor"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "updated_after"
          in: "query"
          description: "Use a string with a date to only select results updated after that given date"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
            example: "2020-01-01T00:00:00.000Z"
        - name: "sync_token"
          in: "query"
          description: "The sync token to select the only updated results"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
      responses:
        "200":
          description: "The list of rejected reasons was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RejectedReasonsPaginated"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "ats"
      x-speakeasy-name-override: "list_rejected_reasons"
      x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "next", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.next"}}
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/ats/rejected_reasons/{id}:
    get:
      tags:
        - "Rejected Reasons"
      summary: "Get Rejected Reason"
      operationId: "ats_get_rejected_reason"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,label,type,rejected_reason_type"
      responses:
        "200":
          description: "The rejected reason with the given identifier was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RejectedReasonResult"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "ats"
      x-speakeasy-name-override: "get_rejected_reason"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/ats/users:
    get:
      tags:
        - "Users"
      summary: "List Users"
      operationId: "ats_list_users"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,first_name,last_name,name,email,phone"
        - name: "filter"
          in: "query"
          description: "Filter parameters that allow greater customisation of the list response"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            properties:
              "updated_after":
                type: "string"
                additionalProperties: false
                description: "Use a string with a date to only select results updated after that given date"
                nullable: true
                example: "2020-01-01T00:00:00.000Z"
            nullable: true
        - name: "page"
          in: "query"
          description: "The page number of the results to fetch"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
        - name: "page_size"
          in: "query"
          description: "The number of results per page (default value is 25)"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "next"
          in: "query"
          description: "The unified cursor"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "updated_after"
          in: "query"
          description: "Use a string with a date to only select results updated after that given date"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
            example: "2020-01-01T00:00:00.000Z"
        - name: "sync_token"
          in: "query"
          description: "The sync token to select the only updated results"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
      responses:
        "200":
          description: "The list of users was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UsersPaginated"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "ats"
      x-speakeasy-name-override: "list_users"
      x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "next", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.next"}}
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/ats/users/{id}:
    get:
      tags:
        - "Users"
      summary: "Get User"
      operationId: "ats_get_user"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,first_name,last_name,name,email,phone"
      responses:
        "200":
          description: "The user with the given identifier was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UserResult"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "ats"
      x-speakeasy-name-override: "get_user"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/ats/job_postings:
    get:
      tags:
        - "Job Postings"
      summary: "List Job Postings"
      operationId: "ats_list_job_postings"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,title,locations,internal,status,job_id,remote_job_id,content,compensation,employment_type,employment_contract_type,external_url,external_apply_url,questionnaires,start_date,updated_at,created_at"
        - name: "filter"
          in: "query"
          description: "ATS Job Postings Filter"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            properties:
              "updated_after":
                type: "string"
                additionalProperties: false
                description: "Use a string with a date to only select results updated after that given date"
                nullable: true
                example: "2020-01-01T00:00:00.000Z"
              "created_after":
                type: "string"
                additionalProperties: false
                description: "Use a string with a date to only select results created after that given date"
                nullable: true
                example: "2020-01-01T00:00:00.000Z"
            nullable: true
        - name: "page"
          in: "query"
          description: "The page number of the results to fetch"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
        - name: "page_size"
          in: "query"
          description: "The number of results per page (default value is 25)"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "next"
          in: "query"
          description: "The unified cursor"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "updated_after"
          in: "query"
          description: "Use a string with a date to only select results updated after that given date"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
            example: "2020-01-01T00:00:00.000Z"
        - name: "sync_token"
          in: "query"
          description: "The sync token to select the only updated results"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
        - name: "include"
          in: "query"
          description: "The comma separated list of fields that will be included in the response"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "questionnaires"
      responses:
        "200":
          description: "The list of job postings was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/JobPostingsPaginated"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "ats"
      x-speakeasy-name-override: "list_job_postings"
      x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "next", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.next"}}
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/ats/job_postings/{id}:
    get:
      tags:
        - "Job Postings"
      summary: "Get Job Posting"
      operationId: "ats_get_job_posting"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,title,locations,internal,status,job_id,remote_job_id,content,compensation,employment_type,employment_contract_type,external_url,external_apply_url,questionnaires,start_date,updated_at,created_at"
        - name: "include"
          in: "query"
          description: "The comma separated list of fields that will be included in the response"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "questionnaires"
      responses:
        "200":
          description: "The job with the given identifier was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/JobPostingResult"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "ats"
      x-speakeasy-name-override: "get_job_posting"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/ats/offers:
    get:
      tags:
        - "Offers"
      summary: "List Offers"
      operationId: "ats_list_offers"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,application_id,remote_application_id,start_date,status,offer_status,salary,currency,created_at,updated_at,offer_history"
        - name: "filter"
          in: "query"
          description: "Filter parameters that allow greater customisation of the list response"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            properties:
              "updated_after":
                type: "string"
                additionalProperties: false
                description: "Use a string with a date to only select results updated after that given date"
                nullable: true
                example: "2020-01-01T00:00:00.000Z"
            nullable: true
        - name: "page"
          in: "query"
          description: "The page number of the results to fetch"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
        - name: "page_size"
          in: "query"
          description: "The number of results per page (default value is 25)"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "next"
          in: "query"
          description: "The unified cursor"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "updated_after"
          in: "query"
          description: "Use a string with a date to only select results updated after that given date"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
            example: "2020-01-01T00:00:00.000Z"
        - name: "sync_token"
          in: "query"
          description: "The sync token to select the only updated results"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
      responses:
        "200":
          description: "The list of offers was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/OffersPaginated"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "ats"
      x-speakeasy-name-override: "list_offers"
      x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "next", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.next"}}
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
    post:
      tags:
        - "Offers"
      summary: "Creates an offer"
      operationId: "ats_create_offer"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
      requestBody:
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/AtsCreateOfferRequestDto"}
        required: true
      responses:
        "200":
          description: "The offer was created successfully."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/CreateResult"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "ats"
      x-speakeasy-name-override: "create_offer"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/ats/offers/{id}:
    get:
      tags:
        - "Offers"
      summary: "Get Offer"
      operationId: "ats_get_offer"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,application_id,remote_application_id,start_date,status,offer_status,salary,currency,created_at,updated_at,offer_history"
      responses:
        "200":
          description: "The offer with the given identifier was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/OffersResult"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "ats"
      x-speakeasy-name-override: "get_offer"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/ats/assessments/packages:
    get:
      tags:
        - "Assessments"
        - "Packages"
      summary: "List Assessments Packages"
      operationId: "ats_list_assessments_packages"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields to return in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "filter"
          in: "query"
          description: "Filter parameters that allow greater customisation of the list response"
          required: false
          schema:
            type: "object"
            properties:
              "updated_after":
                type: "string"
                additionalProperties: false
                description: "Use a string with a date to only select results updated after that given date"
                nullable: true
                example: "2020-01-01T00:00:00.000Z"
            nullable: true
        - name: "page"
          in: "query"
          description: "The page number of the results to fetch"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
        - name: "page_size"
          in: "query"
          description: "The number of results per page (default value is 25)"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "next"
          in: "query"
          description: "The unified cursor"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "updated_after"
          in: "query"
          description: "Use a string with a date to only select results updated after that given date"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
            example: "2020-01-01T00:00:00.000Z"
      responses:
        "200":
          description: "The list of assessments packages was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/AssessmentPackagePaginated"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "ats"
      x-speakeasy-name-override: "list_assessments_packages"
      x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "next", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.next"}}
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/ats/assessments/packages/{id}:
    get:
      tags:
        - "Assessments"
        - "Packages"
      summary: "Get Assessments Package"
      operationId: "ats_get_assessments_package"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields to return in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
      responses:
        "200":
          description: "The assessments package with the given identifier was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/AssessmentPackageResult"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "ats"
      x-speakeasy-name-override: "get_assessments_package"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/ats/assessments/orders:
    post:
      tags:
        - "Assessments"
        - "Orders"
      summary: "Order Assessments Request"
      operationId: "ats_order_assessments_request"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
      requestBody:
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/AtsCreateCandidatesAssessmentsRequestDto"}
        required: true
      responses:
        "200":
          description: "The order request of the assessment for candidate."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/CreateAssessmentOrderResult"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "ats"
      x-speakeasy-name-override: "order_assessments_request"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/ats/assessments/orders/{id}/result:
    patch:
      tags:
        - "Assessments"
        - "Results"
      summary: "Update Assessments Result"
      operationId: "ats_update_assessments_result"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
      requestBody:
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/AtsUpdateCandidatesAssessmentsResultsRequestDto"}
        required: true
      responses:
        "200":
          description: "The result update of the assessment for candidate."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UpdateResult"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "ats"
      x-speakeasy-name-override: "update_assessments_result"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/ats/assessments/orders/{id}/results:
    get:
      tags:
        - "Assessments"
        - "Results"
      summary: "Get Assessments Results"
      operationId: "ats_get_assessments_result"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,candidate,score,start_date,submission_date,summary,result,result_url,attachments"
      responses:
        "200":
          description: "The assessments result with the given identifier was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/AssessmentResultsResult"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "ats"
      x-speakeasy-name-override: "get_assessments_result"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/ats/background_checks/packages:
    get:
      tags:
        - "Background Checks"
        - "Packages"
      summary: "List Background Check Packages"
      operationId: "ats_list_background_check_packages"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,name,description,tests"
        - name: "filter"
          in: "query"
          description: "Filter parameters that allow greater customisation of the list response"
          required: false
          schema:
            type: "object"
            properties:
              "updated_after":
                type: "string"
                additionalProperties: false
                description: "Use a string with a date to only select results updated after that given date"
                nullable: true
                example: "2020-01-01T00:00:00.000Z"
            nullable: true
        - name: "page"
          in: "query"
          description: "The page number of the results to fetch"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
        - name: "page_size"
          in: "query"
          description: "The number of results per page (default value is 25)"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "next"
          in: "query"
          description: "The unified cursor"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "updated_after"
          in: "query"
          description: "Use a string with a date to only select results updated after that given date"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
            example: "2020-01-01T00:00:00.000Z"
      responses:
        "200":
          description: "The list of background check packages was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BackgroundCheckPackagePaginated"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "ats"
      x-speakeasy-name-override: "list_background_check_packages"
      x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "next", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.next"}}
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
    post:
      tags:
        - "Background Checks"
        - "Packages"
      summary: "Create Background Check Package"
      operationId: "ats_create_background_check_package"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
      requestBody:
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/AtsCreateBackgroundCheckPackagesRequestDto"}
        required: true
      responses:
        "201":
          description: "Record created successfully."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/CreateResult"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "ats"
      x-speakeasy-name-override: "create_background_check_package"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/ats/background_checks/packages/{id}:
    get:
      tags:
        - "Background Checks"
        - "Packages"
      summary: "Get Background Check Package"
      operationId: "ats_get_background_check_package"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,name,description,tests"
      responses:
        "200":
          description: "The background check package with the given identifier was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BackgroundCheckPackageResult"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "ats"
      x-speakeasy-name-override: "get_background_check_package"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
    delete:
      tags:
        - "Background Checks"
        - "Packages"
      summary: "Delete Background Check Package"
      operationId: "ats_delete_background_check_package"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "Record deleted successfully."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/DeleteResult"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "ats"
      x-speakeasy-name-override: "delete_background_check_package"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
    patch:
      tags:
        - "Background Checks"
        - "Packages"
      summary: "Update Background Check Package"
      operationId: "ats_update_background_check_package"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
      requestBody:
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/AtsUpdateBackgroundCheckPackagesRequestDto"}
        required: true
      responses:
        "200":
          description: "Record updated successfully."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UpdateResult"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "ats"
      x-speakeasy-name-override: "update_background_check_package"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/ats/background_checks/orders:
    post:
      tags:
        - "Background Checks"
        - "Orders"
      summary: "Order Background Check Request"
      operationId: "ats_order_background_check_request"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
      requestBody:
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/AtsCreateBackgroundCheckOrderRequestDto"}
        required: true
      responses:
        "200":
          description: "The order request of the background check for candidate."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/CreateBackgroundCheckOrderResult"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "ats"
      x-speakeasy-name-override: "order_background_check_request"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/ats/background_checks/orders/{id}/result:
    patch:
      tags:
        - "Background Checks"
        - "Results"
      summary: "Update Background Check Result"
      operationId: "ats_update_background_check_result"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
      requestBody:
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/AtsUpdateBackgroundCheckResultRequestDto"}
        required: true
      responses:
        "200":
          description: "The result update of the background check for candidate."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UpdateResult"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "ats"
      x-speakeasy-name-override: "update_background_check_result"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/ats/background_checks/orders/{id}/results:
    get:
      tags:
        - "Background Checks"
        - "Results"
      summary: "Get Background Check Results"
      operationId: "ats_get_background_check_result"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,candidate,score,start_date,submission_date,summary,result,result_url,attachments"
      responses:
        "200":
          description: "The background check result with the given identifier was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BackgroundCheckResultsResult"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "ats"
      x-speakeasy-name-override: "get_background_check_result"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/ats/documents/application_categories:
    get:
      tags:
        - "Documents"
      summary: "List Application Document Categories"
      operationId: "ats_list_application_document_categories"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,name,active"
        - name: "filter"
          in: "query"
          description: "Filter parameters that allow greater customisation of the list response"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            properties:
              "updated_after":
                type: "string"
                additionalProperties: false
                description: "Use a string with a date to only select results updated after that given date"
                nullable: true
                example: "2020-01-01T00:00:00.000Z"
            nullable: true
        - name: "page"
          in: "query"
          description: "The page number of the results to fetch"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
        - name: "page_size"
          in: "query"
          description: "The number of results per page (default value is 25)"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "next"
          in: "query"
          description: "The unified cursor"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "updated_after"
          in: "query"
          description: "Use a string with a date to only select results updated after that given date"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
            example: "2020-01-01T00:00:00.000Z"
      responses:
        "200":
          description: "The list of application document categories were retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ReferencePaginated"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "ats"
      x-speakeasy-name-override: "list_application_document_categories"
      x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "next", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.next"}}
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/ats/documents/application_categories/{id}:
    get:
      tags:
        - "Documents"
      summary: "Get Application Document Category"
      operationId: "ats_get_application_document_category"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,name,active"
      responses:
        "200":
          description: "The application document category with the given identifier was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ReferenceResult"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "ats"
      x-speakeasy-name-override: "get_application_document_category"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/crm/contacts:
    get:
      tags:
        - "Contacts"
      summary: "List Contacts"
      operationId: "crm_list_contacts"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,first_name,last_name,company_name,emails,phone_numbers,deal_ids,remote_deal_ids,account_ids,remote_account_ids,custom_fields,created_at,updated_at"
        - name: "filter"
          in: "query"
          description: "Filter parameters that allow greater customisation of the list response"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            properties:
              "updated_after":
                type: "string"
                additionalProperties: false
                description: "Use a string with a date to only select results updated after that given date"
                nullable: true
                example: "2020-01-01T00:00:00.000Z"
            nullable: true
        - name: "page"
          in: "query"
          description: "The page number of the results to fetch"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
        - name: "page_size"
          in: "query"
          description: "The number of results per page (default value is 25)"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "next"
          in: "query"
          description: "The unified cursor"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "updated_after"
          in: "query"
          description: "Use a string with a date to only select results updated after that given date"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
            example: "2020-01-01T00:00:00.000Z"
        - name: "include"
          in: "query"
          description: "The comma separated list of fields that will be included in the response"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "custom_fields"
      responses:
        "200":
          description: "The list of contacts was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ContactsPaginated"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "crm"
      x-speakeasy-name-override: "list_contacts"
      x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "next", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.next"}}
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
    post:
      tags:
        - "Contacts"
      summary: "Creates a new Contact"
      operationId: "crm_create_contact"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
      requestBody:
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/CrmCreateContactRequestDto"}
        required: true
      responses:
        "200":
          description: "The contact was successfully created."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ContactResult"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "crm"
      x-speakeasy-name-override: "create_contact"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/crm/contacts/{id}:
    get:
      tags:
        - "Contacts"
      summary: "Get Contact"
      operationId: "crm_get_contact"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,first_name,last_name,company_name,emails,phone_numbers,deal_ids,remote_deal_ids,account_ids,remote_account_ids,custom_fields,created_at,updated_at"
        - name: "include"
          in: "query"
          description: "The comma separated list of fields that will be included in the response"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "custom_fields"
      responses:
        "200":
          description: "The contact with the given identifier was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ContactResult"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "crm"
      x-speakeasy-name-override: "get_contact"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
    patch:
      tags:
        - "Contacts"
      summary: "Update Contact (early access)"
      operationId: "crm_update_contact"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
      requestBody:
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/CrmCreateContactRequestDto"}
        required: true
      responses:
        "200":
          description: "The contact was successfully updated."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ContactResult"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "crm"
      x-speakeasy-name-override: "update_contact"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/crm/accounts:
    get:
      tags:
        - "Accounts"
      summary: "List Accounts"
      operationId: "crm_list_accounts"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,owner_id,remote_owner_id,name,description,industries,annual_revenue,website,addresses,phone_numbers,created_at,updated_at"
        - name: "filter"
          in: "query"
          description: "Filter parameters that allow greater customisation of the list response"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            properties:
              "updated_after":
                type: "string"
                additionalProperties: false
                description: "Use a string with a date to only select results updated after that given date"
                nullable: true
                example: "2020-01-01T00:00:00.000Z"
            nullable: true
        - name: "page"
          in: "query"
          description: "The page number of the results to fetch"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
        - name: "page_size"
          in: "query"
          description: "The number of results per page (default value is 25)"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "next"
          in: "query"
          description: "The unified cursor"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "updated_after"
          in: "query"
          description: "Use a string with a date to only select results updated after that given date"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
            example: "2020-01-01T00:00:00.000Z"
      responses:
        "200":
          description: "The list of accounts was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/AccountsPaginated"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "crm"
      x-speakeasy-name-override: "list_accounts"
      x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "next", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.next"}}
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/crm/accounts/{id}:
    get:
      tags:
        - "Accounts"
      summary: "Get Account"
      operationId: "crm_get_account"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,owner_id,remote_owner_id,name,description,industries,annual_revenue,website,addresses,phone_numbers,created_at,updated_at"
      responses:
        "200":
          description: "The account with the given identifier was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/AccountResult"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "crm"
      x-speakeasy-name-override: "get_account"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/crm/lists:
    get:
      tags:
        - "Lists"
      summary: "Get all Lists"
      operationId: "crm_list_lists"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,name,created_at,updated_at,items,type"
        - name: "filter"
          in: "query"
          description: "Filter parameters that allow greater customisation of the list response"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            properties:
              "updated_after":
                type: "string"
                additionalProperties: false
                description: "Use a string with a date to only select results updated after that given date"
                nullable: true
                example: "2020-01-01T00:00:00.000Z"
            nullable: true
        - name: "page"
          in: "query"
          description: "The page number of the results to fetch"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
        - name: "page_size"
          in: "query"
          description: "The number of results per page (default value is 25)"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "next"
          in: "query"
          description: "The unified cursor"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "updated_after"
          in: "query"
          description: "Use a string with a date to only select results updated after that given date"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
            example: "2020-01-01T00:00:00.000Z"
      responses:
        "200":
          description: "The collection of lists was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ListsPaginated"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "crm"
      x-speakeasy-name-override: "list_lists"
      x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "next", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.next"}}
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/crm/lists/{id}:
    get:
      tags:
        - "Lists"
      summary: "Get List"
      operationId: "crm_get_list"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,name,created_at,updated_at,items,type"
      responses:
        "200":
          description: "The list with the given identifier was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ListResult"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "crm"
      x-speakeasy-name-override: "get_list"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/crm/custom_field_definitions/contacts:
    get:
      tags:
        - "Custom Field Definitions"
      summary: "List Contact Custom Field Definitions"
      operationId: "crm_list_contact_custom_field_definitions"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,name,description,type,options"
        - name: "filter"
          in: "query"
          description: "Filter parameters that allow greater customisation of the list response"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            properties:
              "updated_after":
                type: "string"
                additionalProperties: false
                description: "Use a string with a date to only select results updated after that given date"
                nullable: true
                example: "2020-01-01T00:00:00.000Z"
            nullable: true
        - name: "page"
          in: "query"
          description: "The page number of the results to fetch"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
        - name: "page_size"
          in: "query"
          description: "The number of results per page (default value is 25)"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "next"
          in: "query"
          description: "The unified cursor"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "updated_after"
          in: "query"
          description: "Use a string with a date to only select results updated after that given date"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
            example: "2020-01-01T00:00:00.000Z"
      responses:
        "200":
          description: "The list of contacts custom field definitions was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/CustomFieldDefinitionsPaginated"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "crm"
      x-speakeasy-name-override: "list_contact_custom_field_definitions"
      x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "next", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.next"}}
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/crm/custom_field_definitions/contacts/{id}:
    get:
      tags:
        - "Custom Field Definitions"
      summary: "Get Contact Custom Field Definition"
      operationId: "crm_get_contact_custom_field_definition"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,name,description,type,options"
        - name: "filter"
          in: "query"
          description: "Filter parameters that allow greater customisation of the list response"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            properties:
              "updated_after":
                type: "string"
                additionalProperties: false
                description: "Use a string with a date to only select results updated after that given date"
                nullable: true
                example: "2020-01-01T00:00:00.000Z"
            nullable: true
        - name: "page"
          in: "query"
          description: "The page number of the results to fetch"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
        - name: "page_size"
          in: "query"
          description: "The number of results per page (default value is 25)"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "next"
          in: "query"
          description: "The unified cursor"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "updated_after"
          in: "query"
          description: "Use a string with a date to only select results updated after that given date"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
            example: "2020-01-01T00:00:00.000Z"
      responses:
        "200":
          description: "The contact custom field definition was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/CustomFieldDefinitionResultApiModel"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "crm"
      x-speakeasy-name-override: "get_contact_custom_field_definition"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/iam/users:
    get:
      tags:
        - "Users"
      summary: "List Users"
      operationId: "iam_list_users"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,first_name,last_name,name,primary_email_address,username,roles,groups,status,avatar,is_bot_user,last_active_at,last_login_at,created_at,updated_at,multi_factor_enabled"
        - name: "filter"
          in: "query"
          description: "Filter parameters that allow greater customisation of the list response"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            properties:
              "updated_after":
                type: "string"
                additionalProperties: false
                description: "Use a string with a date to only select results updated after that given date"
                nullable: true
                example: "2020-01-01T00:00:00.000Z"
            nullable: true
        - name: "page"
          in: "query"
          description: "The page number of the results to fetch"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
        - name: "page_size"
          in: "query"
          description: "The number of results per page (default value is 25)"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "next"
          in: "query"
          description: "The unified cursor"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "updated_after"
          in: "query"
          description: "Use a string with a date to only select results updated after that given date"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
            example: "2020-01-01T00:00:00.000Z"
        - name: "expand"
          in: "query"
          description: "The comma separated list of fields that will be expanded in the response"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "roles,groups"
      responses:
        "200":
          description: "The list of users was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/IamUsersPaginated"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "iam"
      x-speakeasy-name-override: "list_users"
      x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "next", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.next"}}
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/iam/users/{id}:
    get:
      tags:
        - "Users"
      summary: "Get User"
      operationId: "iam_get_user"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,first_name,last_name,name,primary_email_address,username,roles,groups,status,avatar,is_bot_user,last_active_at,last_login_at,created_at,updated_at,multi_factor_enabled"
        - name: "expand"
          in: "query"
          description: "The comma separated list of fields that will be expanded in the response"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "roles,groups"
      responses:
        "200":
          description: "The user with the given identifier was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/IamUserResult"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "iam"
      x-speakeasy-name-override: "get_user"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
    delete:
      tags:
        - "Users"
      summary: "Delete User"
      operationId: "iam_delete_user"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "The user was deleted successfully."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/DeleteResult"}
        "204":
          description: "The user was deleted successfully but no content was returned."
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "iam"
      x-speakeasy-name-override: "delete_user"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
    patch:
      tags:
        - "Users"
      summary: "Update User"
      operationId: "iam_update_user"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
      requestBody:
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/IamUpdateUserRequestDto"}
        required: true
      responses:
        "200":
          description: "Record updated successfully."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UpdateResult"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "iam"
      x-speakeasy-name-override: "update_user"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/iam/roles:
    get:
      tags:
        - "Roles"
      summary: "List Roles"
      operationId: "iam_list_roles"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,name,type,policies,description,created_at,updated_at"
        - name: "filter"
          in: "query"
          description: "Filter parameters that allow greater customisation of the list response"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            properties:
              "updated_after":
                type: "string"
                additionalProperties: false
                description: "Use a string with a date to only select results updated after that given date"
                nullable: true
                example: "2020-01-01T00:00:00.000Z"
            nullable: true
        - name: "page"
          in: "query"
          description: "The page number of the results to fetch"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
        - name: "page_size"
          in: "query"
          description: "The number of results per page (default value is 25)"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "next"
          in: "query"
          description: "The unified cursor"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "updated_after"
          in: "query"
          description: "Use a string with a date to only select results updated after that given date"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
            example: "2020-01-01T00:00:00.000Z"
        - name: "expand"
          in: "query"
          description: "The comma separated list of fields that will be expanded in the response"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "policies"
      responses:
        "200":
          description: "The list of roles was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/IamRolesPaginated"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "iam"
      x-speakeasy-name-override: "list_roles"
      x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "next", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.next"}}
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/iam/roles/{id}:
    get:
      tags:
        - "Roles"
      summary: "Get Role"
      operationId: "iam_get_role"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,name,type,policies,description,created_at,updated_at"
        - name: "expand"
          in: "query"
          description: "The comma separated list of fields that will be expanded in the response"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "policies"
      responses:
        "200":
          description: "The role with the given identifier was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/IamRoleResult"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "iam"
      x-speakeasy-name-override: "get_role"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/iam/groups:
    get:
      tags:
        - "Groups"
      summary: "List Groups"
      operationId: "iam_list_groups"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,parent_id,remote_parent_id,name,description,roles,type,created_at,updated_at"
        - name: "filter"
          in: "query"
          description: "Filter parameters that allow greater customisation of the list response"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            properties:
              "updated_after":
                type: "string"
                additionalProperties: false
                description: "Use a string with a date to only select results updated after that given date"
                nullable: true
                example: "2020-01-01T00:00:00.000Z"
            nullable: true
        - name: "page"
          in: "query"
          description: "The page number of the results to fetch"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
        - name: "page_size"
          in: "query"
          description: "The number of results per page (default value is 25)"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "next"
          in: "query"
          description: "The unified cursor"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "updated_after"
          in: "query"
          description: "Use a string with a date to only select results updated after that given date"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
            example: "2020-01-01T00:00:00.000Z"
        - name: "expand"
          in: "query"
          description: "The comma separated list of fields that will be expanded in the response"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "roles"
      responses:
        "200":
          description: "The list of groups was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/IamGroupsPaginated"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "iam"
      x-speakeasy-name-override: "list_groups"
      x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "next", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.next"}}
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/iam/groups/{id}:
    get:
      tags:
        - "Groups"
      summary: "Get Group"
      operationId: "iam_get_group"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,parent_id,remote_parent_id,name,description,roles,type,created_at,updated_at"
        - name: "expand"
          in: "query"
          description: "The comma separated list of fields that will be expanded in the response"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "roles"
      responses:
        "200":
          description: "The group with the given identifier was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/IamGroupResult"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "iam"
      x-speakeasy-name-override: "get_group"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/iam/policies:
    get:
      tags:
        - "Policies"
      summary: "List Policies"
      operationId: "iam_list_policies"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,name,permissions,description,created_at,updated_at"
        - name: "filter"
          in: "query"
          description: "Filter parameters that allow greater customisation of the list response"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            properties:
              "updated_after":
                type: "string"
                additionalProperties: false
                description: "Use a string with a date to only select results updated after that given date"
                nullable: true
                example: "2020-01-01T00:00:00.000Z"
            nullable: true
        - name: "page"
          in: "query"
          description: "The page number of the results to fetch"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
        - name: "page_size"
          in: "query"
          description: "The number of results per page (default value is 25)"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "next"
          in: "query"
          description: "The unified cursor"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "updated_after"
          in: "query"
          description: "Use a string with a date to only select results updated after that given date"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
            example: "2020-01-01T00:00:00.000Z"
        - name: "expand"
          in: "query"
          description: "The comma separated list of fields that will be expanded in the response"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "permissions"
      responses:
        "200":
          description: "The list of policies was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/IamPoliciesPaginated"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "iam"
      x-speakeasy-name-override: "list_policies"
      x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "next", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.next"}}
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/iam/policies/{id}:
    get:
      tags:
        - "Policies"
      summary: "Get Policy"
      operationId: "iam_get_policy"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,name,permissions,description,created_at,updated_at"
        - name: "expand"
          in: "query"
          description: "The comma separated list of fields that will be expanded in the response"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "permissions"
      responses:
        "200":
          description: "The policy with the given identifier was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/IamPolicyResult"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "iam"
      x-speakeasy-name-override: "get_policy"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/marketing/templates/email:
    get:
      tags:
        - "Templates"
        - "Email"
      summary: "List Email Templates"
      operationId: "marketing_list_email_templates"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,name,messages,created_at,updated_at,tags"
        - name: "filter"
          in: "query"
          description: "Filter parameters that allow greater customisation of the list response"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            properties:
              "updated_after":
                type: "string"
                additionalProperties: false
                description: "Use a string with a date to only select results updated after that given date"
                nullable: true
                example: "2020-01-01T00:00:00.000Z"
            nullable: true
        - name: "page"
          in: "query"
          description: "The page number of the results to fetch"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
        - name: "page_size"
          in: "query"
          description: "The number of results per page (default value is 25)"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "next"
          in: "query"
          description: "The unified cursor"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "updated_after"
          in: "query"
          description: "Use a string with a date to only select results updated after that given date"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
            example: "2020-01-01T00:00:00.000Z"
      responses:
        "200":
          description: "The list of email templates was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/EmailTemplatesPaginated"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "marketing"
      x-speakeasy-name-override: "list_email_templates"
      x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "next", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.next"}}
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
    post:
      tags:
        - "Templates"
        - "Email"
      summary: "Create Email Templates"
      operationId: "marketing_create_email_template"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
      requestBody:
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/MarketingCreateEmailTemplateRequestDto"}
        required: true
      responses:
        "201":
          description: "Record created successfully."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/CreateResult"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "marketing"
      x-speakeasy-name-override: "create_email_template"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/marketing/templates/email/{id}:
    get:
      tags:
        - "Templates"
        - "Email"
      summary: "Get Email Templates"
      operationId: "marketing_get_email_template"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,name,messages,created_at,updated_at,tags"
      responses:
        "200":
          description: "The email template with the given identifier was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/EmailTemplateResult"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "marketing"
      x-speakeasy-name-override: "get_email_template"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
    patch:
      tags:
        - "Templates"
        - "Email"
      summary: "Update Email Templates"
      operationId: "marketing_update_email_template"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
      requestBody:
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/MarketingCreateEmailTemplateRequestDto"}
        required: true
      responses:
        "200":
          description: "Record updated successfully"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/CreateResult"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "marketing"
      x-speakeasy-name-override: "update_email_template"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/marketing/templates/in_app:
    get:
      tags:
        - "Templates"
        - "In App"
      summary: "List In-App Templates"
      operationId: "marketing_list_in_app_templates"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,name,messages,created_at,updated_at,tags"
        - name: "filter"
          in: "query"
          description: "Filter parameters that allow greater customisation of the list response"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            properties:
              "updated_after":
                type: "string"
                additionalProperties: false
                description: "Use a string with a date to only select results updated after that given date"
                nullable: true
                example: "2020-01-01T00:00:00.000Z"
            nullable: true
        - name: "page"
          in: "query"
          description: "The page number of the results to fetch"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
        - name: "page_size"
          in: "query"
          description: "The number of results per page (default value is 25)"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "next"
          in: "query"
          description: "The unified cursor"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "updated_after"
          in: "query"
          description: "Use a string with a date to only select results updated after that given date"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
            example: "2020-01-01T00:00:00.000Z"
      responses:
        "200":
          description: "The list of in-app templates was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InAppTemplatesPaginated"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "marketing"
      x-speakeasy-name-override: "list_in_app_templates"
      x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "next", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.next"}}
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
    post:
      tags:
        - "Templates"
        - "In App"
      summary: "Create In-App Template"
      operationId: "marketing_create_in_app_template"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
      requestBody:
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/MarketingCreateInAppTemplateRequestDto"}
        required: true
      responses:
        "201":
          description: "Record created successfully."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/CreateResult"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "marketing"
      x-speakeasy-name-override: "create_in_app_template"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/marketing/templates/in_app/{id}:
    get:
      tags:
        - "Templates"
        - "In App"
      summary: "Get In-App Template"
      operationId: "marketing_get_in_app_template"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,name,messages,created_at,updated_at,tags"
      responses:
        "200":
          description: "The in-app template with the given identifier was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InAppTemplateResult"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "marketing"
      x-speakeasy-name-override: "get_in_app_template"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
    patch:
      tags:
        - "Templates"
        - "In App"
      summary: "Update In-App Template"
      operationId: "marketing_update_in_app_template"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
      requestBody:
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/MarketingCreateInAppTemplateRequestDto"}
        required: true
      responses:
        "200":
          description: "Record updated successfully"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/CreateResult"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "marketing"
      x-speakeasy-name-override: "update_in_app_template"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/marketing/templates/sms:
    get:
      tags:
        - "Templates"
        - "SMS"
      summary: "List SMS Templates"
      operationId: "marketing_list_sms_templates"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,name,messages,created_at,updated_at,tags"
        - name: "filter"
          in: "query"
          description: "Filter parameters that allow greater customisation of the list response"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            properties:
              "updated_after":
                type: "string"
                additionalProperties: false
                description: "Use a string with a date to only select results updated after that given date"
                nullable: true
                example: "2020-01-01T00:00:00.000Z"
            nullable: true
        - name: "page"
          in: "query"
          description: "The page number of the results to fetch"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
        - name: "page_size"
          in: "query"
          description: "The number of results per page (default value is 25)"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "next"
          in: "query"
          description: "The unified cursor"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "updated_after"
          in: "query"
          description: "Use a string with a date to only select results updated after that given date"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
            example: "2020-01-01T00:00:00.000Z"
      responses:
        "200":
          description: "The list of SMS templates was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/SmsTemplatesPaginated"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "marketing"
      x-speakeasy-name-override: "list_sms_templates"
      x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "next", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.next"}}
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
    post:
      tags:
        - "Templates"
        - "SMS"
      summary: "Create SMS Template"
      operationId: "marketing_create_sms_template"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
      requestBody:
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/MarketingCreateSmsTemplateRequestDto"}
        required: true
      responses:
        "201":
          description: "Record created successfully."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/CreateResult"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "marketing"
      x-speakeasy-name-override: "create_sms_template"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/marketing/templates/sms/{id}:
    get:
      tags:
        - "Templates"
        - "SMS"
      summary: "Get SMS Template"
      operationId: "marketing_get_sms_template"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,name,messages,created_at,updated_at,tags"
      responses:
        "200":
          description: "The SMS template with the given identifier was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/SmsTemplateResult"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "marketing"
      x-speakeasy-name-override: "get_sms_template"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
    patch:
      tags:
        - "Templates"
        - "SMS"
      summary: "Update SMS Template"
      operationId: "marketing_update_sms_template"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
      requestBody:
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/MarketingCreateSmsTemplateRequestDto"}
        required: true
      responses:
        "200":
          description: "Record updated successfully"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/CreateResult"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "marketing"
      x-speakeasy-name-override: "update_sms_template"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/marketing/templates/omni_channel:
    get:
      tags:
        - "Templates"
        - "Omni-Channel"
      summary: "List Omni-Channel Templates"
      operationId: "marketing_list_omni_channel_templates"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,name,messages,created_at,updated_at,tags"
        - name: "filter"
          in: "query"
          description: "Filter parameters that allow greater customisation of the list response"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            properties:
              "updated_after":
                type: "string"
                additionalProperties: false
                description: "Use a string with a date to only select results updated after that given date"
                nullable: true
                example: "2020-01-01T00:00:00.000Z"
            nullable: true
        - name: "page"
          in: "query"
          description: "The page number of the results to fetch"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
        - name: "page_size"
          in: "query"
          description: "The number of results per page (default value is 25)"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "next"
          in: "query"
          description: "The unified cursor"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "updated_after"
          in: "query"
          description: "Use a string with a date to only select results updated after that given date"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
            example: "2020-01-01T00:00:00.000Z"
      responses:
        "200":
          description: "The list of omni-channel templates was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TemplatesPaginated"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      deprecated: true
      security:
        - basic: []
      x-speakeasy-group: "marketing"
      x-speakeasy-name-override: "list_omni_channel_templates"
      x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "next", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.next"}}
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
    post:
      tags:
        - "Templates"
        - "Omni-Channel"
      summary: "Create Omni-Channel Template"
      operationId: "marketing_create_omni_channel_template"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
      requestBody:
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/MarketingCreateTemplateRequestDto"}
        required: true
      responses:
        "201":
          description: "Record created successfully."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/CreateResult"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      deprecated: true
      security:
        - basic: []
      x-speakeasy-group: "marketing"
      x-speakeasy-name-override: "create_omni_channel_template"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/marketing/templates/omni_channel/{id}:
    get:
      tags:
        - "Templates"
        - "Omni-Channel"
      summary: "Get Omni-Channel Template"
      operationId: "marketing_get_omni_channel_template"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,name,messages,created_at,updated_at,tags"
      responses:
        "200":
          description: "The omni-channel template with the given identifier was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TemplateResult"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      deprecated: true
      security:
        - basic: []
      x-speakeasy-group: "marketing"
      x-speakeasy-name-override: "get_omni_channel_template"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
    patch:
      tags:
        - "Templates"
        - "Omni-Channel"
      summary: "Update Omni-Channel Template"
      operationId: "marketing_update_omni_channel_template"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
      requestBody:
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/MarketingCreateTemplateRequestDto"}
        required: true
      responses:
        "200":
          description: "Record updated successfully"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/CreateResult"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      deprecated: true
      security:
        - basic: []
      x-speakeasy-group: "marketing"
      x-speakeasy-name-override: "update_omni_channel_template"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/marketing/templates/push:
    get:
      tags:
        - "Templates"
        - "Push"
      summary: "List Push Templates"
      operationId: "marketing_list_push_templates"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,name,messages,created_at,updated_at,tags"
        - name: "filter"
          in: "query"
          description: "Filter parameters that allow greater customisation of the list response"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            properties:
              "updated_after":
                type: "string"
                additionalProperties: false
                description: "Use a string with a date to only select results updated after that given date"
                nullable: true
                example: "2020-01-01T00:00:00.000Z"
            nullable: true
        - name: "page"
          in: "query"
          description: "The page number of the results to fetch"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
        - name: "page_size"
          in: "query"
          description: "The number of results per page (default value is 25)"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "next"
          in: "query"
          description: "The unified cursor"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "updated_after"
          in: "query"
          description: "Use a string with a date to only select results updated after that given date"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
            example: "2020-01-01T00:00:00.000Z"
      responses:
        "200":
          description: "The list of push templates was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PushTemplatesPaginated"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "marketing"
      x-speakeasy-name-override: "list_push_templates"
      x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "next", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.next"}}
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
    post:
      tags:
        - "Templates"
        - "Push"
      summary: "Create Push Template"
      operationId: "marketing_create_push_template"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
      requestBody:
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/MarketingCreatePushTemplateRequestDto"}
        required: true
      responses:
        "201":
          description: "Record created successfully."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/CreateResult"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "marketing"
      x-speakeasy-name-override: "create_push_template"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/marketing/templates/push/{id}:
    get:
      tags:
        - "Templates"
        - "Push"
      summary: "Get Push Template"
      operationId: "marketing_get_push_template"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,name,messages,created_at,updated_at,tags"
      responses:
        "200":
          description: "The push template with the given identifier was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PushTemplateResult"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "marketing"
      x-speakeasy-name-override: "get_push_template"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
    patch:
      tags:
        - "Templates"
        - "Push"
      summary: "Update Push Template"
      operationId: "marketing_update_push_template"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
      requestBody:
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/MarketingCreatePushTemplateRequestDto"}
        required: true
      responses:
        "200":
          description: "Record updated successfully"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/CreateResult"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "marketing"
      x-speakeasy-name-override: "update_push_template"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/marketing/campaigns:
    get:
      tags:
        - "Campaigns"
      summary: "List campaigns"
      operationId: "marketing_list_campaigns"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,name,created_at,updated_at,description,schedule_type,status,channels,first_sent_at,last_sent_at,tags,messages"
        - name: "filter"
          in: "query"
          description: "Filter parameters that allow greater customisation of the list response"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            properties:
              "updated_after":
                type: "string"
                additionalProperties: false
                description: "Use a string with a date to only select results updated after that given date"
                nullable: true
                example: "2020-01-01T00:00:00.000Z"
            nullable: true
        - name: "page"
          in: "query"
          description: "The page number of the results to fetch"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
        - name: "page_size"
          in: "query"
          description: "The number of results per page (default value is 25)"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "next"
          in: "query"
          description: "The unified cursor"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "updated_after"
          in: "query"
          description: "Use a string with a date to only select results updated after that given date"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
            example: "2020-01-01T00:00:00.000Z"
      responses:
        "200":
          description: "The list of campaigns was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/CampaignsPaginated"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "marketing"
      x-speakeasy-name-override: "list_campaigns"
      x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "next", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.next"}}
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/marketing/campaigns/{id}:
    get:
      tags:
        - "Campaigns"
      summary: "Get campaign"
      operationId: "marketing_get_campaign"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,name,created_at,updated_at,description,schedule_type,status,channels,first_sent_at,last_sent_at,tags,messages"
      responses:
        "200":
          description: "The campaign with the given identifier was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/CampaignResult"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "marketing"
      x-speakeasy-name-override: "get_campaign"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/marketing/content_blocks:
    get:
      tags:
        - "Content Blocks"
      summary: "List Content Blocks"
      operationId: "marketing_list_content_blocks"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,name,type,content,status,tags,created_at,updated_at"
        - name: "filter"
          in: "query"
          description: "Filter parameters that allow greater customisation of the list response"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            properties:
              "updated_after":
                type: "string"
                additionalProperties: false
                description: "Use a string with a date to only select results updated after that given date"
                nullable: true
                example: "2020-01-01T00:00:00.000Z"
            nullable: true
        - name: "page"
          in: "query"
          description: "The page number of the results to fetch"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
        - name: "page_size"
          in: "query"
          description: "The number of results per page (default value is 25)"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "next"
          in: "query"
          description: "The unified cursor"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "updated_after"
          in: "query"
          description: "Use a string with a date to only select results updated after that given date"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
            example: "2020-01-01T00:00:00.000Z"
      responses:
        "200":
          description: "The list of Content Blocks was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ContentBlocksPaginated"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "marketing"
      x-speakeasy-name-override: "list_content_blocks"
      x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "next", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.next"}}
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
    post:
      tags:
        - "Content Blocks"
      summary: "Create Content Block"
      operationId: "marketing_create_content_block"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
      requestBody:
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/MarketingCreateContentBlocksRequestDto"}
        required: true
      responses:
        "201":
          description: "Record created successfully."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/CreateResult"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "marketing"
      x-speakeasy-name-override: "create_content_block"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/marketing/content_blocks/{id}:
    get:
      tags:
        - "Content Blocks"
      summary: "Get Content Blocks"
      operationId: "marketing_get_content_block"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,name,type,content,status,tags,created_at,updated_at"
      responses:
        "200":
          description: "The Content Block with the given identifier was retrieved"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ContentBlockResult"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "marketing"
      x-speakeasy-name-override: "get_content_block"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
    patch:
      tags:
        - "Content Blocks"
      summary: "Update Content Block"
      operationId: "marketing_update_content_block"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
      requestBody:
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/MarketingCreateContentBlocksRequestDto"}
        required: true
      responses:
        "200":
          description: "Record updated successfully"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/CreateResult"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "marketing"
      x-speakeasy-name-override: "update_content_block"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/lms/courses:
    get:
      tags:
        - "Courses"
      summary: "List Courses"
      operationId: "lms_list_courses"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,external_reference,content_ids,remote_content_ids,title,description,languages,cover_url,url,active,duration,categories,skills,updated_at,created_at,content,provider,localizations,authors"
        - name: "filter"
          in: "query"
          description: "LMS Courses Filter"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            properties:
              "updated_after":
                type: "string"
                additionalProperties: false
                description: "Use a string with a date to only select results updated after that given date"
                nullable: true
                example: "2020-01-01T00:00:00.000Z"
              "external_reference":
                type: "string"
                description: "Filter to select courses by external_reference"
                nullable: true
            nullable: true
        - name: "page"
          in: "query"
          description: "The page number of the results to fetch"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
        - name: "page_size"
          in: "query"
          description: "The number of results per page (default value is 25)"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "next"
          in: "query"
          description: "The unified cursor"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "updated_after"
          in: "query"
          description: "Use a string with a date to only select results updated after that given date"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
            example: "2020-01-01T00:00:00.000Z"
      responses:
        "200":
          description: "The list of courses was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/CoursePaginated"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "lms"
      x-speakeasy-name-override: "list_courses"
      x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "next", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.next"}}
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/lms/courses/{id}:
    get:
      tags:
        - "Courses"
      summary: "Get Course"
      operationId: "lms_get_course"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,external_reference,content_ids,remote_content_ids,title,description,languages,cover_url,url,active,duration,categories,skills,updated_at,created_at,content,provider,localizations,authors"
      responses:
        "200":
          description: "The course with the given identifier was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/CourseResult"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "lms"
      x-speakeasy-name-override: "get_course"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/lms/users/{id}/assignments:
    get:
      tags:
        - "Users"
        - "Assignments"
      summary: "List User Assignments"
      operationId: "lms_list_user_assignments"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,external_reference,user_id,remote_user_id,course_id,remote_course_id,updated_at,created_at,due_date,status,progress,learning_object_type,learning_object_id,remote_learning_object_id,learning_object_external_reference"
        - name: "filter"
          in: "query"
          description: "LMS Assignment Filter"
          required: false
          schema:
            type: "object"
            properties:
              "updated_after":
                type: "string"
                additionalProperties: false
                description: "Use a string with a date to only select results updated after that given date"
                nullable: true
                example: "2020-01-01T00:00:00.000Z"
              "status":
                type: "string"
                enum:
                  - "pending"
                  - "in_progress"
                  - "completed"
                  - null
                description: "Filter to select assignment by status"
                nullable: true
            nullable: true
        - name: "page"
          in: "query"
          description: "The page number of the results to fetch"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
        - name: "page_size"
          in: "query"
          description: "The number of results per page (default value is 25)"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "next"
          in: "query"
          description: "The unified cursor"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "updated_after"
          in: "query"
          description: "Use a string with a date to only select results updated after that given date"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
            example: "2020-01-01T00:00:00.000Z"
        - name: "user_id"
          in: "query"
          description: "The user ID associated with this assignment"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "c28xyrc55866bvuv"
        - name: "remote_user_id"
          in: "query"
          description: "Provider's unique identifier of the user related to the assignment"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "e3cb75bf-aa84-466e-a6c1-b8322b257a48"
      responses:
        "200":
          description: "The assignments related to the employee with the given identifier were retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/AssignmentsPaginated"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "lms"
      x-speakeasy-name-override: "list_user_assignments"
      x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "next", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.next"}}
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
    post:
      tags:
        - "Users"
        - "Assignments"
      summary: "Create User Assignment"
      operationId: "lms_create_user_assignment"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
      requestBody:
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/LmsCreateAssignmentRequestDto"}
        required: true
      responses:
        "201":
          description: "The assignment was created successfully."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/CreateResult"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "lms"
      x-speakeasy-name-override: "create_user_assignment"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/lms/users/{id}/assignments/{subResourceId}:
    get:
      tags:
        - "Users"
        - "Assignments"
      summary: "Get User Assignment"
      operationId: "lms_get_user_assignment"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "subResourceId"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields to return in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
      responses:
        "200":
          description: "The assignment with the given identifier was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/AssignmentResult"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "lms"
      x-speakeasy-name-override: "get_user_assignment"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/lms/content/batch:
    post:
      tags:
        - "Content"
      summary: "Batch Upsert Content"
      operationId: "lms_batch_upsert_content"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
      requestBody:
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/LmsBatchUpsertContentRequestDto"}
        required: true
      responses:
        "202":
          description: "Batch operation accepted"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BatchResultApiModel"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "lms"
      x-speakeasy-name-override: "batch_upsert_content"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/lms/content:
    get:
      tags:
        - "Content"
      summary: "List Content"
      operationId: "lms_list_content"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,external_reference,course_ids,remote_course_ids,title,description,additional_data,languages,content_url,mobile_launch_content_url,content_type,cover_url,active,duration,order,categories,skills,updated_at,created_at,provider,localizations,tags,authors"
        - name: "filter"
          in: "query"
          description: "Filter parameters that allow greater customisation of the list response"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            properties:
              "updated_after":
                type: "string"
                additionalProperties: false
                description: "Use a string with a date to only select results updated after that given date"
                nullable: true
                example: "2020-01-01T00:00:00.000Z"
            nullable: true
        - name: "page"
          in: "query"
          description: "The page number of the results to fetch"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
        - name: "page_size"
          in: "query"
          description: "The number of results per page (default value is 25)"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "next"
          in: "query"
          description: "The unified cursor"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "updated_after"
          in: "query"
          description: "Use a string with a date to only select results updated after that given date"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
            example: "2020-01-01T00:00:00.000Z"
      responses:
        "200":
          description: "The list of content was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ContentPaginated"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "lms"
      x-speakeasy-name-override: "list_content"
      x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "next", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.next"}}
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
    put:
      tags:
        - "Content"
      summary: "Upsert Content"
      operationId: "lms_upsert_content"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
      requestBody:
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/LmsUpsertContentRequestDto"}
        required: true
      responses:
        "201":
          description: "The content was upserted successfully."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UpsertResult"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "lms"
      x-speakeasy-name-override: "upsert_content"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/lms/content/{id}:
    get:
      tags:
        - "Content"
      summary: "Get Content"
      operationId: "lms_get_content"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,external_reference,course_ids,remote_course_ids,title,description,additional_data,languages,content_url,mobile_launch_content_url,content_type,cover_url,active,duration,order,categories,skills,updated_at,created_at,provider,localizations,tags,authors"
      responses:
        "200":
          description: "The content with the given identifier was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ContentResult"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "lms"
      x-speakeasy-name-override: "get_content"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
    patch:
      tags:
        - "Content"
      summary: "Update Content"
      operationId: "lms_update_content"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
      requestBody:
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/LmsCreateContentRequestDto"}
        required: true
      responses:
        "201":
          description: "The content was updated successfully."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UpdateResult"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "lms"
      x-speakeasy-name-override: "update_content"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/lms/users/{id}/completions:
    get:
      tags:
        - "Users"
        - "Completions"
      summary: "List User Completions"
      operationId: "lms_list_user_completions"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,external_id,remote_external_id,external_reference,content_id,remote_content_id,course_id,remote_course_id,user_id,remote_user_id,completed_at,updated_at,created_at,result,content_external_reference,learning_object_type,learning_object_id,remote_learning_object_id,learning_object_external_reference,time_spent"
        - name: "filter"
          in: "query"
          description: "LMS Completions Filter"
          required: false
          schema:
            type: "object"
            properties:
              "updated_after":
                type: "string"
                additionalProperties: false
                description: "Use a string with a date to only select results updated after that given date"
                nullable: true
                example: "2020-01-01T00:00:00.000Z"
            nullable: true
        - name: "page"
          in: "query"
          description: "The page number of the results to fetch"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
        - name: "page_size"
          in: "query"
          description: "The number of results per page (default value is 25)"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "next"
          in: "query"
          description: "The unified cursor"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "updated_after"
          in: "query"
          description: "Use a string with a date to only select results updated after that given date"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
            example: "2020-01-01T00:00:00.000Z"
      responses:
        "200":
          description: "The completions with for the users with the given identifier were retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/CompletionsPaginated"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "lms"
      x-speakeasy-name-override: "list_user_completions"
      x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "next", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.next"}}
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
    post:
      tags:
        - "Users"
        - "Completions"
      summary: "Create User Completion"
      operationId: "lms_create_user_completion"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
      requestBody:
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/LmsCreateCompletionRequestDto"}
        required: true
      responses:
        "201":
          description: "The completion was created successfully."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/CreateResult"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "lms"
      x-speakeasy-name-override: "create_user_completion"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/lms/users/{id}/completions/{subResourceId}:
    get:
      tags:
        - "Users"
        - "Completions"
      summary: "Get User Completion"
      operationId: "lms_get_user_completion"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "subResourceId"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields to return in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
      responses:
        "200":
          description: "The completion with the given identifier was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/CompletionResult"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "lms"
      x-speakeasy-name-override: "get_user_completion"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
    delete:
      tags:
        - "Users"
        - "Completions"
      summary: "Delete User Completion"
      operationId: "lms_delete_user_completion"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "subResourceId"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "The completion was deleted successfully."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/DeleteResult"}
        "204":
          description: "The completion was deleted successfully but no content was returned."
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "lms"
      x-speakeasy-name-override: "delete_user_completion"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/lms/completions:
    get:
      tags:
        - "Completions"
      summary: "List Completions"
      operationId: "lms_list_completions"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,external_id,remote_external_id,external_reference,content_id,remote_content_id,course_id,remote_course_id,user_id,remote_user_id,completed_at,updated_at,created_at,result,content_external_reference,learning_object_type,learning_object_id,remote_learning_object_id,learning_object_external_reference,time_spent"
        - name: "filter"
          in: "query"
          description: "LMS Completions Filter"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            properties:
              "updated_after":
                type: "string"
                additionalProperties: false
                description: "Use a string with a date to only select results updated after that given date"
                nullable: true
                example: "2020-01-01T00:00:00.000Z"
            nullable: true
        - name: "page"
          in: "query"
          description: "The page number of the results to fetch"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
        - name: "page_size"
          in: "query"
          description: "The number of results per page (default value is 25)"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "next"
          in: "query"
          description: "The unified cursor"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "updated_after"
          in: "query"
          description: "Use a string with a date to only select results updated after that given date"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
            example: "2020-01-01T00:00:00.000Z"
      responses:
        "200":
          description: "The list of completions was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/CompletionsPaginated"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "lms"
      x-speakeasy-name-override: "list_completions"
      x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "next", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.next"}}
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/lms/completions/{id}:
    get:
      tags:
        - "Completions"
      summary: "Get Completion"
      operationId: "lms_get_completion"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields to return in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
      responses:
        "200":
          description: "The completion with the given identifier was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/CompletionResult"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "lms"
      x-speakeasy-name-override: "get_completion"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/lms/categories/{id}:
    get:
      tags:
        - "Categories"
      summary: "Get Category"
      operationId: "lms_get_category"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,name,active,hierarchy,level,language"
      responses:
        "200":
          description: "The category with the given identifier was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/CategoryResult"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "lms"
      x-speakeasy-name-override: "get_category"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/lms/categories:
    get:
      tags:
        - "Categories"
      summary: "List Categories"
      operationId: "lms_list_categories"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,name,active,hierarchy,level,language"
        - name: "filter"
          in: "query"
          description: "Filter parameters that allow greater customisation of the list response"
          required: false
          schema:
            type: "object"
            properties:
              "updated_after":
                type: "string"
                additionalProperties: false
                description: "Use a string with a date to only select results updated after that given date"
                nullable: true
                example: "2020-01-01T00:00:00.000Z"
            nullable: true
        - name: "page"
          in: "query"
          description: "The page number of the results to fetch"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
        - name: "page_size"
          in: "query"
          description: "The number of results per page (default value is 25)"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "next"
          in: "query"
          description: "The unified cursor"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "updated_after"
          in: "query"
          description: "Use a string with a date to only select results updated after that given date"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
            example: "2020-01-01T00:00:00.000Z"
      responses:
        "200":
          description: "The list of categories was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/CategoriesPaginated"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "lms"
      x-speakeasy-name-override: "list_categories"
      x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "next", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.next"}}
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/lms/users:
    get:
      tags:
        - "Users"
      summary: "List Users"
      operationId: "lms_list_users"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,external_reference,active,email,phone_number,created_at,updated_at,name"
        - name: "filter"
          in: "query"
          description: "LMS Users Filter"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            properties:
              "updated_after":
                type: "string"
                additionalProperties: false
                description: "Use a string with a date to only select results updated after that given date"
                nullable: true
                example: "2020-01-01T00:00:00.000Z"
              "email":
                type: "string"
                description: "Filter to select users by email"
                nullable: true
              "external_reference":
                type: "string"
                description: "Filter to select users by external_reference"
                nullable: true
            nullable: true
        - name: "page"
          in: "query"
          description: "The page number of the results to fetch"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
        - name: "page_size"
          in: "query"
          description: "The number of results per page (default value is 25)"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "next"
          in: "query"
          description: "The unified cursor"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "updated_after"
          in: "query"
          description: "Use a string with a date to only select results updated after that given date"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
            example: "2020-01-01T00:00:00.000Z"
      responses:
        "200":
          description: "The list of users was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UsersPaginated"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "lms"
      x-speakeasy-name-override: "list_users"
      x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "next", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.next"}}
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/lms/users/{id}:
    get:
      tags:
        - "Users"
      summary: "Get User"
      operationId: "lms_get_user"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,external_reference,active,email,phone_number,created_at,updated_at,name"
      responses:
        "200":
          description: "The user with the given identifier was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UserResult"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "lms"
      x-speakeasy-name-override: "get_user"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/lms/skills/{id}:
    get:
      tags:
        - "Skills"
      summary: "Get Skill"
      operationId: "lms_get_skill"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,name,active,hierarchy,language"
      responses:
        "200":
          description: "The skill with the given identifier was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/SkillResult"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "lms"
      x-speakeasy-name-override: "get_skill"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/lms/skills:
    get:
      tags:
        - "Skills"
      summary: "List Skills"
      operationId: "lms_list_skills"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,name,active,hierarchy,language"
        - name: "filter"
          in: "query"
          description: "Filter parameters that allow greater customisation of the list response"
          required: false
          schema:
            type: "object"
            properties:
              "updated_after":
                type: "string"
                additionalProperties: false
                description: "Use a string with a date to only select results updated after that given date"
                nullable: true
                example: "2020-01-01T00:00:00.000Z"
            nullable: true
        - name: "page"
          in: "query"
          description: "The page number of the results to fetch"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
        - name: "page_size"
          in: "query"
          description: "The number of results per page (default value is 25)"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "next"
          in: "query"
          description: "The unified cursor"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "updated_after"
          in: "query"
          description: "Use a string with a date to only select results updated after that given date"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
            example: "2020-01-01T00:00:00.000Z"
      responses:
        "200":
          description: "The list of skills was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/SkillsPaginated"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "lms"
      x-speakeasy-name-override: "list_skills"
      x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "next", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.next"}}
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/lms/assignments:
    get:
      tags:
        - "Assignments"
      summary: "List Assignments"
      operationId: "lms_list_assignments"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,external_reference,user_id,remote_user_id,course_id,remote_course_id,updated_at,created_at,due_date,status,progress,learning_object_type,learning_object_id,remote_learning_object_id,learning_object_external_reference"
        - name: "filter"
          in: "query"
          description: "LMS Assignment Filter"
          required: false
          schema:
            type: "object"
            properties:
              "updated_after":
                type: "string"
                additionalProperties: false
                description: "Use a string with a date to only select results updated after that given date"
                nullable: true
                example: "2020-01-01T00:00:00.000Z"
              "status":
                type: "string"
                enum:
                  - "pending"
                  - "in_progress"
                  - "completed"
                  - null
                description: "Filter to select assignment by status"
                nullable: true
            nullable: true
        - name: "page"
          in: "query"
          description: "The page number of the results to fetch"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
        - name: "page_size"
          in: "query"
          description: "The number of results per page (default value is 25)"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "next"
          in: "query"
          description: "The unified cursor"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "updated_after"
          in: "query"
          description: "Use a string with a date to only select results updated after that given date"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
            example: "2020-01-01T00:00:00.000Z"
        - name: "user_id"
          in: "query"
          description: "The user ID associated with this assignment"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "c28xyrc55866bvuv"
        - name: "remote_user_id"
          in: "query"
          description: "Provider's unique identifier of the user related to the assignment"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "e3cb75bf-aa84-466e-a6c1-b8322b257a48"
      responses:
        "200":
          description: "The list of assignments was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/AssignmentsPaginated"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "lms"
      x-speakeasy-name-override: "list_assignments"
      x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "next", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.next"}}
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/lms/assignments/{id}:
    get:
      tags:
        - "Assignments"
      summary: "Get Assignment"
      operationId: "lms_get_assignment"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields to return in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
      responses:
        "200":
          description: "The assignment with the given identifier was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/AssignmentResult"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "lms"
      x-speakeasy-name-override: "get_assignment"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/ticketing/tickets:
    get:
      tags:
        - "Tickets"
      summary: "List Tickets"
      description: "Retrieve a paginated list of tickets."
      operationId: "ticketing_list_tickets"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,type,ticket_number,title,creator_id,remote_creator_id,reporters,assignees,content,parent_id,remote_parent_id,closed_at,ticket_url,status,priority,tags,collections,organization,created_at,updated_at"
        - name: "filter"
          in: "query"
          description: "Filter parameters that allow greater customisation of the list response"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            properties:
              "updated_after":
                type: "string"
                additionalProperties: false
                description: "Use a string with a date to only select results updated after that given date"
                nullable: true
                example: "2020-01-01T00:00:00.000Z"
            nullable: true
        - name: "page"
          in: "query"
          description: "The page number of the results to fetch"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
        - name: "page_size"
          in: "query"
          description: "The number of results per page (default value is 25)"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "next"
          in: "query"
          description: "The unified cursor"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "updated_after"
          in: "query"
          description: "Use a string with a date to only select results updated after that given date"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
            example: "2020-01-01T00:00:00.000Z"
      responses:
        "200":
          description: "The list of tickets was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TicketingTicketsPaginated"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "ticketing"
      x-speakeasy-name-override: "list_tickets"
      x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "next", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.next"}}
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
    post:
      tags:
        - "Tickets"
      summary: "Create Ticket"
      description: "Create a new ticket record."
      operationId: "ticketing_create_ticket"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
      requestBody:
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/TicketingTicketCreateRequestDto"}
        required: true
      responses:
        "201":
          description: "Record created successfully."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/CreateResult"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "ticketing"
      x-speakeasy-name-override: "create_ticket"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/ticketing/tickets/{id}:
    get:
      tags:
        - "Tickets"
      summary: "Get Ticket"
      description: "Retrieve a single ticket by its identifier."
      operationId: "ticketing_get_ticket"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,type,ticket_number,title,creator_id,remote_creator_id,reporters,assignees,content,parent_id,remote_parent_id,closed_at,ticket_url,status,priority,tags,collections,organization,created_at,updated_at"
      responses:
        "200":
          description: "The ticket with the given identifier was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TicketingTicketResult"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "ticketing"
      x-speakeasy-name-override: "get_ticket"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
    patch:
      tags:
        - "Tickets"
      summary: "Update Ticket"
      description: "Update an existing ticket record by its identifier."
      operationId: "ticketing_update_ticket"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
      requestBody:
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/TicketingTicketUpdateRequestDto"}
        required: true
      responses:
        "200":
          description: "Record updated successfully."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UpdateResult"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "ticketing"
      x-speakeasy-name-override: "update_ticket"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/ticketing/users:
    get:
      tags:
        - "Users"
      summary: "List Users"
      description: "Retrieve a paginated list of users."
      operationId: "ticketing_list_users"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,type,name,primary_email,primary_phone,username,active,first_name,last_name,customer_account_reference,created_at,updated_at"
        - name: "filter"
          in: "query"
          description: "Filter parameters that allow greater customisation of the list response"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            properties:
              "updated_after":
                type: "string"
                additionalProperties: false
                description: "Use a string with a date to only select results updated after that given date"
                nullable: true
                example: "2020-01-01T00:00:00.000Z"
            nullable: true
        - name: "page"
          in: "query"
          description: "The page number of the results to fetch"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
        - name: "page_size"
          in: "query"
          description: "The number of results per page (default value is 25)"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "next"
          in: "query"
          description: "The unified cursor"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "updated_after"
          in: "query"
          description: "Use a string with a date to only select results updated after that given date"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
            example: "2020-01-01T00:00:00.000Z"
      responses:
        "200":
          description: "The list of users was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TicketingUsersPaginated"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "ticketing"
      x-speakeasy-name-override: "list_users"
      x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "next", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.next"}}
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/ticketing/users/{id}:
    get:
      tags:
        - "Users"
      summary: "Get User"
      description: "Retrieve a single user by their identifier."
      operationId: "ticketing_get_user"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,type,name,primary_email,primary_phone,username,active,first_name,last_name,customer_account_reference,created_at,updated_at"
      responses:
        "200":
          description: "The user with the given identifier was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TicketingUserResult"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "ticketing"
      x-speakeasy-name-override: "get_user"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/ticketing/tickets/{id}/comments:
    get:
      tags:
        - "Tickets"
        - "Comments"
      summary: "List Comments"
      description: "Retrieve a paginated list of comments for a ticket."
      operationId: "ticketing_list_comments"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,ticket_id,remote_ticket_id,content,user_id,remote_user_id,internal,created_at,updated_at"
        - name: "filter"
          in: "query"
          description: "Filter parameters that allow greater customisation of the list response"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            properties:
              "updated_after":
                type: "string"
                additionalProperties: false
                description: "Use a string with a date to only select results updated after that given date"
                nullable: true
                example: "2020-01-01T00:00:00.000Z"
            nullable: true
        - name: "page"
          in: "query"
          description: "The page number of the results to fetch"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
        - name: "page_size"
          in: "query"
          description: "The number of results per page (default value is 25)"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "next"
          in: "query"
          description: "The unified cursor"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "updated_after"
          in: "query"
          description: "Use a string with a date to only select results updated after that given date"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
            example: "2020-01-01T00:00:00.000Z"
      responses:
        "200":
          description: "The list of comments was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TicketingCommentsPaginated"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "ticketing"
      x-speakeasy-name-override: "list_comments"
      x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "next", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.next"}}
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/ticketing/tickets/{id}/comments/{subResourceId}:
    get:
      tags:
        - "Tickets"
        - "Comments"
      summary: "Get Comment"
      description: "Retrieve a single comment by its identifier for a ticket."
      operationId: "ticketing_get_comment"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "subResourceId"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,ticket_id,remote_ticket_id,content,user_id,remote_user_id,internal,created_at,updated_at"
      responses:
        "200":
          description: "The comment with the given identifier was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TicketingCommentResult"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "ticketing"
      x-speakeasy-name-override: "get_comment"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/ticketing/tickets/{id}/attachments/{subResourceId}/download:
    get:
      tags:
        - "Tickets"
        - "Attachments"
      summary: "Download Attachment"
      description: "Download the attachment file from a ticket."
      operationId: "ticketing_download_ticketing_attachment"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "subResourceId"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "format"
          in: "query"
          description: "The format to download the file in"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "base64"
        - name: "export_format"
          in: "query"
          description: "The export format of the file"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "text/plain"
      responses:
        "200":
          description: "The document related to the application with the given identifiers was retrieved."
          content:
            "*/*":
              schema:
                type: "string"
                format: "binary"
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "ticketing"
      x-speakeasy-name-override: "download_ticketing_attachment"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/ticketing/tickets/{id}/attachments:
    get:
      tags:
        - "Tickets"
        - "Attachments"
      summary: "List Attachments"
      description: "Retrieve a paginated list of attachment details for a ticket."
      operationId: "ticketing_list_attachments"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,ticket_id,remote_ticket_id,user_id,remote_user_id,file_name,file_format,file_url,size,created_at,updated_at"
        - name: "filter"
          in: "query"
          description: "Filter parameters that allow greater customisation of the list response"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            properties:
              "updated_after":
                type: "string"
                additionalProperties: false
                description: "Use a string with a date to only select results updated after that given date"
                nullable: true
                example: "2020-01-01T00:00:00.000Z"
            nullable: true
        - name: "page"
          in: "query"
          description: "The page number of the results to fetch"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
        - name: "page_size"
          in: "query"
          description: "The number of results per page (default value is 25)"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "next"
          in: "query"
          description: "The unified cursor"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "updated_after"
          in: "query"
          description: "Use a string with a date to only select results updated after that given date"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
            example: "2020-01-01T00:00:00.000Z"
      responses:
        "200":
          description: "The list of attachments was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TicketingAttachmentsPaginated"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "ticketing"
      x-speakeasy-name-override: "list_attachments"
      x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "next", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.next"}}
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/ticketing/tickets/{id}/attachments/{subResourceId}:
    get:
      tags:
        - "Tickets"
        - "Attachments"
      summary: "Get Attachment"
      description: "Retrieve the details of a single attachment for a ticket."
      operationId: "ticketing_get_attachment"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "subResourceId"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,ticket_id,remote_ticket_id,user_id,remote_user_id,file_name,file_format,file_url,size,created_at,updated_at"
      responses:
        "200":
          description: "The attachment with the given identifier was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TicketingAttachmentResult"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "ticketing"
      x-speakeasy-name-override: "get_attachment"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/ticketing/ticket_types:
    get:
      tags:
        - "Ticket Types"
      summary: "List Ticket Types"
      description: "Retrieve a paginated list of all ticket types."
      operationId: "ticketing_list_ticket_types"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,name,parent_collection_id,remote_parent_collection_id"
        - name: "filter"
          in: "query"
          description: "Filter parameters that allow greater customisation of the list response"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            properties:
              "updated_after":
                type: "string"
                additionalProperties: false
                description: "Use a string with a date to only select results updated after that given date"
                nullable: true
                example: "2020-01-01T00:00:00.000Z"
            nullable: true
        - name: "page"
          in: "query"
          description: "The page number of the results to fetch"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
        - name: "page_size"
          in: "query"
          description: "The number of results per page (default value is 25)"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "next"
          in: "query"
          description: "The unified cursor"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "updated_after"
          in: "query"
          description: "Use a string with a date to only select results updated after that given date"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
            example: "2020-01-01T00:00:00.000Z"
      responses:
        "200":
          description: "The list of ticket types was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TicketingTicketTypePaginated"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "ticketing"
      x-speakeasy-name-override: "list_ticket_types"
      x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "next", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.next"}}
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/ticketing/ticket_types/{id}:
    get:
      tags:
        - "Ticket Types"
      summary: "Get Ticket Type"
      description: "Retrieve a single ticket type by its identifier."
      operationId: "ticketing_get_ticket_type"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,name,parent_collection_id,remote_parent_collection_id"
      responses:
        "200":
          description: "The ticket type with the given identifier was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TicketingTicketTypeResult"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "ticketing"
      x-speakeasy-name-override: "get_ticket_type"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/ticketing/collections:
    get:
      tags:
        - "Collections"
      summary: "List Collections"
      description: "Retrieve a paginated list of collections."
      operationId: "ticketing_list_collections"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,organization_id,remote_organization_id,parent_id,remote_parent_id,key,name,description,type,created_at,updated_at"
        - name: "filter"
          in: "query"
          description: "Ticketing Collections filters"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            properties:
              "updated_after":
                type: "string"
                additionalProperties: false
                description: "Use a string with a date to only select results updated after that given date"
                nullable: true
                example: "2020-01-01T00:00:00.000Z"
              "type":
                type: "string"
                enum:
                  - "project"
                  - "component"
                  - null
                description: "Filter collections by type"
                nullable: true
            nullable: true
        - name: "page"
          in: "query"
          description: "The page number of the results to fetch"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
        - name: "page_size"
          in: "query"
          description: "The number of results per page (default value is 25)"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "next"
          in: "query"
          description: "The unified cursor"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "updated_after"
          in: "query"
          description: "Use a string with a date to only select results updated after that given date"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
            example: "2020-01-01T00:00:00.000Z"
      responses:
        "200":
          description: "The list of collections was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TicketingCollectionsPaginated"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "ticketing"
      x-speakeasy-name-override: "list_collections"
      x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "next", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.next"}}
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/ticketing/collections/{id}:
    get:
      tags:
        - "Collections"
      summary: "Get Collection"
      description: "Retrieve a single collection by its identifier."
      operationId: "ticketing_get_collection"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,organization_id,remote_organization_id,parent_id,remote_parent_id,key,name,description,type,created_at,updated_at"
      responses:
        "200":
          description: "The collection with the given identifier was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TicketingCollectionResult"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "ticketing"
      x-speakeasy-name-override: "get_collection"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/ticketing/collections/{id}/ticket_types:
    get:
      tags:
        - "Collections"
        - "Ticket Types"
      summary: "List Collection Ticket Types"
      description: "Retrieve a paginated list of ticket types for a collection."
      operationId: "ticketing_list_collection_ticket_types"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,name,parent_collection_id,remote_parent_collection_id"
        - name: "filter"
          in: "query"
          description: "Filter parameters that allow greater customisation of the list response"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            properties:
              "updated_after":
                type: "string"
                additionalProperties: false
                description: "Use a string with a date to only select results updated after that given date"
                nullable: true
                example: "2020-01-01T00:00:00.000Z"
            nullable: true
        - name: "page"
          in: "query"
          description: "The page number of the results to fetch"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
        - name: "page_size"
          in: "query"
          description: "The number of results per page (default value is 25)"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "next"
          in: "query"
          description: "The unified cursor"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "updated_after"
          in: "query"
          description: "Use a string with a date to only select results updated after that given date"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
            example: "2020-01-01T00:00:00.000Z"
      responses:
        "200":
          description: "The list of collection ticket types was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TicketingTicketTypePaginated"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "ticketing"
      x-speakeasy-name-override: "list_collection_ticket_types"
      x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "next", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.next"}}
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/ticketing/tickets/{id}/statuses:
    get:
      tags:
        - "Tickets"
        - "Ticket Statuses"
      summary: "List Ticket Statuses"
      description: "Retrieve a paginated list of statuses for a ticket."
      operationId: "ticketing_list_ticket_statuses"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields to return in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "filter"
          in: "query"
          description: "Filter parameters that allow greater customisation of the list response"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            properties:
              "updated_after":
                type: "string"
                additionalProperties: false
                description: "Use a string with a date to only select results updated after that given date"
                nullable: true
                example: "2020-01-01T00:00:00.000Z"
            nullable: true
        - name: "page"
          in: "query"
          description: "The page number of the results to fetch"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
        - name: "page_size"
          in: "query"
          description: "The number of results per page (default value is 25)"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "next"
          in: "query"
          description: "The unified cursor"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "updated_after"
          in: "query"
          description: "Use a string with a date to only select results updated after that given date"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
            example: "2020-01-01T00:00:00.000Z"
      responses:
        "200":
          description: "The list of ticket statuses was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TicketingTicketStatusesPaginated"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "ticketing"
      x-speakeasy-name-override: "list_ticket_statuses"
      x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "next", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.next"}}
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/documents/files/{id}/download:
    get:
      tags:
        - "Files"
      summary: "Download File"
      operationId: "documents_download_file"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "x-stackone-api-session-token"
          in: "header"
          description: "The session token"
          required: false
          schema:
            type: "string"
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "format"
          in: "query"
          description: "The format to download the file in"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "base64"
        - name: "export_format"
          in: "query"
          description: "The export format of the file"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "text/plain"
      responses:
        "200":
          description: "The file with the given identifiers was retrieved."
          content:
            "*/*":
              schema:
                type: "string"
                format: "binary"
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "documents"
      x-speakeasy-name-override: "download_file"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/documents/files/upload:
    post:
      tags:
        - "Files"
      summary: "Upload File"
      operationId: "documents_upload_file"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "x-stackone-api-session-token"
          in: "header"
          description: "The session token"
          required: false
          schema:
            type: "string"
      requestBody:
        content:
          "application/json":
            schema: {"$ref": "#/components/schemas/UnifiedUploadRequestDto"}
        required: true
      responses:
        "201":
          description: "The file was uploaded."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/WriteResultApiModel"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "documents"
      x-speakeasy-name-override: "upload_file"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/documents/files:
    get:
      tags:
        - "Files"
      summary: "List Files"
      operationId: "documents_list_files"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "x-stackone-api-session-token"
          in: "header"
          description: "The session token"
          required: false
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,name,description,url,size,file_format,path,owner_id,remote_owner_id,folder_id,remote_folder_id,drive_id,remote_drive_id,export_formats,default_download_format,created_at,updated_at,has_content,has_children"
        - name: "filter"
          in: "query"
          description: "Documents Files Filter"
          required: false
          schema:
            type: "object"
            properties:
              "updated_after":
                type: "string"
                additionalProperties: false
                description: "Use a string with a date to only select results updated after that given date"
                nullable: true
                example: "2020-01-01T00:00:00.000Z"
            nullable: true
        - name: "page"
          in: "query"
          description: "The page number of the results to fetch"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
        - name: "page_size"
          in: "query"
          description: "The number of results per page (default value is 25)"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "next"
          in: "query"
          description: "The unified cursor"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "updated_after"
          in: "query"
          description: "Use a string with a date to only select results updated after that given date"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
            example: "2020-01-01T00:00:00.000Z"
      responses:
        "200":
          description: "The list of files was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/FilesPaginated"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "documents"
      x-speakeasy-name-override: "list_files"
      x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "next", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.next"}}
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/documents/files/{id}:
    get:
      tags:
        - "Files"
      summary: "Get File"
      operationId: "documents_get_file"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "x-stackone-api-session-token"
          in: "header"
          description: "The session token"
          required: false
          schema:
            type: "string"
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,name,description,url,size,file_format,path,owner_id,remote_owner_id,folder_id,remote_folder_id,drive_id,remote_drive_id,export_formats,default_download_format,created_at,updated_at,has_content,has_children"
      responses:
        "200":
          description: "The file with the given identifier was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/FileResult"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "documents"
      x-speakeasy-name-override: "get_file"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/documents/folders:
    get:
      tags:
        - "Folders"
      summary: "List Folders"
      operationId: "documents_list_folders"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,name,description,url,size,path,owner_id,remote_owner_id,parent_folder_id,remote_parent_folder_id,drive_id,remote_drive_id,created_at,updated_at,has_content,has_children,is_root"
        - name: "filter"
          in: "query"
          description: "Documents Folders Filter"
          required: false
          schema:
            type: "object"
            properties:
              "updated_after":
                type: "string"
                additionalProperties: false
                description: "Use a string with a date to only select results updated after that given date"
                nullable: true
                example: "2020-01-01T00:00:00.000Z"
            nullable: true
        - name: "page"
          in: "query"
          description: "The page number of the results to fetch"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
        - name: "page_size"
          in: "query"
          description: "The number of results per page (default value is 25)"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "next"
          in: "query"
          description: "The unified cursor"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "updated_after"
          in: "query"
          description: "Use a string with a date to only select results updated after that given date"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
            example: "2020-01-01T00:00:00.000Z"
      responses:
        "200":
          description: "The list of folders was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/FoldersPaginated"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "documents"
      x-speakeasy-name-override: "list_folders"
      x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "next", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.next"}}
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/documents/folders/{id}:
    get:
      tags:
        - "Folders"
      summary: "Get Folder"
      operationId: "documents_get_folder"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,name,description,url,size,path,owner_id,remote_owner_id,parent_folder_id,remote_parent_folder_id,drive_id,remote_drive_id,created_at,updated_at,has_content,has_children,is_root"
      responses:
        "200":
          description: "The folder with the given identifier was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/FolderResult"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "documents"
      x-speakeasy-name-override: "get_folder"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/documents/drives:
    get:
      tags:
        - "Drives"
      summary: "List Drives"
      operationId: "documents_list_drives"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,name,description,url,created_at,updated_at"
        - name: "filter"
          in: "query"
          description: "Filter parameters that allow greater customisation of the list response"
          required: false
          schema:
            type: "object"
            properties:
              "updated_after":
                type: "string"
                additionalProperties: false
                description: "Use a string with a date to only select results updated after that given date"
                nullable: true
                example: "2020-01-01T00:00:00.000Z"
            nullable: true
        - name: "page"
          in: "query"
          description: "The page number of the results to fetch"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
        - name: "page_size"
          in: "query"
          description: "The number of results per page (default value is 25)"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "next"
          in: "query"
          description: "The unified cursor"
          required: false
          schema:
            type: "string"
            nullable: true
        - name: "updated_after"
          in: "query"
          description: "Use a string with a date to only select results updated after that given date"
          required: false
          deprecated: true
          schema:
            type: "string"
            nullable: true
            example: "2020-01-01T00:00:00.000Z"
      responses:
        "200":
          description: "The list of drives was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/DrivesPaginated"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "documents"
      x-speakeasy-name-override: "list_drives"
      x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "next", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.next"}}
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
  /unified/documents/drives/{id}:
    get:
      tags:
        - "Drives"
      summary: "Get Drive"
      operationId: "documents_get_drive"
      parameters:
        - name: "x-account-id"
          in: "header"
          description: "The account identifier"
          required: true
          schema:
            type: "string"
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "raw"
          in: "query"
          description: "Indicates that the raw request result should be returned in addition to the mapped result (default value is false)"
          required: false
          schema:
            type: "boolean"
            nullable: true
        - name: "proxy"
          in: "query"
          description: "Query parameters that can be used to pass through parameters to the underlying provider request by surrounding them with 'proxy' key"
          required: false
          style: "deepObject"
          explode: true
          schema:
            type: "object"
            additionalProperties: true
            nullable: true
        - name: "fields"
          in: "query"
          description: "The comma separated list of fields that will be returned in the response (if empty, all fields are returned)"
          required: false
          schema:
            type: "string"
            nullable: true
            example: "id,remote_id,name,description,url,created_at,updated_at"
      responses:
        "200":
          description: "The drive with the given identifier was retrieved."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/DriveResult"}
        "400":
          description: "Invalid request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadRequestResponse"}
        "401":
          description: "Unauthorized access."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnauthorizedResponse"}
        "403":
          description: "Forbidden."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ForbiddenResponse"}
        "404":
          description: "Resource not found."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotFoundResponse"}
        "408":
          description: "The request has timed out."
          headers:
            "Retry-After":
              description: "A time in seconds after which the request can be retried."
              schema:
                type: "string"
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/RequestTimedOutResponse"}
        "409":
          description: "Conflict with current state."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/ConflictResponse"}
        "412":
          description: "Precondition failed: linked account belongs to a disabled integration."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/PreconditionFailedResponse"}
        "422":
          description: "Validation error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/UnprocessableEntityResponse"}
        "429":
          description: "Too many requests."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/TooManyRequestsResponse"}
        "500":
          description: "Server error while executing the request."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/InternalServerErrorResponse"}
        "501":
          description: "This functionality is not implemented."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/NotImplementedResponse"}
        "502":
          description: "Bad gateway error."
          content:
            "application/json":
              schema: {"$ref": "#/components/schemas/BadGatewayResponse"}
      security:
        - basic: []
      x-speakeasy-group: "documents"
      x-speakeasy-name-override: "get_drive"
      x-speakeasy-retries: {"statusCodes": [429, 408], "strategy": "backoff"}
components:
  schemas:
    "AdvancedLogRequestData":
      type: "object"
      properties:
        "id":
          type: "string"
          description: "The request ID"
          nullable: true
          example: "adbf752f-6457-4ddd-89b3-98ae2252b83b"
        "method":
          type: "string"
          description: "The request method"
          nullable: true
          example: "get"
        "headers":
          type: "object"
          additionalProperties: true
          nullable: true
          example: {"content-type": "application/json", "authorization": "Bearer token"}
        "url":
          allOf:
            - {"$ref": "#/components/schemas/AdvancedLogRequestDataUrl"}
          description: "The request URL data"
          nullable: true
        "body":
          oneOf:
            - type: "string"
            - type: "object"
            - type: "string"
              format: "binary"
            - type: "array"
              items:
                type: "integer"
                maximum: 255
                minimum: 0
                format: "int32"
            - type: "string"
              format: "byte"
          additionalProperties: true
          nullable: true
    "AdvancedLogRequestDataUrl":
      type: "object"
      properties:
        "url":
          type: "string"
          description: "The request URL"
          nullable: true
          example: "https://example.com/api/v1/resource"
        "hostname":
          type: "string"
          description: "The request URL hostname"
          nullable: true
          example: "example.com"
        "path":
          type: "string"
          description: "The request path"
          nullable: true
          example: "/api/v1/resource"
        "query_params":
          type: "object"
          additionalProperties: true
          description: "The request query parameters"
          nullable: true
          example: {"page": 1, "limit": 10}
    "AdvancedLogResponseData":
      type: "object"
      properties:
        "status_code":
          type: "number"
          description: "The response status code"
          nullable: true
          example: 200
        "headers":
          type: "object"
          additionalProperties: true
          nullable: true
          example: {"content-type": "application/json", "authorization": "Bearer token"}
        "body":
          oneOf:
            - type: "string"
            - type: "object"
            - type: "string"
              format: "binary"
            - type: "array"
              items:
                type: "integer"
                maximum: 255
                minimum: 0
                format: "int32"
            - type: "string"
              format: "byte"
          additionalProperties: true
          nullable: true
        "custom_mapping_errors":
          type: "array"
          items: {"$ref": "#/components/schemas/CustomMappingError"}
          description: "The custom mapping errors"
          nullable: true
        "provider_errors":
          type: "array"
          items: {"$ref": "#/components/schemas/ProviderError"}
          description: "The provider errors"
          nullable: true
    "BadGatewayResponse":
      type: "object"
      properties:
        "statusCode":
          type: "number"
          description: "HTTP status code"
          example: 502
        "message":
          type: "string"
          description: "Error message"
          example: "Bad Gateway"
        "timestamp":
          type: "string"
          format: "date-time"
          description: "Timestamp when the error occurred"
          example: "2023-05-30T00:00:00.000Z"
      required:
        - "statusCode"
        - "message"
        - "timestamp"
    "BadRequestResponse":
      type: "object"
      properties:
        "statusCode":
          type: "number"
          description: "HTTP status code"
          example: 400
        "message":
          type: "string"
          description: "Error message"
          example: "Bad Request"
        "timestamp":
          type: "string"
          format: "date-time"
          description: "Timestamp when the error occurred"
          example: "2023-05-30T00:00:00.000Z"
        "data":
          allOf:
            - {"$ref": "#/components/schemas/UnifiedError"}
          description: "Error details"
          nullable: true
        "provider_errors":
          type: "array"
          items: {"$ref": "#/components/schemas/ProviderError"}
          description: "List of provider-specific errors"
          nullable: true
      required:
        - "statusCode"
        - "message"
        - "timestamp"
    "ConflictResponse":
      type: "object"
      properties:
        "statusCode":
          type: "number"
          description: "HTTP status code"
          example: 409
        "message":
          type: "string"
          description: "Error message"
          example: "Conflict"
        "timestamp":
          type: "string"
          format: "date-time"
          description: "Timestamp when the error occurred"
          example: "2023-05-30T00:00:00.000Z"
      required:
        - "statusCode"
        - "message"
        - "timestamp"
    "ConnectorsMeta":
      type: "object"
      properties:
        "provider":
          type: "string"
          description: "The provider key"
          example: "hibob"
        "provider_name":
          type: "string"
          description: "The provider human-readable label"
          example: "Hibob"
        "category":
          type: "string"
          enum:
            - "ats"
            - "hris"
            - "hris-legacy"
            - "crm"
            - "iam"
            - "marketing"
            - "lms"
            - "stackone"
            - "documents"
            - "ticketing"
            - "screening"
            - "messaging"
            - "accounting"
          description: "The provider service category"
          example: "hris"
          x-speakeasy-unknown-values: "allow"
        "active":
          type: "boolean"
          description: "Whether this provider has been enabled on the integrations page for the current project"
          nullable: true
          example: true
        "models":
          type: "object"
          additionalProperties: true
          example: {"employees": {"create": {"apiPath": "/unified/hris/employees/:id", "input": {"defaultFields": [{"name": "first_name", "type": "string"}]}, "output": {"defaultFields": [{"name": "id", "type": "string"}]}}}, "time_off": {"get": {"apiPath": "/unified/hris/employees/:id/time_off/:id", "output": {"defaultFields": [{"name": "id", "type": "string"}]}}}}
        "resources":
          allOf:
            - {"$ref": "#/components/schemas/ConnectorsMetaResources"}
          description: "Resources for this provider, such as image assets"
          nullable: true
          example: {"images": {"logo_url": "https://app.stackone.com/assets/logos/hibob.png", "original_logo_horizontal_url": "https://app.stackone.com/assets/logos/original/hibob_horizontal.png"}}
      required:
        - "provider"
        - "provider_name"
        - "category"
        - "models"
    "ConnectorsMetaResources":
      type: "object"
      properties:
        "images":
          allOf:
            - {"$ref": "#/components/schemas/ConnectorsMetaResourcesImagesApiModel"}
          description: "Image assets for this provider"
          nullable: true
    "ConnectorsMetaResourcesImagesApiModel":
      type: "object"
      properties:
        "logo_url":
          type: "string"
          description: "URL of the square logo designed and used by StackOne for this provider"
          nullable: true
          example: "https://app.stackone.com/assets/logos/hibob.png"
        "original_logo_horizontal_url":
          type: "string"
          description: "URL of the original provider logo (with logo and/or name aligned horizontally)"
          nullable: true
          example: "https://app.stackone.com/assets/logos/source/hibob.png"
    "ConnectSession":
      type: "object"
      properties:
        "id":
          type: "number"
        "organization_id":
          type: "number"
        "project_id":
          type: "string"
        "categories":
          type: "array"
          items:
            type: "string"
            enum:
              - "ats"
              - "hris"
              - "hris-legacy"
              - "crm"
              - "iam"
              - "marketing"
              - "lms"
              - "stackone"
              - "documents"
              - "ticketing"
              - "screening"
              - "messaging"
              - "accounting"
              - null
          nullable: true
          example: ["ats", "hris", "hrisLegacy", "crm", "iam", "marketing", "lms", "stackOne", "documents", "ticketing", "screening", "messaging", "accounting"]
          x-speakeasy-unknown-values: "allow"
        "provider":
          type: "string"
          nullable: true
        "origin_owner_id":
          type: "string"
        "origin_owner_name":
          type: "string"
        "origin_username":
          type: "string"
          nullable: true
        "account_id":
          type: "string"
          nullable: true
        "label":
          type: "string"
          nullable: true
        "created_at":
          type: "string"
          format: "date-time"
        "metadata":
          type: "object"
          description: "Arbitrary set of key and values defined during the session token creation. This can be used to tag an account (eg. based on their pricing plan)"
          nullable: true
        "external_trigger_token":
          type: "string"
          description: "External trigger token to be used to trigger actions on the account"
          nullable: true
          example: "f0bc3d88-2178-5423-8c81-b81d6c9da824"
        "type":
          type: "string"
          enum:
            - "production"
            - "test"
            - "unmapped_value"
            - null
          description: "The connect session account type"
          nullable: true
          example: ["PRODUCTION", "TEST"]
          x-speakeasy-unknown-values: "allow"
      required:
        - "id"
        - "organization_id"
        - "project_id"
        - "origin_owner_id"
        - "origin_owner_name"
        - "created_at"
    "ConnectSessionAuthenticate":
      type: "object"
      properties:
        "token":
          type: "string"
          description: "The token to authenticate with"
      required:
        - "token"
    "ConnectSessionCreate":
      type: "object"
      properties:
        "categories":
          type: "array"
          items:
            type: "string"
            enum:
              - "ats"
              - "hris"
              - "hris-legacy"
              - "crm"
              - "iam"
              - "marketing"
              - "lms"
              - "stackone"
              - "documents"
              - "ticketing"
              - "screening"
              - "messaging"
              - "accounting"
              - null
          description: "The categories of the provider to connect to"
          nullable: true
          example: ["ats", "hris", "hrisLegacy", "crm", "iam", "marketing", "lms", "stackOne", "documents", "ticketing", "screening", "messaging", "accounting"]
          x-speakeasy-unknown-values: "allow"
        "provider":
          type: "string"
          description: "The provider to connect to"
          nullable: true
        "provider_version":
          type: "string"
          description: "The provider version to connect to"
          nullable: true
        "origin_owner_id":
          type: "string"
          description: "The origin owner identifier"
        "origin_owner_name":
          type: "string"
          description: "The origin owner name"
        "origin_username":
          type: "string"
          description: "The origin username"
          nullable: true
        "account_id":
          type: "string"
          description: "The unique identifier for the account associated with this connect session. When this field is present, the hub will launch in edit mode using the retrieved token."
          nullable: true
        "expires_in":
          type: "number"
          description: "How long the session should be valid for in seconds"
          default: 1800
          nullable: true
        "metadata":
          type: "object"
          description: "The metadata for the connection"
          nullable: true
        "multiple":
          type: "boolean"
          description: "If set, this connect session will allow creation of multiple accounts with the same origin owner id and provider. Has no effect if account_id is set."
          default: false
          nullable: true
        "label":
          type: "string"
          description: "The label to be applied to the account associated with this connect session."
          nullable: true
        "type":
          type: "string"
          enum:
            - "production"
            - "test"
            - null
          description: "The connect session account type"
          default: "production"
          nullable: true
          example: ["PRODUCTION", "TEST"]
          x-speakeasy-unknown-values: "allow"
      required:
        - "origin_owner_id"
        - "origin_owner_name"
    "ConnectSessionTokenAuthLink":
      type: "object"
      properties:
        "id":
          type: "number"
        "organization_id":
          type: "number"
        "project_id":
          type: "string"
        "categories":
          type: "array"
          items:
            type: "string"
            enum:
              - "ats"
              - "hris"
              - "hris-legacy"
              - "crm"
              - "iam"
              - "marketing"
              - "lms"
              - "stackone"
              - "documents"
              - "ticketing"
              - "screening"
              - "messaging"
              - "accounting"
              - null
          nullable: true
          example: ["ats", "hris", "hrisLegacy", "crm", "iam", "marketing", "lms", "stackOne", "documents", "ticketing", "screening", "messaging", "accounting"]
          x-speakeasy-unknown-values: "allow"
        "provider":
          type: "string"
          nullable: true
        "origin_owner_id":
          type: "string"
        "origin_owner_name":
          type: "string"
        "origin_username":
          type: "string"
          nullable: true
        "account_id":
          type: "string"
          nullable: true
        "label":
          type: "string"
          nullable: true
        "created_at":
          type: "string"
          format: "date-time"
        "metadata":
          type: "object"
          description: "Arbitrary set of key and values defined during the session token creation. This can be used to tag an account (eg. based on their pricing plan)"
          nullable: true
        "external_trigger_token":
          type: "string"
          description: "External trigger token to be used to trigger actions on the account"
          nullable: true
          example: "f0bc3d88-2178-5423-8c81-b81d6c9da824"
        "type":
          type: "string"
          enum:
            - "production"
            - "test"
            - "unmapped_value"
            - null
          description: "The connect session account type"
          nullable: true
          example: ["PRODUCTION", "TEST"]
          x-speakeasy-unknown-values: "allow"
        "token":
          type: "string"
        "auth_link_url":
          type: "string"
      required:
        - "id"
        - "organization_id"
        - "project_id"
        - "origin_owner_id"
        - "origin_owner_name"
        - "created_at"
        - "token"
        - "auth_link_url"
    "CustomMappingError":
      type: "object"
      properties:
        "id":
          type: "string"
          description: "The custom mapping identifier"
          nullable: true
          example: "adbf752f-6457-4ddd-89b3-98ae2252b83b"
        "message":
          type: "string"
          description: "The error message"
          nullable: true
          example: "Invalid value"
        "targetField":
          type: "string"
          description: "The target field where the error occurred"
          nullable: true
          example: "first_name"
    "ForbiddenResponse":
      type: "object"
      properties:
        "statusCode":
          type: "number"
          description: "HTTP status code"
          example: 403
        "message":
          type: "string"
          description: "Error message"
          example: "Forbidden resource"
        "timestamp":
          type: "string"
          format: "date-time"
          description: "Timestamp when the error occurred"
          example: "2023-05-30T00:00:00.000Z"
      required:
        - "statusCode"
        - "message"
        - "timestamp"
    "InternalServerErrorResponse":
      type: "object"
      properties:
        "statusCode":
          type: "number"
          description: "HTTP status code"
          example: 500
        "message":
          type: "string"
          description: "Error message"
          example: "Internal server error"
        "timestamp":
          type: "string"
          format: "date-time"
          description: "Timestamp when the error occurred"
          example: "2023-05-30T00:00:00.000Z"
      required:
        - "statusCode"
        - "message"
        - "timestamp"
    "LinkedAccount":
      type: "object"
      properties:
        "id":
          type: "string"
        "provider":
          type: "string"
        "provider_name":
          type: "string"
          nullable: true
        "status":
          type: "string"
          enum:
            - "active"
            - "inactive"
            - "error"
          x-speakeasy-unknown-values: "allow"
        "status_reasons":
          type: "array"
          items: {"$ref": "#/components/schemas/StatusReason"}
          nullable: true
        "origin_owner_id":
          type: "string"
        "origin_owner_name":
          type: "string"
        "origin_username":
          type: "string"
          nullable: true
        "credentials":
          type: "object"
          nullable: true
        "setup_information":
          type: "object"
          nullable: true
        "label":
          type: "string"
          nullable: true
        "created_at":
          type: "string"
          format: "date-time"
        "updated_at":
          type: "string"
          format: "date-time"
        "type":
          type: "string"
          enum:
            - "production"
            - "test"
            - "unmapped_value"
            - null
          description: "The account type"
          nullable: true
          example: ["PRODUCTION", "TEST"]
          x-speakeasy-unknown-values: "allow"
      required:
        - "id"
        - "provider"
        - "status"
        - "origin_owner_id"
        - "origin_owner_name"
        - "created_at"
        - "updated_at"
    "LinkedAccountMeta":
      type: "object"
      properties:
        "provider":
          type: "string"
        "category":
          type: "string"
          enum:
            - "ats"
            - "hris"
            - "hris-legacy"
            - "crm"
            - "iam"
            - "marketing"
            - "lms"
            - "stackone"
            - "documents"
            - "ticketing"
            - "screening"
            - "messaging"
            - "accounting"
          x-speakeasy-unknown-values: "allow"
        "models":
          type: "object"
          additionalProperties: true
      required:
        - "provider"
        - "category"
        - "models"
    "NotFoundResponse":
      type: "object"
      properties:
        "statusCode":
          type: "number"
          description: "HTTP status code"
          example: 404
        "message":
          type: "string"
          description: "Error message"
          example: "Not Found"
        "timestamp":
          type: "string"
          format: "date-time"
          description: "Timestamp when the error occurred"
          example: "2023-05-30T00:00:00.000Z"
      required:
        - "statusCode"
        - "message"
        - "timestamp"
    "NotImplementedResponse":
      type: "object"
      properties:
        "statusCode":
          type: "number"
          description: "HTTP status code"
          example: 501
        "message":
          type: "string"
          description: "Error message"
          example: "Not Implemented"
        "timestamp":
          type: "string"
          format: "date-time"
          description: "Timestamp when the error occurred"
          example: "2023-05-30T00:00:00.000Z"
      required:
        - "statusCode"
        - "message"
        - "timestamp"
    "PatchAccountExternalDto":
      type: "object"
      properties:
        "provider":
          type: "string"
          nullable: true
        "origin_owner_id":
          type: "string"
          nullable: true
        "origin_owner_name":
          type: "string"
          nullable: true
        "origin_username":
          type: "string"
          nullable: true
        "credentials":
          type: "object"
          additionalProperties: false
          nullable: true
        "setup_information":
          type: "object"
          additionalProperties: false
          nullable: true
        "secrets":
          type: "object"
          additionalProperties: false
          nullable: true
        "authentication_config_key":
          type: "string"
          nullable: true
        "environment":
          type: "string"
          nullable: true
        "label":
          type: "object"
          nullable: true
        "metadata":
          type: "object"
          additionalProperties: false
          nullable: true
        "type":
          type: "string"
          enum:
            - "production"
            - "test"
            - null
          description: "The account type"
          default: "production"
          nullable: true
          example: ["PRODUCTION", "TEST"]
          x-speakeasy-unknown-values: "allow"
    "PreconditionFailedResponse":
      type: "object"
      properties:
        "statusCode":
          type: "number"
          description: "HTTP status code"
          example: 412
        "message":
          type: "string"
          description: "Error message"
          example: "Precondition failed"
        "timestamp":
          type: "string"
          format: "date-time"
          description: "Timestamp when the error occurred"
          example: "2023-05-30T00:00:00.000Z"
      required:
        - "statusCode"
        - "message"
        - "timestamp"
    "ProviderError":
      type: "object"
      properties:
        "status":
          type: "number"
          description: "HTTP status code of the provider error"
          nullable: true
          example: 400
        "url":
          type: "string"
          description: "URL that caused the error"
          nullable: true
          example: "https://api.provider.com/v1/resource"
        "raw":
          type: "object"
          description: "Raw error response from the provider"
          nullable: true
          example: {"message": "Invalid input parameters"}
        "headers":
          type: "object"
          description: "Response headers"
          nullable: true
          example: {"content-type": "application/json", "x-request-id": "5678c28b211dace4e0a0f9171e6b88c5"}
    "ProxyRequestBody":
      type: "object"
      properties:
        "url":
          type: "string"
          description: "The base url of the request"
          nullable: true
          example: "https://api.sample-integration.com/v1"
        "method":
          type: "string"
          enum:
            - "get"
            - "post"
            - "put"
            - "delete"
            - "patch"
            - null
          description: "The method of the request"
          default: "get"
          nullable: true
          x-speakeasy-unknown-values: "allow"
        "path":
          type: "string"
          description: "The path of the request including any query paramters"
          nullable: true
          example: "/employees/directory"
        "headers":
          type: "object"
          additionalProperties: true
          description: "The headers to send in the request"
          nullable: true
          example: {"Content-Type": "application/json"}
        "body":
          type: "object"
          additionalProperties: true
          description: "The body of the request"
          nullable: true
    "RequestTimedOutResponse":
      type: "object"
      properties:
        "statusCode":
          type: "number"
          description: "HTTP status code"
          example: 408
        "message":
          type: "string"
          description: "Error message"
          example: "Request timed out"
        "timestamp":
          type: "string"
          format: "date-time"
          description: "Timestamp when the error occurred"
          example: "2023-05-30T00:00:00.000Z"
      required:
        - "statusCode"
        - "message"
        - "timestamp"
    "StatusReason":
      type: "object"
      properties:
        "code":
          type: "string"
          nullable: true
        "description":
          type: "string"
          nullable: true
        "timestamp":
          type: "string"
          format: "date-time"
      required:
        - "timestamp"
    "StepLog":
      type: "object"
      properties:
        "request_id":
          type: "string"
          description: "The request ID"
          nullable: true
          example: "adbf752f-6457-4ddd-89b3-98ae2252b83b"
        "start_time":
          type: "string"
          format: "date-time"
          description: "The request start time ISO8601 date string"
          nullable: true
          example: "2021-01-01T00:00:00Z"
        "end_time":
          type: "string"
          format: "date-time"
          description: "The request end time ISO8601 date string"
          nullable: true
          example: "2021-01-01T00:00:00Z"
        "account_id":
          type: "string"
          description: "The account ID of the request"
          nullable: true
          example: "45355976281015164504"
        "project_id":
          type: "string"
          description: "The project ID of the request"
          nullable: true
          example: "dev-project-68574"
        "http_method":
          type: "string"
          description: "The requested HTTP method"
          nullable: true
          example: "get"
        "path":
          type: "string"
          description: "The requested path"
          nullable: true
          example: "/unified/hris/employees"
        "url":
          type: "string"
          description: "The requested URL"
          nullable: true
          example: "https://api.stackone.com/unified/hris/employees?raw=false"
        "status":
          type: "number"
          description: "The requests response status code"
          nullable: true
          example: 200
        "duration":
          type: "number"
          description: "The request duration in milliseconds"
          nullable: true
          example: 356
        "success":
          type: "boolean"
          description: "The request success flag"
          nullable: true
          example: true
        "provider":
          type: "string"
          description: "The requested provider"
          nullable: true
          example: "planday"
        "service":
          type: "string"
          description: "The requested service"
          nullable: true
          example: "hris"
        "resource":
          type: "string"
          description: "The requested resource"
          nullable: true
          example: "employees"
        "child_resource":
          type: "string"
          description: "The requested child resource"
          nullable: true
          example: "time-off"
        "sub_resource":
          type: "string"
          description: "The requested sub resource"
          nullable: true
          example: "documents"
        "action":
          type: "string"
          description: "The requested action"
          nullable: true
          example: "download"
        "is_worker":
          type: "boolean"
          description: "The asynchronous worker flag"
          nullable: true
          example: false
        "id":
          type: "string"
          description: "The provider request ID"
          nullable: true
          example: "adbf752f-6457-4ddd-89b3-98ae2252b83b"
        "request":
          allOf:
            - {"$ref": "#/components/schemas/AdvancedLogRequestData"}
          description: "The advanced log request data"
          nullable: true
        "response":
          allOf:
            - {"$ref": "#/components/schemas/AdvancedLogResponseData"}
          description: "The advanced log response data"
          nullable: true
    "StepLogPartial":
      type: "object"
      properties:
        "request_id":
          type: "string"
          description: "The request ID"
          nullable: true
          example: "adbf752f-6457-4ddd-89b3-98ae2252b83b"
        "start_time":
          type: "string"
          format: "date-time"
          description: "The request start time ISO8601 date string"
          nullable: true
          example: "2021-01-01T00:00:00Z"
        "end_time":
          type: "string"
          format: "date-time"
          description: "The request end time ISO8601 date string"
          nullable: true
          example: "2021-01-01T00:00:00Z"
        "account_id":
          type: "string"
          description: "The account ID of the request"
          nullable: true
          example: "45355976281015164504"
        "project_id":
          type: "string"
          description: "The project ID of the request"
          nullable: true
          example: "dev-project-68574"
        "http_method":
          type: "string"
          description: "The requested HTTP method"
          nullable: true
          example: "get"
        "path":
          type: "string"
          description: "The requested path"
          nullable: true
          example: "/unified/hris/employees"
        "url":
          type: "string"
          description: "The requested URL"
          nullable: true
          example: "https://api.stackone.com/unified/hris/employees?raw=false"
        "status":
          type: "number"
          description: "The requests response status code"
          nullable: true
          example: 200
        "duration":
          type: "number"
          description: "The request duration in milliseconds"
          nullable: true
          example: 356
        "success":
          type: "boolean"
          description: "The request success flag"
          nullable: true
          example: true
        "provider":
          type: "string"
          description: "The requested provider"
          nullable: true
          example: "planday"
        "service":
          type: "string"
          description: "The requested service"
          nullable: true
          example: "hris"
        "resource":
          type: "string"
          description: "The requested resource"
          nullable: true
          example: "employees"
        "child_resource":
          type: "string"
          description: "The requested child resource"
          nullable: true
          example: "time-off"
        "sub_resource":
          type: "string"
          description: "The requested sub resource"
          nullable: true
          example: "documents"
        "action":
          type: "string"
          description: "The requested action"
          nullable: true
          example: "download"
        "is_worker":
          type: "boolean"
          description: "The asynchronous worker flag"
          nullable: true
          example: false
        "id":
          type: "string"
          description: "The provider request ID"
          nullable: true
          example: "adbf752f-6457-4ddd-89b3-98ae2252b83b"
    "StepLogsPaginated":
      type: "object"
      properties:
        "next":
          type: "string"
          nullable: true
        "data":
          type: "array"
          items: {"$ref": "#/components/schemas/StepLogPartial"}
      required:
        - "data"
    "TooManyRequestsResponse":
      type: "object"
      properties:
        "statusCode":
          type: "number"
          description: "HTTP status code"
          example: 429
        "message":
          type: "string"
          description: "Error message"
          example: "Too many requests"
        "timestamp":
          type: "string"
          format: "date-time"
          description: "Timestamp when the error occurred"
          example: "2023-05-30T00:00:00.000Z"
      required:
        - "statusCode"
        - "message"
        - "timestamp"
    "UnauthorizedResponse":
      type: "object"
      properties:
        "statusCode":
          type: "number"
          description: "HTTP status code"
          example: 401
        "message":
          type: "string"
          description: "Error message"
          example: "Unauthorized"
        "timestamp":
          type: "string"
          format: "date-time"
          description: "Timestamp when the error occurred"
          example: "2023-05-30T00:00:00.000Z"
      required:
        - "statusCode"
        - "message"
        - "timestamp"
    "UnifiedError":
      type: "object"
      properties:
        "statusCode":
          type: "number"
          description: "HTTP status code"
          nullable: true
          example: 400
        "message":
          type: "string"
          description: "Error message"
          nullable: true
          example: "Bad Request"
        "headers":
          type: "object"
          description: "Response headers"
          nullable: true
          example: {"content-type": "application/json", "x-request-id": "5678c28b211dace4e0a0f9171e6b88c5"}
    "UnifiedLogResult":
      type: "object"
      properties:
        "data": {"$ref": "#/components/schemas/UnifiedLogs"}
      required:
        - "data"
    "UnifiedLogs":
      type: "object"
      properties:
        "request_id":
          type: "string"
          description: "The request ID"
          nullable: true
          example: "adbf752f-6457-4ddd-89b3-98ae2252b83b"
        "event_datetime":
          type: "string"
          format: "date-time"
          description: "The event ISO8601 date string"
          nullable: true
          example: "2021-01-01T00:00:00Z"
        "start_time":
          type: "string"
          format: "date-time"
          description: "The request start time ISO8601 date string"
          nullable: true
          example: "2021-01-01T00:00:00Z"
        "end_time":
          type: "string"
          format: "date-time"
          description: "The request end time ISO8601 date string"
          nullable: true
          example: "2021-01-01T00:00:00Z"
        "account_id":
          type: "string"
          description: "The account ID of the request"
          nullable: true
          example: "45355976281015164504"
        "project_id":
          type: "string"
          description: "The project ID of the request"
          nullable: true
          example: "dev-project-68574"
        "http_method":
          type: "string"
          description: "The requested HTTP method"
          nullable: true
          example: "get"
        "path":
          type: "string"
          description: "The requested path"
          nullable: true
          example: "/unified/hris/employees"
        "url":
          type: "string"
          description: "The requested URL"
          nullable: true
          example: "https://api.stackone.com/unified/hris/employees?raw=false"
        "status":
          type: "number"
          description: "The requests response status code"
          nullable: true
          example: 200
        "duration":
          type: "number"
          description: "The request duration in milliseconds"
          nullable: true
          example: 356
        "success":
          type: "boolean"
          description: "The request success flag"
          nullable: true
          example: true
        "provider":
          type: "string"
          description: "The requested provider"
          nullable: true
          example: "planday"
        "service":
          type: "string"
          description: "The requested service"
          nullable: true
          example: "hris"
        "resource":
          type: "string"
          description: "The requested resource"
          nullable: true
          example: "employees"
        "child_resource":
          type: "string"
          description: "The requested child resource"
          nullable: true
          example: "time-off"
        "sub_resource":
          type: "string"
          description: "The requested sub resource"
          nullable: true
          example: "documents"
        "action":
          type: "string"
          description: "The requested action"
          nullable: true
          example: "download"
        "is_worker":
          type: "boolean"
          description: "The asynchronous worker flag"
          nullable: true
          example: false
        "source_type":
          type: "string"
          description: "The requests source type"
          nullable: true
          example: "DASHBOARD"
        "source_value":
          type: "string"
          description: "The requests source value"
          nullable: true
          example: "ACCOUNT_TESTER"
        "source_id":
          type: "string"
          description: "The requests source ID"
          nullable: true
          example: "1234567890"
        "request":
          allOf:
            - {"$ref": "#/components/schemas/AdvancedLogRequestData"}
          description: "The advanced log request data"
          nullable: true
        "response":
          allOf:
            - {"$ref": "#/components/schemas/AdvancedLogResponseData"}
          description: "The advanced log response data"
          nullable: true
        "step_requests":
          type: "array"
          items: {"$ref": "#/components/schemas/StepLog"}
          description: "The list of provider requests"
          nullable: true
    "UnifiedLogsPaginated":
      type: "object"
      properties:
        "next":
          type: "string"
          nullable: true
        "data":
          type: "array"
          items: {"$ref": "#/components/schemas/UnifiedLogsPartial"}
      required:
        - "data"
    "UnifiedLogsPartial":
      type: "object"
      properties:
        "request_id":
          type: "string"
          description: "The request ID"
          nullable: true
          example: "adbf752f-6457-4ddd-89b3-98ae2252b83b"
        "event_datetime":
          type: "string"
          format: "date-time"
          description: "The event ISO8601 date string"
          nullable: true
          example: "2021-01-01T00:00:00Z"
        "start_time":
          type: "string"
          format: "date-time"
          description: "The request start time ISO8601 date string"
          nullable: true
          example: "2021-01-01T00:00:00Z"
        "end_time":
          type: "string"
          format: "date-time"
          description: "The request end time ISO8601 date string"
          nullable: true
          example: "2021-01-01T00:00:00Z"
        "account_id":
          type: "string"
          description: "The account ID of the request"
          nullable: true
          example: "45355976281015164504"
        "project_id":
          type: "string"
          description: "The project ID of the request"
          nullable: true
          example: "dev-project-68574"
        "http_method":
          type: "string"
          description: "The requested HTTP method"
          nullable: true
          example: "get"
        "path":
          type: "string"
          description: "The requested path"
          nullable: true
          example: "/unified/hris/employees"
        "url":
          type: "string"
          description: "The requested URL"
          nullable: true
          example: "https://api.stackone.com/unified/hris/employees?raw=false"
        "status":
          type: "number"
          description: "The requests response status code"
          nullable: true
          example: 200
        "duration":
          type: "number"
          description: "The request duration in milliseconds"
          nullable: true
          example: 356
        "success":
          type: "boolean"
          description: "The request success flag"
          nullable: true
          example: true
        "provider":
          type: "string"
          description: "The requested provider"
          nullable: true
          example: "planday"
        "service":
          type: "string"
          description: "The requested service"
          nullable: true
          example: "hris"
        "resource":
          type: "string"
          description: "The requested resource"
          nullable: true
          example: "employees"
        "child_resource":
          type: "string"
          description: "The requested child resource"
          nullable: true
          example: "time-off"
        "sub_resource":
          type: "string"
          description: "The requested sub resource"
          nullable: true
          example: "documents"
        "action":
          type: "string"
          description: "The requested action"
          nullable: true
          example: "download"
        "is_worker":
          type: "boolean"
          description: "The asynchronous worker flag"
          nullable: true
          example: false
        "source_type":
          type: "string"
          description: "The requests source type"
          nullable: true
          example: "DASHBOARD"
        "source_value":
          type: "string"
          description: "The requests source value"
          nullable: true
          example: "ACCOUNT_TESTER"
        "source_id":
          type: "string"
          description: "The requests source ID"
          nullable: true
          example: "1234567890"
        "step_requests":
          type: "array"
          items: {"$ref": "#/components/schemas/StepLogPartial"}
          description: "The list of provider requests"
          nullable: true
    "UnprocessableEntityResponse":
      type: "object"
      properties:
        "statusCode":
          type: "number"
          description: "HTTP status code"
          example: 422
        "message":
          type: "string"
          description: "Error message"
          example: "Unprocessable Entity"
        "timestamp":
          type: "string"
          format: "date-time"
          description: "Timestamp when the error occurred"
          example: "2023-05-30T00:00:00.000Z"
      required:
        - "statusCode"
        - "message"
        - "timestamp"
    BatchResultApiModel:
      type: "object"
      properties:
        "statusCode":
          type: "number"
          nullable: true
          example: 202
        "message":
          type: "string"
          nullable: true
          example: "Batch operation accepted"
        "timestamp":
          type: "string"
          format: "date-time"
          nullable: true
          example: "2021-01-01T01:01:01.000Z"
        "errors":
          type: "array"
          items:
            type: "array"
            items:
              type: "string"
          nullable: true
          example: [["Missing field: name"], [], []]
    BenefitsTypeEnum:
      type: "object"
      properties:
        "value":
          type: "string"
          enum:
            - "retirement_savings"
            - "health_savings"
            - "other"
            - "health_insurance"
            - "insurance"
            - "unmapped_value"
            - null
          description: "The type of the benefit"
          nullable: true
          x-speakeasy-unknown-values: "allow"
        "source_value":
          oneOf:
            - type: "string"
            - type: "number"
            - type: "boolean"
            - type: "object"
            - type: "array"
              items: {}
          nullable: true
    CompaniesPaginated:
      type: "object"
      properties:
        "next_page":
          type: "string"
          nullable: true
          deprecated: true
        "next":
          type: "string"
          nullable: true
        "data":
          type: "array"
          items: {"$ref": "#/components/schemas/Company"}
        "raw":
          type: "array"
          items: {"$ref": "#/components/schemas/RawResponse"}
          nullable: true
      required:
        - "data"
    Company:
      type: "object"
      properties:
        "id":
          type: "string"
          description: "Unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "remote_id":
          type: "string"
          description: "Provider's unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "unified_custom_fields":
          type: "object"
          additionalProperties: true
          description: "Custom Unified Fields configured in your StackOne project"
          nullable: true
          example: {"my_project_custom_field_1": "REF-1236", "my_project_custom_field_2": "some other value"}
        "name":
          type: "string"
          description: "The name of the company"
          nullable: true
          example: "StackOne Technologies PLC"
        "full_name":
          type: "string"
          description: "The full name of the company"
          nullable: true
          example: "American Express Company"
        "display_name":
          type: "string"
          description: "The display name of the company"
          nullable: true
          example: "StackOne"
        "created_at":
          type: "string"
          format: "date-time"
          description: "The created_at date"
          nullable: true
          example: "2023-02-23T00:00:00.000Z"
        "updated_at":
          type: "string"
          format: "date-time"
          description: "The updated_at date"
          nullable: true
          example: "2024-02-23T00:00:00.000Z"
    CompanyResult:
      type: "object"
      properties:
        "data": {"$ref": "#/components/schemas/Company"}
        "raw":
          type: "array"
          items: {"$ref": "#/components/schemas/RawResponse"}
          nullable: true
      required:
        - "data"
    CompleteTaskRequestDto:
      type: "object"
      properties:
        "comment":
          type: "string"
          description: "Comment or note about the task completion"
          nullable: true
          example: "All required documents have been submitted"
    ConfidentialEnumApiModel:
      type: "object"
      properties:
        "value":
          type: "string"
          enum:
            - "true"
            - "false"
            - "unmapped_value"
            - null
          description: "Whether the file is confidential or not"
          nullable: true
          example: "true"
          x-speakeasy-unknown-values: "allow"
        "source_value":
          oneOf:
            - type: "string"
            - type: "number"
            - type: "boolean"
            - type: "object"
            - type: "array"
              items: {}
          nullable: true
          example: "public"
    Content:
      type: "object"
      properties:
        "id":
          type: "string"
          description: "Unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "remote_id":
          type: "string"
          description: "Provider's unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "unified_custom_fields":
          type: "object"
          additionalProperties: true
          description: "Custom Unified Fields configured in your StackOne project"
          nullable: true
          example: {"my_project_custom_field_1": "REF-1236", "my_project_custom_field_2": "some other value"}
        "external_reference":
          type: "string"
          description: "The external ID associated with this content"
          nullable: true
          example: "SOFTWARE-ENG-LV1-TRAINING-VIDEO-1"
        "course_ids":
          type: "array"
          items:
            type: "string"
          description: "The parent ID/IDs associated with this content"
          nullable: true
          example: ["16873-SOFTWARE-ENG-COURSE", "16874-SOFTWARE-ENG-COURSE"]
        "remote_course_ids":
          type: "array"
          items:
            type: "string"
          description: "Provider's unique identifier of the parent course ID associated with this content"
          nullable: true
          example: ["e3cb75bf-aa84-466e-a6c1-b8322b257a48", "e3cb75bf-aa84-466e-a6c1-b8322b257a49"]
        "title":
          type: "string"
          description: "The title of the content"
          nullable: true
          example: "Software Engineer Lv 1"
        "description":
          type: "string"
          description: "The description of the content"
          nullable: true
          example: "This video acts as learning content for software engineers."
        "languages":
          type: "array"
          items: {"$ref": "#/components/schemas/LanguageEnum"}
          description: "The languages associated with this content"
          nullable: true
        "content_url":
          type: "string"
          description: "The external URL of the content"
          nullable: true
          example: "https://www.youtube.com/watch?v=16873"
        "mobile_launch_content_url":
          type: "string"
          description: "The mobile friendly URL of the content"
          nullable: true
          example: "https://www.mobile.youtube.com/watch?v=16873"
        "content_type":
          allOf:
            - {"$ref": "#/components/schemas/ContentTypeEnum"}
          description: "The type of content"
          nullable: true
        "cover_url":
          type: "string"
          description: "The URL of the thumbnail image associated with the content."
          nullable: true
          example: "https://www.googledrive.com/?v=16873"
        "active":
          oneOf:
            - type: "boolean"
            - type: "string"
              enum:
                - "true"
                - "false"
          description: "Whether the content is active and available for users."
          nullable: true
          example: true
        "duration":
          type: "string"
          format: "string"
          description: "The duration of the content following the ISO8601 standard. If duration_unit is applicable we will derive this from the smallest unit given in the duration string or the minimum unit accepted by the provider."
          nullable: true
          example: "P3Y6M4DT12H30M5S"
        "categories":
          type: "array"
          items: {"$ref": "#/components/schemas/Category"}
          description: "The categories associated with this content"
          nullable: true
          example: [{"id": "12345", "name": "Technology"}]
        "skills":
          type: "array"
          items: {"$ref": "#/components/schemas/Skills"}
          description: "The skills associated with this course"
          nullable: true
          example: [{"id": "12345", "name": "Sales Techniques"}]
        "order":
          type: "number"
          format: "number"
          description: "The order of the individual content within a content grouping. This is not applicable for pushing individual content."
          nullable: true
          example: 1
        "provider":
          type: "string"
          description: "The name of the content provider"
          nullable: true
          example: "Content Provider"
        "short_description":
          type: "string"
          description: "A short description or summary for the content"
          nullable: true
          example: "This course is a valuable resource and acts as learning content for..."
          deprecated: true
        "localizations":
          type: "array"
          items: {"$ref": "#/components/schemas/LocalizationModel"}
          description: "Localised content information"
          nullable: true
          example: [{"title": "Software Engineer Lv 1", "description": "This video acts as learning content for software engineers.", "languages": {"value": "en-US", "source_value": "string"}}]
        "tags":
          type: "array"
          items:
            type: "string"
          description: "A list of tags associated with the content"
          nullable: true
          example: ["Sales Techniques", "Customer Service"]
        "authors":
          type: "array"
          items: {"$ref": "#/components/schemas/AuthorModel"}
          description: "The authors of the content"
          nullable: true
          example: [{"id": "123", "name": "John Doe"}]
        "updated_at":
          type: "string"
          format: "date-time"
          description: "The date on which the content was last updated."
          nullable: true
          example: "2021-07-21T14:00:00.000Z"
        "created_at":
          type: "string"
          format: "date-time"
          description: "The date on which the content was created."
          nullable: true
          example: "2021-07-21T14:00:00.000Z"
    ContractTypeApiModel:
      type: "object"
      properties:
        "id":
          type: "string"
          description: "Unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "remote_id":
          type: "string"
          description: "Provider's unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "label":
          type: "string"
          description: "The label of the employment type"
          nullable: true
          example: "Full-Time"
        "contract_type":
          allOf:
            - {"$ref": "#/components/schemas/ContractTypeEnum"}
          description: "The employment work schedule type (e.g., full-time, part-time)"
          nullable: true
          example: "full_time"
    ContractTypeEnum:
      type: "object"
      properties:
        "value":
          type: "string"
          enum:
            - "full_time"
            - "shifts"
            - "part_time"
            - "unmapped_value"
            - null
          nullable: true
          x-speakeasy-unknown-values: "allow"
        "source_value":
          oneOf:
            - type: "string"
            - type: "number"
            - type: "boolean"
            - type: "object"
            - type: "array"
              items: {}
          nullable: true
    CostCenters:
      type: "object"
      properties:
        "id":
          type: "string"
          description: "Unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "remote_id":
          type: "string"
          description: "Provider's unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "name":
          type: "string"
          nullable: true
          example: "R&D"
        "distribution_percentage":
          type: "number"
          nullable: true
          example: 100
    CountryCodeEnum:
      type: "object"
      properties:
        "value":
          type: "string"
          enum:
            - "AF"
            - "AL"
            - "DZ"
            - "AS"
            - "AD"
            - "AO"
            - "AI"
            - "AQ"
            - "AG"
            - "AR"
            - "AM"
            - "AW"
            - "AU"
            - "AT"
            - "AZ"
            - "BS"
            - "BH"
            - "BD"
            - "BB"
            - "BY"
            - "BE"
            - "BZ"
            - "BJ"
            - "BM"
            - "BT"
            - "BO"
            - "BQ"
            - "BA"
            - "BW"
            - "BV"
            - "BR"
            - "IO"
            - "BN"
            - "BG"
            - "BF"
            - "BI"
            - "KH"
            - "CM"
            - "CA"
            - "CV"
            - "KY"
            - "CF"
            - "TD"
            - "CL"
            - "CN"
            - "CX"
            - "CC"
            - "CO"
            - "KM"
            - "CG"
            - "CD"
            - "CK"
            - "CR"
            - "HR"
            - "CU"
            - "CW"
            - "CY"
            - "CZ"
            - "CI"
            - "DK"
            - "DJ"
            - "DM"
            - "DO"
            - "EC"
            - "EG"
            - "SV"
            - "GQ"
            - "ER"
            - "EE"
            - "ET"
            - "FK"
            - "FO"
            - "FJ"
            - "FI"
            - "FR"
            - "GF"
            - "PF"
            - "TF"
            - "GA"
            - "GM"
            - "GE"
            - "DE"
            - "GH"
            - "GI"
            - "GR"
            - "GL"
            - "GD"
            - "GP"
            - "GU"
            - "GT"
            - "GG"
            - "GN"
            - "GW"
            - "GY"
            - "HT"
            - "HM"
            - "VA"
            - "HN"
            - "HK"
            - "HU"
            - "IS"
            - "IN"
            - "ID"
            - "IR"
            - "IQ"
            - "IE"
            - "IM"
            - "IL"
            - "IT"
            - "JM"
            - "JP"
            - "JE"
            - "JO"
            - "KZ"
            - "KE"
            - "KI"
            - "KP"
            - "KR"
            - "KW"
            - "KG"
            - "LA"
            - "LV"
            - "LB"
            - "LS"
            - "LR"
            - "LY"
            - "LI"
            - "LT"
            - "LU"
            - "MO"
            - "MK"
            - "MG"
            - "MW"
            - "MY"
            - "MV"
            - "ML"
            - "MT"
            - "MH"
            - "MQ"
            - "MR"
            - "MU"
            - "YT"
            - "MX"
            - "FM"
            - "MD"
            - "MC"
            - "MN"
            - "ME"
            - "MS"
            - "MA"
            - "MZ"
            - "MM"
            - "NA"
            - "NR"
            - "NP"
            - "NL"
            - "NC"
            - "NZ"
            - "NI"
            - "NE"
            - "NG"
            - "NU"
            - "NF"
            - "MP"
            - "NO"
            - "OM"
            - "PK"
            - "PW"
            - "PS"
            - "PA"
            - "PG"
            - "PY"
            - "PE"
            - "PH"
            - "PN"
            - "PL"
            - "PT"
            - "PR"
            - "QA"
            - "RO"
            - "RU"
            - "RW"
            - "RE"
            - "BL"
            - "SH"
            - "KN"
            - "LC"
            - "MF"
            - "PM"
            - "VC"
            - "WS"
            - "SM"
            - "ST"
            - "SA"
            - "SN"
            - "RS"
            - "SC"
            - "SL"
            - "SG"
            - "SX"
            - "SK"
            - "SI"
            - "SB"
            - "SO"
            - "ZA"
            - "GS"
            - "SS"
            - "ES"
            - "LK"
            - "SD"
            - "SR"
            - "SJ"
            - "SZ"
            - "SE"
            - "CH"
            - "SY"
            - "TW"
            - "TJ"
            - "TZ"
            - "TH"
            - "TL"
            - "TG"
            - "TK"
            - "TO"
            - "TT"
            - "TN"
            - "TR"
            - "TM"
            - "TC"
            - "TV"
            - "UG"
            - "UA"
            - "AE"
            - "GB"
            - "US"
            - "UM"
            - "UY"
            - "UZ"
            - "VU"
            - "VE"
            - "VN"
            - "VG"
            - "VI"
            - "WF"
            - "EH"
            - "YE"
            - "ZM"
            - "ZW"
            - "unmapped_value"
            - null
          description: "The ISO3166-1 Alpha2 Code of the Country"
          nullable: true
          example: "US"
          x-speakeasy-unknown-values: "allow"
        "source_value":
          oneOf:
            - type: "string"
            - type: "number"
            - type: "boolean"
            - type: "object"
            - type: "array"
              items: {}
          nullable: true
    CreateCostCenterApiModel:
      type: "object"
      properties:
        "id":
          type: "string"
          description: "Unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "name":
          type: "string"
          nullable: true
          example: "R&D"
        "distribution_percentage":
          type: "number"
          nullable: true
          example: 100
    CreateEmployeeEmploymentApiModel:
      type: "object"
      properties:
        "unified_custom_fields":
          type: "object"
          additionalProperties: true
          description: "Custom Unified Fields configured in your StackOne project"
          nullable: true
          example: {"my_project_custom_field_1": "REF-1236", "my_project_custom_field_2": "some other value"}
        "job_title":
          type: "string"
          description: "The job title of the employee"
          nullable: true
          example: "Software Engineer"
        "pay_rate":
          type: "string"
          description: "The pay rate for the employee"
          nullable: true
          example: "40.00"
        "pay_period":
          allOf:
            - {"$ref": "#/components/schemas/PayPeriodEnum"}
          description: "The pay period"
          nullable: true
          example: "monthly"
        "pay_frequency":
          allOf:
            - {"$ref": "#/components/schemas/PayFrequencyEnum"}
          description: "The pay frequency"
          nullable: true
          example: "hourly"
        "pay_currency":
          type: "string"
          description: "The currency used for pay"
          nullable: true
          example: "USD"
        "end_date":
          type: "string"
          format: "date-time"
          description: "The end date of employment"
          nullable: true
          example: "2021-01-01T01:01:01.000Z"
        "grade":
          allOf:
            - {"$ref": "#/components/schemas/EmploymentGradeApiModel"}
          description: "Represents the employee’s position within the organizational hierarchy."
          nullable: true
        "employment_type":
          allOf:
            - {"$ref": "#/components/schemas/EmploymentTypeEnum"}
          description: "The type of employment (e.g., contractor, permanent)"
          nullable: true
          example: "permanent"
          deprecated: true
        "employment_contract_type":
          allOf:
            - {"$ref": "#/components/schemas/EmploymentScheduleTypeEnum"}
          description: "The employment work schedule type (e.g., full-time, part-time)"
          nullable: true
          example: "full_time"
          deprecated: true
        "work_time":
          allOf:
            - {"$ref": "#/components/schemas/WorkTimeApiModel"}
          nullable: true
        "payroll_code":
          type: "string"
          description: "The payroll code of the employee"
          nullable: true
          example: "PC1"
        "passthrough":
          type: "object"
          additionalProperties: true
          description: "Value to pass through to the provider"
          nullable: true
          example: {"other_known_names": "John Doe"}
        "effective_date":
          type: "string"
          format: "date-time"
          description: "The employee effective date"
          nullable: true
          example: "2021-01-01T00:00:00.000Z"
          deprecated: true
    CreateEmployeeLocationApiModel:
      type: "object"
      properties:
        "id":
          type: "string"
          description: "Unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "name":
          type: "string"
          description: "The name of the location"
          nullable: true
          example: "Woolsthorpe Manor"
        "phone_number":
          type: "string"
          description: "The phone number of the location"
          nullable: true
          example: "+44 1476 860 364"
        "street_1":
          type: "string"
          description: "The first line of the address"
          nullable: true
          example: "Water Lane"
        "street_2":
          type: "string"
          description: "The second line of the address"
          nullable: true
          example: "Woolsthorpe by Colsterworth"
        "city":
          type: "string"
          description: "The city where the location is situated"
          nullable: true
          example: "Grantham"
        "zip_code":
          type: "string"
          description: "The ZIP code/Postal code of the location"
          nullable: true
          example: "NG33 5NR"
        "country":
          allOf:
            - {"$ref": "#/components/schemas/CountryCodeEnum"}
          description: "The country code"
          nullable: true
        "passthrough":
          type: "object"
          additionalProperties: true
          description: "Value to pass through to the provider"
          nullable: true
          example: {"other_known_names": "John Doe"}
        "state":
          allOf:
            - {"$ref": "#/components/schemas/ISO3166_2SubDivisionEnum"}
          description: "The ISO3166-2 sub division where the location is situated"
          nullable: true
          example: "GB-LIN"
    CreateEmploymentApiModel:
      type: "object"
      properties:
        "unified_custom_fields":
          type: "object"
          additionalProperties: true
          description: "Custom Unified Fields configured in your StackOne project"
          nullable: true
          example: {"my_project_custom_field_1": "REF-1236", "my_project_custom_field_2": "some other value"}
        "job_title":
          type: "string"
          description: "The job title of the employee"
          nullable: true
          example: "Software Engineer"
        "pay_rate":
          type: "string"
          description: "The pay rate for the employee"
          nullable: true
          example: "40.00"
        "pay_period":
          allOf:
            - {"$ref": "#/components/schemas/PayPeriodEnum"}
          description: "The pay period"
          nullable: true
          example: "monthly"
        "pay_frequency":
          allOf:
            - {"$ref": "#/components/schemas/PayFrequencyEnum"}
          description: "The pay frequency"
          nullable: true
          example: "hourly"
        "pay_currency":
          type: "string"
          description: "The currency used for pay"
          nullable: true
          example: "USD"
        "effective_date":
          type: "string"
          format: "date-time"
          description: "The effective date of the employment contract"
          nullable: true
          example: "2021-01-01T01:01:01.000Z"
        "end_date":
          type: "string"
          format: "date-time"
          description: "The end date of employment"
          nullable: true
          example: "2021-01-01T01:01:01.000Z"
        "grade":
          allOf:
            - {"$ref": "#/components/schemas/EmploymentGradeApiModel"}
          description: "Represents the employee’s position within the organizational hierarchy."
          nullable: true
        "employment_type":
          allOf:
            - {"$ref": "#/components/schemas/EmploymentTypeEnum"}
          description: "The type of employment (e.g., contractor, permanent)"
          nullable: true
          example: "permanent"
          deprecated: true
        "employment_contract_type":
          allOf:
            - {"$ref": "#/components/schemas/EmploymentScheduleTypeEnum"}
          description: "The employment work schedule type (e.g., full-time, part-time)"
          nullable: true
          example: "full_time"
          deprecated: true
        "work_time":
          allOf:
            - {"$ref": "#/components/schemas/WorkTimeApiModel"}
          nullable: true
        "payroll_code":
          type: "string"
          description: "The payroll code of the employee"
          nullable: true
          example: "PC1"
        "job_id":
          type: "string"
          description: "The employee job id"
          nullable: true
          example: "5290"
    CreateHRISBenefit:
      type: "object"
      properties:
        "id":
          type: "string"
          description: "Unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "name":
          type: "string"
          description: "The name of the benefit"
          nullable: true
          example: "Health Insurance"
        "benefit_type":
          allOf:
            - {"$ref": "#/components/schemas/BenefitsTypeEnum"}
          description: "The type of the benefit"
          nullable: true
        "provider":
          type: "string"
          description: "The provider of the benefit"
          nullable: true
          example: "Aetna"
        "description":
          type: "string"
          description: "The description of the benefit"
          nullable: true
          example: "Health insurance for employees"
        "created_at":
          type: "string"
          format: "date-time"
          description: "The date and time the benefit was created"
          nullable: true
          example: "2021-01-01T00:00:00Z"
        "updated_at":
          type: "string"
          format: "date-time"
          description: "The date and time the benefit was last updated"
          nullable: true
          example: "2021-01-01T00:00:00Z"
    CreateResult:
      type: "object"
      properties:
        "statusCode":
          type: "number"
          example: 201
        "message":
          type: "string"
          example: "Record created successfully."
        "timestamp":
          type: "string"
          format: "date-time"
          example: "2021-01-01T01:01:01.000Z"
        "data": {"$ref": "#/components/schemas/CreateResultDataApiModel"}
      required:
        - "statusCode"
        - "message"
        - "timestamp"
        - "data"
    CreateResultDataApiModel:
      type: "object"
      properties:
        "id":
          type: "string"
          description: "Unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "remote_id":
          type: "string"
          description: "Provider's unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
    CustomFieldDefinition:
      type: "object"
      properties:
        "id":
          type: "string"
          description: "Unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "remote_id":
          type: "string"
          description: "Provider's unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "name":
          type: "string"
          nullable: true
        "description":
          type: "string"
          nullable: true
        "type":
          allOf:
            - {"$ref": "#/components/schemas/CustomFieldTypeEnum"}
          description: "The type of the custom field."
          nullable: true
          example: "Dropdown"
        "options":
          type: "array"
          items: {"$ref": "#/components/schemas/CustomFieldOption"}
          description: "An array of possible options for the custom field."
          nullable: true
          example: [{"id": "option_1", "value": "Not Started"}, {"id": "option_2", "value": "In Progress"}, {"id": "option_3", "value": "Completed"}]
    CustomFieldDefinitionResultApiModel:
      type: "object"
      properties:
        "data": {"$ref": "#/components/schemas/CustomFieldDefinition"}
        "raw":
          type: "array"
          items: {"$ref": "#/components/schemas/RawResponse"}
          nullable: true
      required:
        - "data"
    CustomFieldDefinitionsPaginated:
      type: "object"
      properties:
        "next_page":
          type: "string"
          nullable: true
          deprecated: true
        "next":
          type: "string"
          nullable: true
        "data":
          type: "array"
          items: {"$ref": "#/components/schemas/CustomFieldDefinition"}
        "raw":
          type: "array"
          items: {"$ref": "#/components/schemas/RawResponse"}
          nullable: true
      required:
        - "data"
    CustomFieldOption:
      type: "object"
      properties:
        "id":
          type: "string"
          description: "The unique identifier for the option to be used when updating the custom field"
          example: "option_123"
        "value":
          type: "string"
          description: "The human readable value of the option"
          example: "Not Started"
      required:
        - "id"
        - "value"
    CustomFields:
      type: "object"
      properties:
        "id":
          type: "string"
          description: "Unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "remote_id":
          type: "string"
          description: "Provider's unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "name":
          type: "string"
          description: "The name of the custom field."
          nullable: true
          example: "Training Completion Status"
        "value":
          oneOf:
            - type: "string"
            - type: "number"
            - type: "boolean"
            - type: "object"
            - type: "array"
              items: {}
          description: "The value associated with the custom field."
          nullable: true
          example: "Completed"
        "value_id":
          type: "string"
          description: "The unique identifier for the value of the custom field."
          nullable: true
          example: "value_456"
        "remote_value_id":
          type: "string"
          description: "Provider's unique identifier for the value of the custom field."
          nullable: true
          example: "e3cb75bf-aa84-466e-a6c1-b8322b257a48"
    CustomFieldTypeEnum:
      type: "object"
      properties:
        "value":
          type: "string"
          enum:
            - "date"
            - "float"
            - "integer"
            - "list"
            - "checkbox"
            - "text"
            - "boolean"
            - "single_select"
            - "multi_select"
            - "url"
            - "other"
            - "unmapped_value"
            - null
          nullable: true
          x-speakeasy-unknown-values: "allow"
        "source_value":
          oneOf:
            - type: "string"
            - type: "number"
            - type: "boolean"
            - type: "object"
            - type: "array"
              items: {}
          nullable: true
    DeleteResult:
      type: "object"
      properties:
        "statusCode":
          type: "number"
          example: 204
        "message":
          type: "string"
          example: "Record deleted successfully."
        "timestamp":
          type: "string"
          format: "date-time"
          example: "2021-01-01T01:01:01.000Z"
      required:
        - "statusCode"
        - "message"
        - "timestamp"
    DepartmentTypeEnum:
      type: "object"
      properties:
        "value":
          type: "string"
          enum:
            - "department"
            - "company"
            - "division"
            - "group"
            - "project"
            - "team"
            - "unmapped_value"
            - null
          nullable: true
          example: "department"
          x-speakeasy-unknown-values: "allow"
        "source_value":
          oneOf:
            - type: "string"
            - type: "number"
            - type: "boolean"
            - type: "object"
            - type: "array"
              items: {}
          nullable: true
    DivisionTypeEnum:
      type: "object"
      properties:
        "value":
          type: "string"
          enum:
            - "department"
            - "company"
            - "division"
            - "group"
            - "project"
            - "cost_center"
            - "team"
            - "unmapped_value"
            - null
          nullable: true
          example: "division"
          x-speakeasy-unknown-values: "allow"
        "source_value":
          oneOf:
            - type: "string"
            - type: "number"
            - type: "boolean"
            - type: "object"
            - type: "array"
              items: {}
          nullable: true
    Employee:
      type: "object"
      properties:
        "id":
          type: "string"
          description: "Unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "remote_id":
          type: "string"
          description: "Provider's unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "unified_custom_fields":
          type: "object"
          additionalProperties: true
          description: "Custom Unified Fields configured in your StackOne project"
          nullable: true
          example: {"my_project_custom_field_1": "REF-1236", "my_project_custom_field_2": "some other value"}
        "first_name":
          type: "string"
          description: "The employee first name"
          nullable: true
          example: "Isaac"
        "last_name":
          type: "string"
          description: "The employee last name"
          nullable: true
          example: "Newton"
        "name":
          type: "string"
          description: "The employee name"
          nullable: true
          example: "Isaac Newton"
        "display_name":
          type: "string"
          description: "The employee display name"
          nullable: true
          example: "Sir Isaac Newton"
        "avatar_url":
          type: "string"
          description: "The employee avatar Url"
          nullable: true
          example: "https://example.com/avatar.png"
        "personal_email":
          type: "string"
          description: "The employee personal email"
          nullable: true
          example: "isaac.newton@example.com"
        "personal_phone_number":
          type: "string"
          description: "The employee personal phone number"
          nullable: true
          example: "+1234567890"
        "work_email":
          type: "string"
          description: "The employee work email"
          nullable: true
          example: "newton@example.com"
        "work_phone_number":
          type: "string"
          description: "The employee work phone number"
          nullable: true
          example: "+1234567890"
        "job_id":
          type: "string"
          description: "The employee job id"
          nullable: true
          example: "5290"
          deprecated: true
        "job_title":
          type: "string"
          description: "The employee job title"
          nullable: true
          example: "Physicist"
        "job_description":
          allOf:
            - {"$ref": "#/components/schemas/JobDescriptionApiModel"}
          description: "The employee job description"
          nullable: true
          example: "Testing the laws of motion"
          deprecated: true
        "department_id":
          type: "string"
          description: "The employee department id"
          nullable: true
          example: "3093"
          deprecated: true
        "department":
          type: "string"
          description: "The employee department"
          nullable: true
          example: "Physics"
          deprecated: true
        "groups":
          type: "array"
          items: {"$ref": "#/components/schemas/HRISGroup"}
          description: "The employee groups"
          nullable: true
        "cost_centers":
          type: "array"
          items: {"$ref": "#/components/schemas/CostCenters"}
          description: "The employee cost centers"
          nullable: true
          deprecated: true
        "manager_id":
          type: "string"
          description: "The employee manager ID"
          nullable: true
          example: "67890"
          deprecated: true
        "remote_manager_id":
          type: "string"
          description: "Provider's unique identifier of the manager"
          nullable: true
          example: "e3cb75bf-aa84-466e-a6c1-b8322b257a48"
        "gender":
          allOf:
            - {"$ref": "#/components/schemas/GenderEnum"}
          description: "The employee gender"
          nullable: true
          example: "male"
        "preferred_language":
          allOf:
            - {"$ref": "#/components/schemas/PreferredLanguageEnum"}
          description: "The employee preferred language"
          nullable: true
          example: "en_US"
        "ethnicity":
          allOf:
            - {"$ref": "#/components/schemas/EthnicityEnum"}
          description: "The employee ethnicity"
          nullable: true
          example: "white"
        "date_of_birth":
          type: "string"
          format: "date-time"
          description: "The employee date_of_birth"
          nullable: true
          example: "1990-01-01T00:00:00.000Z"
        "birthday":
          type: "string"
          format: "date-time"
          description: "The employee birthday"
          nullable: true
          example: "2021-01-01T00:00:00Z"
        "marital_status":
          allOf:
            - {"$ref": "#/components/schemas/MaritalStatusEnum"}
          description: "The employee marital status"
          nullable: true
          example: "single"
        "avatar":
          allOf:
            - {"$ref": "#/components/schemas/Image"}
          description: "The employee avatar"
          nullable: true
          example: "https://example.com/avatar.png"
        "hire_date":
          type: "string"
          format: "date-time"
          description: "The employee hire date"
          nullable: true
          example: "2021-01-01T00:00:00.000Z"
        "start_date":
          type: "string"
          format: "date-time"
          description: "The employee start date"
          nullable: true
          example: "2021-01-01T00:00:00.000Z"
          deprecated: true
        "tenure":
          type: "number"
          description: "The employee tenure"
          nullable: true
          example: 2
        "work_anniversary":
          type: "string"
          format: "date-time"
          description: "The employee work anniversary"
          nullable: true
          example: "2021-01-01T00:00:00Z"
        "employment_type":
          allOf:
            - {"$ref": "#/components/schemas/EmploymentTypeEnum"}
          description: "The employee employment type"
          nullable: true
          example: "full_time"
          deprecated: true
        "employment_contract_type":
          allOf:
            - {"$ref": "#/components/schemas/EmploymentScheduleTypeEnum"}
          description: "The employment work schedule type (e.g., full-time, part-time)"
          nullable: true
          example: "full_time"
          deprecated: true
        "employment_status":
          allOf:
            - {"$ref": "#/components/schemas/EmploymentStatusEnum"}
          description: "The employee employment status"
          nullable: true
          example: "active"
        "termination_date":
          type: "string"
          format: "date-time"
          description: "The employee termination date"
          nullable: true
          example: "2021-01-01T00:00:00Z"
        "company_name":
          type: "string"
          description: "The employee company name"
          nullable: true
          example: "Example Corp"
          deprecated: true
        "company_id":
          type: "string"
          description: "The employee company id"
          nullable: true
          example: "1234567890"
        "citizenships":
          type: "array"
          items: {"$ref": "#/components/schemas/CountryCodeEnum"}
          description: "The citizenships of the Employee"
          nullable: true
        "home_location":
          allOf:
            - {"$ref": "#/components/schemas/HRISLocation"}
          description: "The employee home location"
          nullable: true
        "work_location":
          allOf:
            - {"$ref": "#/components/schemas/HRISLocation"}
          description: "The employee work location"
          nullable: true
        "company":
          allOf:
            - {"$ref": "#/components/schemas/Company"}
          description: "The employee company"
          nullable: true
        "employments":
          type: "array"
          items: {"$ref": "#/components/schemas/Employment"}
          description: "The employee employments"
          nullable: true
        "custom_fields":
          type: "array"
          items: {"$ref": "#/components/schemas/CustomFields"}
          description: "The employee custom fields"
          nullable: true
        "benefits":
          type: "array"
          items: {"$ref": "#/components/schemas/HRISBenefit"}
          description: "Current benefits of the employee"
          nullable: true
        "employee_number":
          type: "string"
          description: "The assigned employee number"
          nullable: true
          example: "125"
        "national_identity_number":
          allOf:
            - {"$ref": "#/components/schemas/NationalIdentityNumberApiModel"}
          description: "The national identity number"
          nullable: true
          deprecated: true
        "national_identity_numbers":
          type: "array"
          items: {"$ref": "#/components/schemas/NationalIdentityNumberApiModel"}
          description: "The national identity numbers"
          nullable: true
        "skills":
          type: "array"
          items: {"$ref": "#/components/schemas/EntitySkills"}
          description: "The employee skills"
          nullable: true
        "created_at":
          type: "string"
          format: "date-time"
          description: "The created_at date"
          nullable: true
          example: "2021-01-01T01:01:01.000Z"
        "updated_at":
          type: "string"
          format: "date-time"
          description: "The updated_at date"
          nullable: true
          example: "2021-01-01T01:01:01.000Z"
    EmployeeResult:
      type: "object"
      properties:
        "data": {"$ref": "#/components/schemas/Employee"}
        "raw":
          type: "array"
          items: {"$ref": "#/components/schemas/RawResponse"}
          nullable: true
      required:
        - "data"
    EmployeesPaginated:
      type: "object"
      properties:
        "next_page":
          type: "string"
          nullable: true
          deprecated: true
        "next":
          type: "string"
          nullable: true
        "data":
          type: "array"
          items: {"$ref": "#/components/schemas/Employee"}
        "raw":
          type: "array"
          items: {"$ref": "#/components/schemas/RawResponse"}
          nullable: true
      required:
        - "data"
    Employment:
      type: "object"
      properties:
        "id":
          type: "string"
          description: "Unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "remote_id":
          type: "string"
          description: "Provider's unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "unified_custom_fields":
          type: "object"
          additionalProperties: true
          description: "Custom Unified Fields configured in your StackOne project"
          nullable: true
          example: {"my_project_custom_field_1": "REF-1236", "my_project_custom_field_2": "some other value"}
        "job_title":
          type: "string"
          description: "The job title of the employee"
          nullable: true
          example: "Software Engineer"
        "pay_rate":
          type: "string"
          description: "The pay rate for the employee"
          nullable: true
          example: "40.00"
        "pay_period":
          allOf:
            - {"$ref": "#/components/schemas/PayPeriodEnum"}
          description: "The pay period"
          nullable: true
          example: "monthly"
        "pay_frequency":
          allOf:
            - {"$ref": "#/components/schemas/PayFrequencyEnum"}
          description: "The pay frequency"
          nullable: true
          example: "hourly"
        "pay_currency":
          type: "string"
          description: "The currency used for pay"
          nullable: true
          example: "USD"
        "effective_date":
          type: "string"
          format: "date-time"
          description: "The effective date of the employment contract"
          nullable: true
          example: "2021-01-01T01:01:01.000Z"
        "end_date":
          type: "string"
          format: "date-time"
          description: "The end date of employment"
          nullable: true
          example: "2021-01-01T01:01:01.000Z"
        "grade":
          allOf:
            - {"$ref": "#/components/schemas/EmploymentGradeApiModel"}
          description: "Represents the employee’s position within the organizational hierarchy."
          nullable: true
        "employment_type":
          allOf:
            - {"$ref": "#/components/schemas/EmploymentTypeEnum"}
          description: "The type of employment (e.g., contractor, permanent)"
          nullable: true
          example: "permanent"
          deprecated: true
        "employment_contract_type":
          allOf:
            - {"$ref": "#/components/schemas/EmploymentScheduleTypeEnum"}
          description: "The employment work schedule type (e.g., full-time, part-time)"
          nullable: true
          example: "full_time"
          deprecated: true
        "work_time":
          allOf:
            - {"$ref": "#/components/schemas/WorkTimeApiModel"}
          nullable: true
        "payroll_code":
          type: "string"
          description: "The payroll code of the employee"
          nullable: true
          example: "PC1"
        "employee_id":
          type: "string"
          description: "The employee ID associated with this employment"
          nullable: true
          example: "1687-3"
        "remote_employee_id":
          type: "string"
          description: "Provider's unique identifier of the employee associated with this employment"
          nullable: true
          example: "e3cb75bf-aa84-466e-a6c1-b8322b257a48"
        "fte":
          type: "number"
          description: "the employee's working percentage relative to a full-time employee"
          nullable: true
          example: "1"
        "created_at":
          type: "string"
          format: "date-time"
          description: "The created_at date"
          nullable: true
          example: "2021-01-01T01:01:01.000Z"
        "updated_at":
          type: "string"
          format: "date-time"
          description: "The updated_at date"
          nullable: true
          example: "2021-01-01T01:01:01.000Z"
        "start_date":
          type: "string"
          format: "date-time"
          description: "The start_date of employment"
          nullable: true
          example: "2021-01-01T01:01:01.000Z"
          deprecated: true
        "active":
          type: "boolean"
          description: "The employment active status"
          nullable: true
          example: true
        "department":
          allOf:
            - {"$ref": "#/components/schemas/HRISGroup"}
          description: "The employee department"
          nullable: true
        "cost_center":
          allOf:
            - {"$ref": "#/components/schemas/HRISGroup"}
          description: "The employee cost_center"
          nullable: true
          deprecated: true
        "cost_centers":
          type: "array"
          items: {"$ref": "#/components/schemas/HRISCostCenter"}
          description: "The employee cost_centers"
          nullable: true
        "division":
          allOf:
            - {"$ref": "#/components/schemas/HRISGroup"}
          description: "The employee division"
          nullable: true
        "job":
          allOf:
            - {"$ref": "#/components/schemas/EmploymentJobApiModel"}
          description: "The job of employee"
          nullable: true
        "type":
          allOf:
            - {"$ref": "#/components/schemas/TypeApiModel"}
          description: "The type of employment"
          nullable: true
        "contract_type":
          allOf:
            - {"$ref": "#/components/schemas/ContractTypeApiModel"}
          description: "The employment work schedule type"
          nullable: true
        "manager":
          type: "array"
          items: {"$ref": "#/components/schemas/EmploymentManagerApiModel"}
          description: "The employee manager"
          nullable: true
    EmploymentGradeApiModel:
      type: "object"
      properties:
        "id":
          type: "string"
          description: "The reference id"
          nullable: true
          example: "1687-3"
        "remote_id":
          type: "string"
          description: "Provider's unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "name":
          type: "string"
          description: "The reference name"
          nullable: true
          example: "1687-4"
        "description":
          type: "string"
          description: "description of the grade"
          nullable: true
          example: "Mid-level employee demonstrating proficiency and autonomy."
    EmploymentJobApiModel:
      type: "object"
      properties:
        "id":
          type: "string"
          description: "Unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "remote_id":
          type: "string"
          description: "Provider's unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "title":
          type: "string"
          description: "Title of the job"
          nullable: true
          example: "Software Engineer"
        "description":
          allOf:
            - {"$ref": "#/components/schemas/JobDescriptionApiModel"}
          description: "The employee job description"
          nullable: true
        "owner_id":
          type: "string"
          description: "The owner_id of the job"
          nullable: true
          example: "5356"
        "parent_id":
          type: "string"
          description: "The parent_id of the job"
          nullable: true
          example: "7577"
    EmploymentManagerApiModel:
      type: "object"
      properties:
        "id":
          type: "string"
          description: "Unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "remote_id":
          type: "string"
          description: "Provider's unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "role":
          allOf:
            - {"$ref": "#/components/schemas/ManagerRoleApiModel"}
          description: "The role of manager"
          nullable: true
    EmploymentResult:
      type: "object"
      properties:
        "data": {"$ref": "#/components/schemas/Employment"}
        "raw":
          type: "array"
          items: {"$ref": "#/components/schemas/RawResponse"}
          nullable: true
      required:
        - "data"
    EmploymentScheduleTypeEnum:
      type: "object"
      properties:
        "value":
          type: "string"
          enum:
            - "full_time"
            - "shifts"
            - "part_time"
            - "unmapped_value"
            - null
          nullable: true
          x-speakeasy-unknown-values: "allow"
        "source_value":
          oneOf:
            - type: "string"
            - type: "number"
            - type: "boolean"
            - type: "object"
            - type: "array"
              items: {}
          nullable: true
    EmploymentsPaginated:
      type: "object"
      properties:
        "next_page":
          type: "string"
          nullable: true
          deprecated: true
        "next":
          type: "string"
          nullable: true
        "data":
          type: "array"
          items: {"$ref": "#/components/schemas/Employment"}
        "raw":
          type: "array"
          items: {"$ref": "#/components/schemas/RawResponse"}
          nullable: true
      required:
        - "data"
    EmploymentStatusEnum:
      type: "object"
      properties:
        "value":
          type: "string"
          enum:
            - "active"
            - "pending"
            - "terminated"
            - "leave"
            - "inactive"
            - "unknown"
            - "unmapped_value"
            - null
          nullable: true
          x-speakeasy-unknown-values: "allow"
        "source_value":
          oneOf:
            - type: "string"
            - type: "number"
            - type: "boolean"
            - type: "object"
            - type: "array"
              items: {}
          nullable: true
    EmploymentTypeEnum:
      type: "object"
      properties:
        "value":
          type: "string"
          enum:
            - "contractor"
            - "intern"
            - "permanent"
            - "apprentice"
            - "freelance"
            - "terminated"
            - "temporary"
            - "seasonal"
            - "volunteer"
            - "probation"
            - "internal"
            - "external"
            - "expatriate"
            - "employer_of_record"
            - "casual"
            - "Programme"
            - "unmapped_value"
            - null
          description: "The type of the employment."
          nullable: true
          example: "permanent"
          x-speakeasy-unknown-values: "allow"
        "source_value":
          oneOf:
            - type: "string"
            - type: "number"
            - type: "boolean"
            - type: "object"
            - type: "array"
              items: {}
          description: "The source value of the employment type."
          nullable: true
          example: "Permanent"
    EntitySkillResult:
      type: "object"
      properties:
        "data": {"$ref": "#/components/schemas/EntitySkills"}
        "raw":
          type: "array"
          items: {"$ref": "#/components/schemas/RawResponse"}
          nullable: true
      required:
        - "data"
    EntitySkills:
      type: "object"
      properties:
        "id":
          type: "string"
          description: "The ID associated with this skill"
          nullable: true
          example: "16873-IT345"
        "remote_id":
          type: "string"
          description: "Provider's unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "name":
          type: "string"
          description: "The name associated with this skill"
          nullable: true
          example: "Information-Technology"
        "active":
          type: "boolean"
          description: "Whether the skill is active and therefore available for use"
          nullable: true
          example: true
        "language":
          allOf:
            - {"$ref": "#/components/schemas/LanguageEnum"}
          description: "The language associated with this skill"
          nullable: true
        "maximum_proficiency":
          allOf:
            - {"$ref": "#/components/schemas/Proficiency"}
          description: "The proficiency level of the skill"
          nullable: true
        "minimum_proficiency":
          allOf:
            - {"$ref": "#/components/schemas/Proficiency"}
          description: "The proficiency level of the skill"
          nullable: true
    EntitySkillsCreateRequestDto:
      type: "object"
      properties:
        "id":
          type: "string"
          description: "The ID associated with this skill"
          nullable: true
          example: "16873-IT345"
        "name":
          type: "string"
          description: "The name associated with this skill"
          nullable: true
          example: "Information-Technology"
        "maximum_proficiency":
          allOf:
            - {"$ref": "#/components/schemas/Proficiency"}
          description: "The proficiency level of the skill"
          nullable: true
        "minimum_proficiency":
          allOf:
            - {"$ref": "#/components/schemas/Proficiency"}
          description: "The proficiency level of the skill"
          nullable: true
    EntitySkillsPaginated:
      type: "object"
      properties:
        "next":
          type: "string"
          nullable: true
        "data":
          type: "array"
          items: {"$ref": "#/components/schemas/EntitySkills"}
        "raw":
          type: "array"
          items: {"$ref": "#/components/schemas/RawResponse"}
          nullable: true
      required:
        - "data"
    EthnicityEnum:
      type: "object"
      properties:
        "value":
          type: "string"
          enum:
            - "white"
            - "black_or_african_american"
            - "asian"
            - "hispanic_or_latino"
            - "american_indian_or_alaska_native"
            - "native_hawaiian_or_pacific_islander"
            - "two_or_more_races"
            - "not_disclosed"
            - "other"
            - "unmapped_value"
            - null
          nullable: true
          x-speakeasy-unknown-values: "allow"
        "source_value":
          oneOf:
            - type: "string"
            - type: "number"
            - type: "boolean"
            - type: "object"
            - type: "array"
              items: {}
          nullable: true
    File:
      type: "object"
      properties:
        "id":
          type: "string"
          description: "Unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "remote_id":
          type: "string"
          description: "Provider's unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "name":
          type: "string"
          description: "The name of the file"
          nullable: true
          example: "My Document"
        "path":
          type: "string"
          description: "The path where the file is stored"
          nullable: true
          example: "/path/to/file"
        "category":
          allOf:
            - {"$ref": "#/components/schemas/FileCategoryEnumApiModel"}
          description: "The category of the file"
          nullable: true
          example: "templates, forms, backups, etc."
        "contents":
          type: "array"
          items: {"$ref": "#/components/schemas/Content"}
          description: "The content of the file. Deprecated, use `url` and `file_format` one level up instead"
          nullable: true
          deprecated: true
        "category_id":
          type: "string"
          description: "The categoryId of the documents"
          nullable: true
          example: "6530"
        "created_at":
          type: "string"
          format: "date-time"
          description: "The creation date of the file"
          nullable: true
          example: "2021-01-01T01:01:01.000Z"
        "updated_at":
          type: "string"
          format: "date-time"
          description: "The update date of the file"
          nullable: true
          example: "2021-01-02T01:01:01.000Z"
        "remote_url":
          type: "string"
          description: "URL where the file content is located"
          nullable: true
          example: "https://example.com/file.pdf"
        "file_format":
          allOf:
            - {"$ref": "#/components/schemas/FileFormatEnum"}
          description: "The file format of the file"
          nullable: true
    FileCategoryEnumApiModel:
      type: "object"
      properties:
        "value":
          type: "string"
          description: "The category of the file"
          nullable: true
        "source_value":
          oneOf:
            - type: "string"
            - type: "number"
            - type: "boolean"
            - type: "object"
            - type: "array"
              items: {}
          nullable: true
    FileFormatEnum:
      type: "object"
      properties:
        "value":
          type: "string"
          enum:
            - "unmapped_value"
            - "ez"
            - "aw"
            - "atom"
            - "atomcat"
            - "atomdeleted"
            - "atomsvc"
            - "dwd"
            - "held"
            - "rsat"
            - "bdoc"
            - "xcs"
            - "ccxml"
            - "cdfx"
            - "cdmia"
            - "cdmic"
            - "cdmid"
            - "cdmio"
            - "cdmiq"
            - "cu"
            - "mpd"
            - "davmount"
            - "dbk"
            - "dssc"
            - "xdssc"
            - "es"
            - "ecma"
            - "emma"
            - "emotionml"
            - "epub"
            - "exi"
            - "exp"
            - "fdt"
            - "pfr"
            - "geojson"
            - "gml"
            - "gpx"
            - "gxf"
            - "gz"
            - "hjson"
            - "stk"
            - "ink"
            - "inkml"
            - "ipfix"
            - "its"
            - "jar"
            - "war"
            - "ear"
            - "ser"
            - "class"
            - "js"
            - "mjs"
            - "json"
            - "map"
            - "json5"
            - "jsonml"
            - "jsonld"
            - "lgr"
            - "lostxml"
            - "hqx"
            - "cpt"
            - "mads"
            - "webmanifest"
            - "mrc"
            - "mrcx"
            - "ma"
            - "nb"
            - "mb"
            - "mathml"
            - "mbox"
            - "mscml"
            - "metalink"
            - "meta4"
            - "mets"
            - "maei"
            - "musd"
            - "mods"
            - "m21"
            - "mp21"
            - "mp4s"
            - "m4p"
            - "doc"
            - "dot"
            - "mxf"
            - "nq"
            - "nt"
            - "cjs"
            - "bin"
            - "dms"
            - "lrf"
            - "mar"
            - "so"
            - "dist"
            - "distz"
            - "pkg"
            - "bpk"
            - "dump"
            - "elc"
            - "deploy"
            - "exe"
            - "dll"
            - "deb"
            - "dmg"
            - "iso"
            - "img"
            - "msi"
            - "msp"
            - "msm"
            - "buffer"
            - "oda"
            - "opf"
            - "ogx"
            - "omdoc"
            - "onetoc"
            - "onetoc2"
            - "onetmp"
            - "onepkg"
            - "oxps"
            - "relo"
            - "xer"
            - "pdf"
            - "pgp"
            - "asc"
            - "sig"
            - "prf"
            - "p10"
            - "p7m"
            - "p7c"
            - "p7s"
            - "p8"
            - "ac"
            - "cer"
            - "crl"
            - "pkipath"
            - "pki"
            - "pls"
            - "ai"
            - "eps"
            - "ps"
            - "provx"
            - "pskcxml"
            - "raml"
            - "rdf"
            - "owl"
            - "rif"
            - "rnc"
            - "rl"
            - "rld"
            - "rs"
            - "rapd"
            - "sls"
            - "rusd"
            - "gbr"
            - "mft"
            - "roa"
            - "rsd"
            - "rss"
            - "rtf"
            - "sbml"
            - "scq"
            - "scs"
            - "spq"
            - "spp"
            - "sdp"
            - "senmlx"
            - "sensmlx"
            - "setpay"
            - "setreg"
            - "shf"
            - "siv"
            - "sieve"
            - "smi"
            - "smil"
            - "rq"
            - "srx"
            - "gram"
            - "grxml"
            - "sru"
            - "ssdl"
            - "ssml"
            - "swidtag"
            - "tei"
            - "teicorpus"
            - "tfi"
            - "tsd"
            - "toml"
            - "trig"
            - "ttml"
            - "ubj"
            - "rsheet"
            - "td"
            - "vxml"
            - "wasm"
            - "wgt"
            - "hlp"
            - "wsdl"
            - "wspolicy"
            - "xaml"
            - "xav"
            - "xca"
            - "xdf"
            - "xel"
            - "xns"
            - "xenc"
            - "xhtml"
            - "xht"
            - "xlf"
            - "xml"
            - "xsl"
            - "xsd"
            - "rng"
            - "dtd"
            - "xop"
            - "xpl"
            - "*xsl"
            - "xslt"
            - "xspf"
            - "mxml"
            - "xhvml"
            - "xvml"
            - "xvm"
            - "yang"
            - "yin"
            - "zip"
            - "*3gpp"
            - "adp"
            - "amr"
            - "au"
            - "snd"
            - "mid"
            - "midi"
            - "kar"
            - "rmi"
            - "mxmf"
            - "*mp3"
            - "m4a"
            - "mp4a"
            - "mpga"
            - "mp2"
            - "mp2a"
            - "mp3"
            - "m2a"
            - "m3a"
            - "oga"
            - "ogg"
            - "spx"
            - "opus"
            - "s3m"
            - "sil"
            - "wav"
            - "*wav"
            - "weba"
            - "xm"
            - "ttc"
            - "otf"
            - "ttf"
            - "woff"
            - "woff2"
            - "exr"
            - "apng"
            - "avif"
            - "bmp"
            - "cgm"
            - "drle"
            - "emf"
            - "fits"
            - "g3"
            - "gif"
            - "heic"
            - "heics"
            - "heif"
            - "heifs"
            - "hej2"
            - "hsj2"
            - "ief"
            - "jls"
            - "jp2"
            - "jpg2"
            - "jpeg"
            - "jpg"
            - "jpe"
            - "jph"
            - "jhc"
            - "jpm"
            - "jpx"
            - "jpf"
            - "jxr"
            - "jxra"
            - "jxrs"
            - "jxs"
            - "jxsc"
            - "jxsi"
            - "jxss"
            - "ktx"
            - "ktx2"
            - "png"
            - "sgi"
            - "svg"
            - "svgz"
            - "t38"
            - "tif"
            - "tiff"
            - "tfx"
            - "webp"
            - "wmf"
            - "disposition-notification"
            - "u8msg"
            - "u8dsn"
            - "u8mdn"
            - "u8hdr"
            - "eml"
            - "mime"
            - "3mf"
            - "gltf"
            - "glb"
            - "igs"
            - "iges"
            - "msh"
            - "mesh"
            - "silo"
            - "mtl"
            - "obj"
            - "stpx"
            - "stpz"
            - "stpxz"
            - "stl"
            - "wrl"
            - "vrml"
            - "*x3db"
            - "x3dbz"
            - "x3db"
            - "*x3dv"
            - "x3dvz"
            - "x3d"
            - "x3dz"
            - "x3dv"
            - "appcache"
            - "manifest"
            - "ics"
            - "ifb"
            - "coffee"
            - "litcoffee"
            - "css"
            - "csv"
            - "html"
            - "htm"
            - "shtml"
            - "jade"
            - "jsx"
            - "less"
            - "markdown"
            - "md"
            - "mml"
            - "mdx"
            - "n3"
            - "txt"
            - "text"
            - "conf"
            - "def"
            - "list"
            - "log"
            - "in"
            - "ini"
            - "rtx"
            - "*rtf"
            - "sgml"
            - "sgm"
            - "shex"
            - "slim"
            - "slm"
            - "spdx"
            - "stylus"
            - "styl"
            - "tsv"
            - "t"
            - "tr"
            - "roff"
            - "man"
            - "me"
            - "ms"
            - "ttl"
            - "uri"
            - "uris"
            - "urls"
            - "vcard"
            - "vtt"
            - "*xml"
            - "yaml"
            - "yml"
            - "3gp"
            - "3gpp"
            - "3g2"
            - "h261"
            - "h263"
            - "h264"
            - "m4s"
            - "jpgv"
            - "*jpm"
            - "jpgm"
            - "mj2"
            - "mjp2"
            - "ts"
            - "mp4"
            - "mp4v"
            - "mpg4"
            - "mpeg"
            - "mpg"
            - "mpe"
            - "m1v"
            - "m2v"
            - "ogv"
            - "qt"
            - "mov"
            - "webm"
            - "cww"
            - "1km"
            - "plb"
            - "psb"
            - "pvb"
            - "tcap"
            - "pwn"
            - "aso"
            - "imp"
            - "acu"
            - "atc"
            - "acutc"
            - "air"
            - "fcdt"
            - "fxp"
            - "fxpl"
            - "xdp"
            - "xfdf"
            - "ahead"
            - "azf"
            - "azs"
            - "azw"
            - "acc"
            - "ami"
            - "apk"
            - "cii"
            - "fti"
            - "atx"
            - "mpkg"
            - "key"
            - "m3u8"
            - "numbers"
            - "pages"
            - "pkpass"
            - "swi"
            - "iota"
            - "aep"
            - "bmml"
            - "mpm"
            - "bmi"
            - "rep"
            - "cdxml"
            - "mmd"
            - "cdy"
            - "csl"
            - "cla"
            - "rp9"
            - "c4g"
            - "c4d"
            - "c4f"
            - "c4p"
            - "c4u"
            - "c11amc"
            - "c11amz"
            - "csp"
            - "cdbcmsg"
            - "cmc"
            - "clkx"
            - "clkk"
            - "clkp"
            - "clkt"
            - "clkw"
            - "wbs"
            - "pml"
            - "ppd"
            - "car"
            - "pcurl"
            - "dart"
            - "rdz"
            - "dbf"
            - "uvf"
            - "uvvf"
            - "uvd"
            - "uvvd"
            - "uvt"
            - "uvvt"
            - "uvx"
            - "uvvx"
            - "uvz"
            - "uvvz"
            - "fe_launch"
            - "dna"
            - "mlp"
            - "mle"
            - "dpg"
            - "dfac"
            - "kpxx"
            - "ait"
            - "svc"
            - "geo"
            - "mag"
            - "nml"
            - "esf"
            - "msf"
            - "qam"
            - "slt"
            - "ssf"
            - "es3"
            - "et3"
            - "ez2"
            - "ez3"
            - "fdf"
            - "mseed"
            - "seed"
            - "dataless"
            - "gph"
            - "ftc"
            - "fm"
            - "frame"
            - "maker"
            - "book"
            - "fnc"
            - "ltf"
            - "fsc"
            - "oas"
            - "oa2"
            - "oa3"
            - "fg5"
            - "bh2"
            - "ddd"
            - "xdw"
            - "xbd"
            - "fzs"
            - "txd"
            - "ggb"
            - "ggt"
            - "gex"
            - "gre"
            - "gxt"
            - "g2w"
            - "g3w"
            - "gmx"
            - "gdoc"
            - "gslides"
            - "gsheet"
            - "kml"
            - "kmz"
            - "gqf"
            - "gqs"
            - "gac"
            - "ghf"
            - "gim"
            - "grv"
            - "gtm"
            - "tpl"
            - "vcg"
            - "hal"
            - "zmm"
            - "hbci"
            - "les"
            - "hpgl"
            - "hpid"
            - "hps"
            - "jlt"
            - "pcl"
            - "pclxl"
            - "sfd-hdstx"
            - "mpy"
            - "afp"
            - "listafp"
            - "list3820"
            - "irm"
            - "sc"
            - "icc"
            - "icm"
            - "igl"
            - "ivp"
            - "ivu"
            - "igm"
            - "xpw"
            - "xpx"
            - "i2g"
            - "qbo"
            - "qfx"
            - "rcprofile"
            - "irp"
            - "xpr"
            - "fcs"
            - "jam"
            - "rms"
            - "jisp"
            - "joda"
            - "ktz"
            - "ktr"
            - "karbon"
            - "chrt"
            - "kfo"
            - "flw"
            - "kon"
            - "kpr"
            - "kpt"
            - "ksp"
            - "kwd"
            - "kwt"
            - "htke"
            - "kia"
            - "kne"
            - "knp"
            - "skp"
            - "skd"
            - "skt"
            - "skm"
            - "sse"
            - "lasxml"
            - "lbd"
            - "lbe"
            - "apr"
            - "pre"
            - "nsf"
            - "org"
            - "scm"
            - "lwp"
            - "portpkg"
            - "mvt"
            - "mcd"
            - "mc1"
            - "cdkey"
            - "mwf"
            - "mfm"
            - "flo"
            - "igx"
            - "mif"
            - "daf"
            - "dis"
            - "mbk"
            - "mqy"
            - "msl"
            - "plc"
            - "txf"
            - "mpn"
            - "mpc"
            - "xul"
            - "cil"
            - "cab"
            - "xls"
            - "xlm"
            - "xla"
            - "xlc"
            - "xlt"
            - "xlw"
            - "xlam"
            - "xlsb"
            - "xlsm"
            - "xltm"
            - "eot"
            - "chm"
            - "ims"
            - "lrm"
            - "thmx"
            - "msg"
            - "cat"
            - "*stl"
            - "ppt"
            - "pps"
            - "pot"
            - "ppam"
            - "pptm"
            - "sldm"
            - "ppsm"
            - "potm"
            - "mpp"
            - "mpt"
            - "docm"
            - "dotm"
            - "wps"
            - "wks"
            - "wcm"
            - "wdb"
            - "wpl"
            - "xps"
            - "mseq"
            - "mus"
            - "msty"
            - "taglet"
            - "nlu"
            - "ntf"
            - "nitf"
            - "nnd"
            - "nns"
            - "nnw"
            - "*ac"
            - "ngdat"
            - "n-gage"
            - "rpst"
            - "rpss"
            - "edm"
            - "edx"
            - "ext"
            - "odc"
            - "otc"
            - "odb"
            - "odf"
            - "odft"
            - "odg"
            - "otg"
            - "odi"
            - "oti"
            - "odp"
            - "otp"
            - "ods"
            - "ots"
            - "odt"
            - "odm"
            - "ott"
            - "oth"
            - "xo"
            - "dd2"
            - "obgx"
            - "oxt"
            - "osm"
            - "pptx"
            - "sldx"
            - "ppsx"
            - "potx"
            - "xlsx"
            - "xltx"
            - "docx"
            - "dotx"
            - "mgp"
            - "dp"
            - "esa"
            - "pdb"
            - "pqa"
            - "oprc"
            - "paw"
            - "str"
            - "ei6"
            - "efif"
            - "wg"
            - "plf"
            - "pbd"
            - "box"
            - "mgz"
            - "qps"
            - "ptid"
            - "qxd"
            - "qxt"
            - "qwd"
            - "qwt"
            - "qxl"
            - "qxb"
            - "rar"
            - "bed"
            - "mxl"
            - "musicxml"
            - "cryptonote"
            - "cod"
            - "rm"
            - "rmvb"
            - "link66"
            - "st"
            - "see"
            - "sema"
            - "semd"
            - "semf"
            - "ifm"
            - "itp"
            - "iif"
            - "ipk"
            - "twd"
            - "twds"
            - "mmf"
            - "teacher"
            - "fo"
            - "sdkm"
            - "sdkd"
            - "dxp"
            - "sfs"
            - "sdc"
            - "sda"
            - "sdd"
            - "smf"
            - "sdw"
            - "vor"
            - "sgl"
            - "smzip"
            - "sm"
            - "wadl"
            - "sxc"
            - "stc"
            - "sxd"
            - "std"
            - "sxi"
            - "sti"
            - "sxm"
            - "sxw"
            - "sxg"
            - "stw"
            - "sus"
            - "susp"
            - "svd"
            - "sis"
            - "sisx"
            - "xsm"
            - "bdm"
            - "xdm"
            - "ddf"
            - "tao"
            - "pcap"
            - "cap"
            - "dmp"
            - "tmo"
            - "tpt"
            - "mxs"
            - "tra"
            - "ufd"
            - "ufdl"
            - "utz"
            - "umj"
            - "unityweb"
            - "uoml"
            - "vcx"
            - "vsd"
            - "vst"
            - "vss"
            - "vsw"
            - "vis"
            - "vsf"
            - "wbxml"
            - "wmlc"
            - "wmlsc"
            - "wtb"
            - "nbp"
            - "wpd"
            - "wqd"
            - "stf"
            - "xar"
            - "xfdl"
            - "hvd"
            - "hvs"
            - "hvp"
            - "osf"
            - "osfpvg"
            - "saf"
            - "spf"
            - "cmp"
            - "zir"
            - "zirz"
            - "zaz"
            - "7z"
            - "abw"
            - "ace"
            - "*dmg"
            - "arj"
            - "aab"
            - "x32"
            - "u32"
            - "vox"
            - "aam"
            - "aas"
            - "bcpio"
            - "*bdoc"
            - "torrent"
            - "blb"
            - "blorb"
            - "bz"
            - "bz2"
            - "boz"
            - "cbr"
            - "cba"
            - "cbt"
            - "cbz"
            - "cb7"
            - "vcd"
            - "cfs"
            - "chat"
            - "pgn"
            - "crx"
            - "cco"
            - "nsc"
            - "cpio"
            - "csh"
            - "*deb"
            - "udeb"
            - "dgc"
            - "dir"
            - "dcr"
            - "dxr"
            - "cst"
            - "cct"
            - "cxt"
            - "w3d"
            - "fgd"
            - "swa"
            - "wad"
            - "ncx"
            - "dtb"
            - "res"
            - "dvi"
            - "evy"
            - "eva"
            - "bdf"
            - "gsf"
            - "psf"
            - "pcf"
            - "snf"
            - "pfa"
            - "pfb"
            - "pfm"
            - "afm"
            - "arc"
            - "spl"
            - "gca"
            - "ulx"
            - "gnumeric"
            - "gramps"
            - "gtar"
            - "hdf"
            - "php"
            - "install"
            - "*iso"
            - "*key"
            - "*numbers"
            - "*pages"
            - "jardiff"
            - "jnlp"
            - "kdbx"
            - "latex"
            - "luac"
            - "lzh"
            - "lha"
            - "run"
            - "mie"
            - "prc"
            - "mobi"
            - "application"
            - "lnk"
            - "wmd"
            - "wmz"
            - "xbap"
            - "mdb"
            - "obd"
            - "crd"
            - "clp"
            - "*exe"
            - "*dll"
            - "com"
            - "bat"
            - "*msi"
            - "mvb"
            - "m13"
            - "m14"
            - "*wmf"
            - "*wmz"
            - "*emf"
            - "emz"
            - "mny"
            - "pub"
            - "scd"
            - "trm"
            - "wri"
            - "nc"
            - "cdf"
            - "pac"
            - "nzb"
            - "pl"
            - "pm"
            - "*prc"
            - "*pdb"
            - "p12"
            - "pfx"
            - "p7b"
            - "spc"
            - "p7r"
            - "*rar"
            - "rpm"
            - "ris"
            - "sea"
            - "sh"
            - "shar"
            - "swf"
            - "xap"
            - "sql"
            - "sit"
            - "sitx"
            - "srt"
            - "sv4cpio"
            - "sv4crc"
            - "t3"
            - "gam"
            - "tar"
            - "tcl"
            - "tk"
            - "tex"
            - "tfm"
            - "texinfo"
            - "texi"
            - "*obj"
            - "ustar"
            - "hdd"
            - "ova"
            - "ovf"
            - "vbox"
            - "vbox-extpack"
            - "vdi"
            - "vhd"
            - "vmdk"
            - "src"
            - "webapp"
            - "der"
            - "crt"
            - "pem"
            - "fig"
            - "*xlf"
            - "xpi"
            - "xz"
            - "z1"
            - "z2"
            - "z3"
            - "z4"
            - "z5"
            - "z6"
            - "z7"
            - "z8"
            - "uva"
            - "uvva"
            - "eol"
            - "dra"
            - "dts"
            - "dtshd"
            - "lvp"
            - "pya"
            - "ecelp4800"
            - "ecelp7470"
            - "ecelp9600"
            - "rip"
            - "aac"
            - "aif"
            - "aiff"
            - "aifc"
            - "caf"
            - "flac"
            - "*m4a"
            - "mka"
            - "m3u"
            - "wax"
            - "wma"
            - "ram"
            - "ra"
            - "rmp"
            - "*ra"
            - "cdx"
            - "cif"
            - "cmdf"
            - "cml"
            - "csml"
            - "xyz"
            - "btif"
            - "pti"
            - "psd"
            - "azv"
            - "uvi"
            - "uvvi"
            - "uvg"
            - "uvvg"
            - "djvu"
            - "djv"
            - "*sub"
            - "dwg"
            - "dxf"
            - "fbs"
            - "fpx"
            - "fst"
            - "mmr"
            - "rlc"
            - "ico"
            - "dds"
            - "mdi"
            - "wdp"
            - "npx"
            - "b16"
            - "tap"
            - "vtf"
            - "wbmp"
            - "xif"
            - "pcx"
            - "3ds"
            - "ras"
            - "cmx"
            - "fh"
            - "fhc"
            - "fh4"
            - "fh5"
            - "fh7"
            - "*ico"
            - "jng"
            - "sid"
            - "*bmp"
            - "*pcx"
            - "pic"
            - "pct"
            - "pnm"
            - "pbm"
            - "pgm"
            - "ppm"
            - "rgb"
            - "tga"
            - "xbm"
            - "xpm"
            - "xwd"
            - "wsc"
            - "dae"
            - "dwf"
            - "gdl"
            - "gtw"
            - "mts"
            - "ogex"
            - "x_b"
            - "x_t"
            - "vds"
            - "usdz"
            - "bsp"
            - "vtu"
            - "dsc"
            - "curl"
            - "dcurl"
            - "mcurl"
            - "scurl"
            - "sub"
            - "fly"
            - "flx"
            - "gv"
            - "3dml"
            - "spot"
            - "jad"
            - "wml"
            - "wmls"
            - "s"
            - "asm"
            - "c"
            - "cc"
            - "cxx"
            - "cpp"
            - "h"
            - "hh"
            - "dic"
            - "htc"
            - "f"
            - "for"
            - "f77"
            - "f90"
            - "hbs"
            - "java"
            - "lua"
            - "mkd"
            - "nfo"
            - "opml"
            - "*org"
            - "p"
            - "pas"
            - "pde"
            - "sass"
            - "scss"
            - "etx"
            - "sfv"
            - "ymp"
            - "uu"
            - "vcs"
            - "vcf"
            - "uvh"
            - "uvvh"
            - "uvm"
            - "uvvm"
            - "uvp"
            - "uvvp"
            - "uvs"
            - "uvvs"
            - "uvv"
            - "uvvv"
            - "dvb"
            - "fvt"
            - "mxu"
            - "m4u"
            - "pyv"
            - "uvu"
            - "uvvu"
            - "viv"
            - "f4v"
            - "fli"
            - "flv"
            - "m4v"
            - "mkv"
            - "mk3d"
            - "mks"
            - "mng"
            - "asf"
            - "asx"
            - "vob"
            - "wm"
            - "wmv"
            - "wmx"
            - "wvx"
            - "avi"
            - "movie"
            - "smv"
            - "ice"
            - "mht"
            - null
          description: "The file format of the file, expressed as a file extension"
          nullable: true
          example: "pdf"
          x-speakeasy-unknown-values: "allow"
        "source_value":
          oneOf:
            - type: "string"
            - type: "number"
            - type: "boolean"
            - type: "object"
            - type: "array"
              items: {}
          nullable: true
          example: "application/pdf"
    GenderEnum:
      type: "object"
      properties:
        "value":
          type: "string"
          enum:
            - "male"
            - "female"
            - "non_binary"
            - "other"
            - "not_disclosed"
            - "diverse"
            - "unmapped_value"
            - null
          nullable: true
          x-speakeasy-unknown-values: "allow"
        "source_value":
          oneOf:
            - type: "string"
            - type: "number"
            - type: "boolean"
            - type: "object"
            - type: "array"
              items: {}
          nullable: true
    GroupTypeEnum:
      type: "object"
      properties:
        "value":
          type: "string"
          enum:
            - "workspace"
            - "team"
            - "department"
            - "group"
            - "organization"
            - "unmapped_value"
            - "cost_center"
            - null
          nullable: true
          example: "team"
          x-speakeasy-unknown-values: "allow"
        "source_value":
          oneOf:
            - type: "string"
            - type: "number"
            - type: "boolean"
            - type: "object"
            - type: "array"
              items: {}
          nullable: true
    HrisBatchDocumentUploadRequestDto:
      type: "object"
      properties:
        "items":
          type: "array"
          items: {"$ref": "#/components/schemas/HrisDocumentsUploadRequestDto"}
          description: "The batch of items to create"
      required:
        - "items"
    HRISBenefit:
      type: "object"
      properties:
        "id":
          type: "string"
          description: "Unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "remote_id":
          type: "string"
          description: "Provider's unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "name":
          type: "string"
          description: "The name of the benefit"
          nullable: true
          example: "Health Insurance"
        "benefit_type":
          allOf:
            - {"$ref": "#/components/schemas/BenefitsTypeEnum"}
          description: "The type of the benefit"
          nullable: true
        "provider":
          type: "string"
          description: "The provider of the benefit"
          nullable: true
          example: "Aetna"
        "description":
          type: "string"
          description: "The description of the benefit"
          nullable: true
          example: "Health insurance for employees"
        "created_at":
          type: "string"
          format: "date-time"
          description: "The date and time the benefit was created"
          nullable: true
          example: "2021-01-01T00:00:00Z"
        "updated_at":
          type: "string"
          format: "date-time"
          description: "The date and time the benefit was last updated"
          nullable: true
          example: "2021-01-01T00:00:00Z"
    HRISBenefitResult:
      type: "object"
      properties:
        "data": {"$ref": "#/components/schemas/HRISBenefit"}
        "raw":
          type: "array"
          items: {"$ref": "#/components/schemas/RawResponse"}
          nullable: true
      required:
        - "data"
    HRISBenefitsPaginated:
      type: "object"
      properties:
        "next_page":
          type: "string"
          nullable: true
          deprecated: true
        "next":
          type: "string"
          nullable: true
        "data":
          type: "array"
          items: {"$ref": "#/components/schemas/HRISBenefit"}
        "raw":
          type: "array"
          items: {"$ref": "#/components/schemas/RawResponse"}
          nullable: true
      required:
        - "data"
    HRISCostCenter:
      type: "object"
      properties:
        "id":
          type: "string"
          description: "Unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "remote_id":
          type: "string"
          description: "Provider's unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "unified_custom_fields":
          type: "object"
          additionalProperties: true
          description: "Custom Unified Fields configured in your StackOne project"
          nullable: true
          example: {"my_project_custom_field_1": "REF-1236", "my_project_custom_field_2": "some other value"}
        "name":
          type: "string"
          description: "The name of the group"
          nullable: true
          example: "Engineering"
        "parent_ids":
          type: "array"
          items:
            type: "string"
          description: "The list of parent group ids of the given group"
          nullable: true
          example: ["cxIQNjUyNDM0", "cxIQNjQzNzI0MQ"]
        "remote_parent_ids":
          type: "array"
          items:
            type: "string"
          description: "Provider's list of parent group remote ids of the given group"
          nullable: true
          example: ["652434", "6437241"]
        "owner_ids":
          type: "array"
          items:
            type: "string"
          description: "The list of group owner ids of the given group"
          nullable: true
          example: ["cxIQNjUyEDM0", "cxIQNjQzNzA0MQ"]
        "remote_owner_ids":
          type: "array"
          items:
            type: "string"
          description: "The list of remote group owner ids of the given group"
          nullable: true
          example: ["475364", "4327652"]
        "company_id":
          type: "string"
          description: "The id of the company that the group belongs to"
          nullable: true
          example: "1234567890"
        "remote_company_id":
          type: "string"
          description: "Provider's id of the company that the group belongs to"
          nullable: true
          example: "1234567890"
        "distribution_percentage":
          type: "number"
          description: "The distribution percentage for cost_center"
          nullable: true
          example: 85
        "type":
          allOf:
            - {"$ref": "#/components/schemas/GroupTypeEnum"}
          description: "The type of the group"
          nullable: true
    HRISCostCenterPaginated:
      type: "object"
      properties:
        "next_page":
          type: "string"
          nullable: true
          deprecated: true
        "next":
          type: "string"
          nullable: true
        "data":
          type: "array"
          items: {"$ref": "#/components/schemas/HRISCostCenter"}
        "raw":
          type: "array"
          items: {"$ref": "#/components/schemas/RawResponse"}
          nullable: true
      required:
        - "data"
    HRISCostCenterResult:
      type: "object"
      properties:
        "data": {"$ref": "#/components/schemas/HRISCostCenter"}
        "raw":
          type: "array"
          items: {"$ref": "#/components/schemas/RawResponse"}
          nullable: true
      required:
        - "data"
    HrisCreateEmployeeRequestDto:
      type: "object"
      properties:
        "first_name":
          type: "string"
          description: "The employee first name"
          nullable: true
          example: "Isaac"
        "last_name":
          type: "string"
          description: "The employee last name"
          nullable: true
          example: "Newton"
        "name":
          type: "string"
          description: "The employee name"
          nullable: true
          example: "Isaac Newton"
        "display_name":
          type: "string"
          description: "The employee display name"
          nullable: true
          example: "Sir Isaac Newton"
        "avatar_url":
          type: "string"
          description: "The employee avatar Url"
          nullable: true
          example: "https://example.com/avatar.png"
        "personal_email":
          type: "string"
          description: "The employee personal email"
          nullable: true
          example: "isaac.newton@example.com"
        "personal_phone_number":
          type: "string"
          description: "The employee personal phone number"
          nullable: true
          example: "+1234567890"
        "work_email":
          type: "string"
          description: "The employee work email"
          nullable: true
          example: "newton@example.com"
        "work_phone_number":
          type: "string"
          description: "The employee work phone number"
          nullable: true
          example: "+1234567890"
        "job_id":
          type: "string"
          description: "The employee job id"
          nullable: true
          example: "R-6789"
          deprecated: true
        "job_title":
          type: "string"
          description: "If the source of the job_title is the Employee's current Employment, and that Employment pertains exclusively to this Employee, then the active Employment job_title will also be written"
          nullable: true
          example: "Physicist"
        "department_id":
          type: "string"
          description: "The employee department id"
          nullable: true
          example: "3093"
        "team_id":
          type: "string"
          description: "The employee team id"
          nullable: true
          example: "2913"
        "department":
          type: "string"
          description: "The employee department"
          nullable: true
          example: "Physics"
        "manager_id":
          type: "string"
          description: "The employee manager ID"
          nullable: true
          example: "67890"
        "gender":
          allOf:
            - {"$ref": "#/components/schemas/GenderEnum"}
          description: "The employee gender"
          nullable: true
          example: "male"
        "preferred_language":
          allOf:
            - {"$ref": "#/components/schemas/PreferredLanguageEnum"}
          description: "The employee preferred language"
          nullable: true
          example: "eng"
        "ethnicity":
          allOf:
            - {"$ref": "#/components/schemas/EthnicityEnum"}
          description: "The employee ethnicity"
          nullable: true
          example: "white"
        "date_of_birth":
          type: "string"
          format: "date-time"
          description: "The employee date_of_birth"
          nullable: true
          example: "1990-01-01T00:00:00.000Z"
        "birthday":
          type: "string"
          format: "date-time"
          description: "The employee birthday"
          nullable: true
          example: "2021-01-01T00:00:00Z"
        "marital_status":
          allOf:
            - {"$ref": "#/components/schemas/MaritalStatusEnum"}
          description: "The employee marital status"
          nullable: true
          example: "single"
        "avatar":
          allOf:
            - {"$ref": "#/components/schemas/Image"}
          description: "The employee avatar"
          nullable: true
          example: "https://example.com/avatar.png"
        "hire_date":
          type: "string"
          format: "date-time"
          description: "The employee hire date"
          nullable: true
          example: "2021-01-01T00:00:00.000Z"
        "start_date":
          type: "string"
          format: "date-time"
          description: "The employee start date"
          nullable: true
          example: "2021-01-01T00:00:00.000Z"
        "employment_type":
          allOf:
            - {"$ref": "#/components/schemas/EmploymentTypeEnum"}
          description: "The employee employment type"
          nullable: true
          example: "permanent"
          deprecated: true
        "employment_contract_type":
          allOf:
            - {"$ref": "#/components/schemas/EmploymentScheduleTypeEnum"}
          description: "The employment work schedule type (e.g., full-time, part-time)"
          nullable: true
          example: "full_time"
          deprecated: true
        "employment_status":
          allOf:
            - {"$ref": "#/components/schemas/EmploymentStatusEnum"}
          description: "The employee employment status"
          nullable: true
          example: "active"
        "termination_date":
          type: "string"
          format: "date-time"
          description: "The employee termination date"
          nullable: true
          example: "2021-01-01T00:00:00Z"
        "company_name":
          type: "string"
          description: "The employee company name"
          nullable: true
          example: "Example Corp"
          deprecated: true
        "company_id":
          type: "string"
          description: "The employee company id"
          nullable: true
          example: "1234567890"
        "citizenships":
          type: "array"
          items: {"$ref": "#/components/schemas/CountryCodeEnum"}
          description: "The citizenships of the Employee"
          nullable: true
        "employments":
          type: "array"
          items: {"$ref": "#/components/schemas/CreateEmploymentApiModel"}
          description: "The employee employments"
          nullable: true
          deprecated: true
        "employment":
          allOf:
            - {"$ref": "#/components/schemas/CreateEmployeeEmploymentApiModel"}
          description: "The employee employment"
          nullable: true
        "custom_fields":
          type: "array"
          items: {"$ref": "#/components/schemas/CustomFields"}
          description: "The employee custom fields"
          nullable: true
        "benefits":
          type: "array"
          items: {"$ref": "#/components/schemas/CreateHRISBenefit"}
          description: "Current benefits of the employee"
          nullable: true
        "employee_number":
          type: "string"
          description: "The assigned employee number"
          nullable: true
          example: "125"
        "national_identity_number":
          allOf:
            - {"$ref": "#/components/schemas/NationalIdentityNumberApiModel"}
          description: "The national identity number"
          nullable: true
          deprecated: true
        "national_identity_numbers":
          type: "array"
          items: {"$ref": "#/components/schemas/NationalIdentityNumberApiModel"}
          description: "The national identity numbers"
          nullable: true
        "home_location":
          allOf:
            - {"$ref": "#/components/schemas/CreateEmployeeLocationApiModel"}
          description: "The employee home location"
          nullable: true
        "work_location":
          allOf:
            - {"$ref": "#/components/schemas/CreateEmployeeLocationApiModel"}
          description: "The employee work location"
          nullable: true
        "cost_centers":
          type: "array"
          items: {"$ref": "#/components/schemas/CreateCostCenterApiModel"}
          description: "The employee cost centers"
          nullable: true
        "passthrough":
          type: "object"
          additionalProperties: true
          description: "Value to pass through to the provider"
          nullable: true
          example: {"other_known_names": "John Doe"}
    HrisCreateEmploymentRequestDto:
      type: "object"
      properties:
        "unified_custom_fields":
          type: "object"
          additionalProperties: true
          description: "Custom Unified Fields configured in your StackOne project"
          nullable: true
          example: {"my_project_custom_field_1": "REF-1236", "my_project_custom_field_2": "some other value"}
        "job_title":
          type: "string"
          description: "The job title of the employee"
          nullable: true
          example: "Software Engineer"
        "pay_rate":
          type: "string"
          description: "The pay rate for the employee"
          nullable: true
          example: "40.00"
        "pay_period":
          allOf:
            - {"$ref": "#/components/schemas/PayPeriodEnum"}
          description: "The pay period"
          nullable: true
          example: "monthly"
        "pay_frequency":
          allOf:
            - {"$ref": "#/components/schemas/PayFrequencyEnum"}
          description: "The pay frequency"
          nullable: true
          example: "hourly"
        "pay_currency":
          type: "string"
          description: "The currency used for pay"
          nullable: true
          example: "USD"
        "effective_date":
          type: "string"
          format: "date-time"
          description: "The effective date of the employment contract"
          nullable: true
          example: "2021-01-01T01:01:01.000Z"
        "end_date":
          type: "string"
          format: "date-time"
          description: "The end date of employment"
          nullable: true
          example: "2021-01-01T01:01:01.000Z"
        "grade":
          allOf:
            - {"$ref": "#/components/schemas/EmploymentGradeApiModel"}
          description: "Represents the employee’s position within the organizational hierarchy."
          nullable: true
        "employment_type":
          allOf:
            - {"$ref": "#/components/schemas/EmploymentTypeEnum"}
          description: "The type of employment (e.g., contractor, permanent)"
          nullable: true
          example: "permanent"
          deprecated: true
        "employment_contract_type":
          allOf:
            - {"$ref": "#/components/schemas/EmploymentScheduleTypeEnum"}
          description: "The employment work schedule type (e.g., full-time, part-time)"
          nullable: true
          example: "full_time"
          deprecated: true
        "work_time":
          allOf:
            - {"$ref": "#/components/schemas/WorkTimeApiModel"}
          nullable: true
        "payroll_code":
          type: "string"
          description: "The payroll code of the employee"
          nullable: true
          example: "PC1"
        "job_id":
          type: "string"
          description: "The employee job id"
          nullable: true
          example: "5290"
        "passthrough":
          type: "object"
          additionalProperties: true
          description: "Value to pass through to the provider"
          nullable: true
          example: {"other_known_names": "John Doe"}
    HrisCreateTimeOffRequestDto:
      type: "object"
      properties:
        "approver_id":
          type: "string"
          description: "The approver ID"
          nullable: true
          example: "1687-4"
        "status":
          allOf:
            - {"$ref": "#/components/schemas/TimeOffStatusEnum"}
          description: "The status of the time off request"
          nullable: true
        "type":
          allOf:
            - {"$ref": "#/components/schemas/TimeOffTypeEnum"}
          description: "The type of the time off request"
          nullable: true
          deprecated: true
        "start_date":
          type: "string"
          format: "datetime-local"
          description: "The start date of the time off request (ISO8601 date-time without timezone)"
          nullable: true
          example: "2021-01-01T01:01:01.000"
        "end_date":
          type: "string"
          format: "datetime-local"
          description: "Inclusive end date of the time off request (ISO8601 date-time without timezone). The time off includes this day"
          nullable: true
          example: "2021-01-01T01:01:01.000"
        "start_half_day":
          oneOf:
            - type: "boolean"
            - type: "string"
              enum:
                - "true"
                - "false"
          description: "True if the start of the time off request begins half way through the day"
          nullable: true
          example: true
        "end_half_day":
          oneOf:
            - type: "boolean"
            - type: "string"
              enum:
                - "true"
                - "false"
          description: "True if the end of the time off request ends half way through the day"
          nullable: true
          example: true
        "time_off_policy_id":
          type: "string"
          description: "The time off policy id associated with this time off request"
          nullable: true
          example: "cx280928933"
        "reason":
          allOf:
            - {"$ref": "#/components/schemas/Reason"}
          nullable: true
        "comment":
          type: "string"
          description: "Allows users to provide additional context or notes for their time off request"
          nullable: true
          example: "Taking a day off for personal reasons"
        "passthrough":
          type: "object"
          additionalProperties: true
          description: "Value to pass through to the provider"
          nullable: true
          example: {"other_known_names": "John Doe"}
    HrisCreateWorkEligibilityRequestDto:
      type: "object"
      properties:
        "document":
          allOf:
            - {"$ref": "#/components/schemas/File"}
          nullable: true
        "issued_by":
          allOf:
            - {"$ref": "#/components/schemas/CountryCodeEnum"}
          description: "The country code of the issued by authority"
          nullable: true
        "number":
          type: "string"
          nullable: true
          example: "1234567890"
        "sub_type":
          type: "string"
          nullable: true
          example: "H1B"
        "type":
          allOf:
            - {"$ref": "#/components/schemas/WorkEligibilityTypeEnum"}
          nullable: true
          example: "visa"
        "valid_from":
          type: "string"
          format: "date-time"
          nullable: true
          example: "2021-01-01T00:00:00.000Z"
        "valid_to":
          type: "string"
          format: "date-time"
          nullable: true
          example: "2021-01-01T00:00:00.000Z"
        "passthrough":
          type: "object"
          additionalProperties: true
          description: "Value to pass through to the provider"
          nullable: true
          example: {"other_known_names": "John Doe"}
    HRISDepartment:
      type: "object"
      properties:
        "id":
          type: "string"
          description: "Unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "remote_id":
          type: "string"
          description: "Provider's unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "unified_custom_fields":
          type: "object"
          additionalProperties: true
          description: "Custom Unified Fields configured in your StackOne project"
          nullable: true
          example: {"my_project_custom_field_1": "REF-1236", "my_project_custom_field_2": "some other value"}
        "name":
          type: "string"
          description: "The name of the group"
          nullable: true
          example: "Engineering"
        "parent_ids":
          type: "array"
          items:
            type: "string"
          description: "The list of parent group ids of the given group"
          nullable: true
          example: ["cxIQNjUyNDM0", "cxIQNjQzNzI0MQ"]
        "remote_parent_ids":
          type: "array"
          items:
            type: "string"
          description: "Provider's list of parent group remote ids of the given group"
          nullable: true
          example: ["652434", "6437241"]
        "owner_ids":
          type: "array"
          items:
            type: "string"
          description: "The list of group owner ids of the given group"
          nullable: true
          example: ["cxIQNjUyEDM0", "cxIQNjQzNzA0MQ"]
        "remote_owner_ids":
          type: "array"
          items:
            type: "string"
          description: "The list of remote group owner ids of the given group"
          nullable: true
          example: ["475364", "4327652"]
        "company_id":
          type: "string"
          description: "The id of the company that the group belongs to"
          nullable: true
          example: "1234567890"
        "remote_company_id":
          type: "string"
          description: "Provider's id of the company that the group belongs to"
          nullable: true
          example: "1234567890"
        "type":
          allOf:
            - {"$ref": "#/components/schemas/DepartmentTypeEnum"}
          description: "The type of the department group"
          nullable: true
          example: "department"
    HRISDepartmentsPaginated:
      type: "object"
      properties:
        "next_page":
          type: "string"
          nullable: true
          deprecated: true
        "next":
          type: "string"
          nullable: true
        "data":
          type: "array"
          items: {"$ref": "#/components/schemas/HRISDepartment"}
        "raw":
          type: "array"
          items: {"$ref": "#/components/schemas/RawResponse"}
          nullable: true
      required:
        - "data"
    HRISDepartmentsResult:
      type: "object"
      properties:
        "data": {"$ref": "#/components/schemas/HRISDepartment"}
        "raw":
          type: "array"
          items: {"$ref": "#/components/schemas/RawResponse"}
          nullable: true
      required:
        - "data"
    HRISDivision:
      type: "object"
      properties:
        "id":
          type: "string"
          description: "Unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "remote_id":
          type: "string"
          description: "Provider's unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "unified_custom_fields":
          type: "object"
          additionalProperties: true
          description: "Custom Unified Fields configured in your StackOne project"
          nullable: true
          example: {"my_project_custom_field_1": "REF-1236", "my_project_custom_field_2": "some other value"}
        "name":
          type: "string"
          description: "The name of the group"
          nullable: true
          example: "Engineering"
        "parent_ids":
          type: "array"
          items:
            type: "string"
          description: "The list of parent group ids of the given group"
          nullable: true
          example: ["cxIQNjUyNDM0", "cxIQNjQzNzI0MQ"]
        "remote_parent_ids":
          type: "array"
          items:
            type: "string"
          description: "Provider's list of parent group remote ids of the given group"
          nullable: true
          example: ["652434", "6437241"]
        "owner_ids":
          type: "array"
          items:
            type: "string"
          description: "The list of group owner ids of the given group"
          nullable: true
          example: ["cxIQNjUyEDM0", "cxIQNjQzNzA0MQ"]
        "remote_owner_ids":
          type: "array"
          items:
            type: "string"
          description: "The list of remote group owner ids of the given group"
          nullable: true
          example: ["475364", "4327652"]
        "company_id":
          type: "string"
          description: "The id of the company that the group belongs to"
          nullable: true
          example: "1234567890"
        "remote_company_id":
          type: "string"
          description: "Provider's id of the company that the group belongs to"
          nullable: true
          example: "1234567890"
        "type":
          allOf:
            - {"$ref": "#/components/schemas/DivisionTypeEnum"}
          description: "The type of the division group"
          nullable: true
          example: "division"
    HRISDivisionsPaginated:
      type: "object"
      properties:
        "next_page":
          type: "string"
          nullable: true
          deprecated: true
        "next":
          type: "string"
          nullable: true
        "data":
          type: "array"
          items: {"$ref": "#/components/schemas/HRISDivision"}
        "raw":
          type: "array"
          items: {"$ref": "#/components/schemas/RawResponse"}
          nullable: true
      required:
        - "data"
    HRISDivisionsResult:
      type: "object"
      properties:
        "data": {"$ref": "#/components/schemas/HRISDivision"}
        "raw":
          type: "array"
          items: {"$ref": "#/components/schemas/RawResponse"}
          nullable: true
      required:
        - "data"
    HrisDocumentApiModel:
      type: "object"
      properties:
        "id":
          type: "string"
          description: "Unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "remote_id":
          type: "string"
          description: "Provider's unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "name":
          type: "string"
          description: "The name of the file"
          nullable: true
          example: "My Document"
        "path":
          type: "string"
          description: "The path where the file is stored"
          nullable: true
          example: "/path/to/file"
        "category":
          allOf:
            - {"$ref": "#/components/schemas/HrisDocumentTypeEnum"}
          description: "The category of the the document"
          nullable: true
          example: "templates, forms, backups, etc."
        "contents":
          type: "array"
          items: {"$ref": "#/components/schemas/Content"}
          description: "The content of the file. Deprecated, use `url` and `file_format` one level up instead"
          nullable: true
          deprecated: true
        "category_id":
          type: "string"
          description: "The categoryId of the documents"
          nullable: true
          example: "6530"
        "created_at":
          type: "string"
          format: "date-time"
          description: "The creation date of the file"
          nullable: true
          example: "2021-01-01T01:01:01.000Z"
        "updated_at":
          type: "string"
          format: "date-time"
          description: "The update date of the file"
          nullable: true
          example: "2021-01-02T01:01:01.000Z"
        "remote_url":
          type: "string"
          description: "URL where the file content is located"
          nullable: true
          example: "https://example.com/file.pdf"
        "file_format":
          allOf:
            - {"$ref": "#/components/schemas/FileFormatEnum"}
          description: "The file format of the file"
          nullable: true
        "unified_custom_fields":
          type: "object"
          additionalProperties: true
          description: "Custom Unified Fields configured in your StackOne project"
          nullable: true
          example: {"my_project_custom_field_1": "REF-1236", "my_project_custom_field_2": "some other value"}
        "type":
          allOf:
            - {"$ref": "#/components/schemas/HrisDocumentTypeEnum"}
          description: "The content type of the document"
          nullable: true
          deprecated: true
    HrisDocumentResult:
      type: "object"
      properties:
        "data": {"$ref": "#/components/schemas/HrisDocumentApiModel"}
        "raw":
          type: "array"
          items: {"$ref": "#/components/schemas/RawResponse"}
          nullable: true
      required:
        - "data"
    HrisDocumentsPaginated:
      type: "object"
      properties:
        "next_page":
          type: "string"
          nullable: true
          deprecated: true
        "next":
          type: "string"
          nullable: true
        "data":
          type: "array"
          items: {"$ref": "#/components/schemas/HrisDocumentApiModel"}
        "raw":
          type: "array"
          items: {"$ref": "#/components/schemas/RawResponse"}
          nullable: true
      required:
        - "data"
    HrisDocumentsUploadCategoryEnumApiModel:
      type: "object"
      properties:
        "value":
          type: "string"
          enum:
            - "application"
            - "academic"
            - "contract"
            - "certificates"
            - "visa"
            - "passport"
            - "driver_license"
            - "payslip"
            - "payroll"
            - "appraisal"
            - "resume"
            - "policy"
            - "cover_letter"
            - "offer_letter"
            - "policy_agreement"
            - "home_address"
            - "national_id"
            - "confidential"
            - "signed"
            - "shared"
            - "other"
            - "benefit"
            - "id_verification"
            - "background_check"
            - "unmapped_value"
            - null
          description: "The category name to associate with the file"
          nullable: true
          example: "reports"
          x-speakeasy-unknown-values: "allow"
        "source_value":
          type: "string"
          description: "The provider specific category for associating uploaded files, if provided, the value will be ignored."
          nullable: true
          example: "550e8400-e29b-41d4-a716-446655440000"
    HrisDocumentsUploadRequestDto:
      type: "object"
      properties:
        "name":
          type: "string"
          description: "The filename of the file to upload"
          nullable: true
          example: "weather-forecast"
        "file_format":
          allOf:
            - {"$ref": "#/components/schemas/FileFormatEnum"}
          description: "The file format of the file"
          nullable: true
        "content":
          type: "string"
          description: "The base64 encoded content of the file to upload"
          nullable: true
          example: "VGhpcyBpc24ndCByZWFsbHkgYSBzYW1wbGUgZmlsZSwgYnV0IG5vIG9uZSB3aWxsIGV2ZXIga25vdyE"
        "category_id":
          type: "string"
          description: "The categoryId of the documents"
          nullable: true
          example: "6530"
        "path":
          type: "string"
          description: "The path for the file to be uploaded to"
          nullable: true
          example: "/path/to/file"
        "confidential":
          allOf:
            - {"$ref": "#/components/schemas/ConfidentialEnumApiModel"}
          description: "The confidentiality level of the file to be uploaded"
          nullable: true
        "category":
          allOf:
            - {"$ref": "#/components/schemas/HrisDocumentsUploadCategoryEnumApiModel"}
          description: "The category to be associated with the file to be uploaded. Id will take precedence over name."
          nullable: true
          example: {"name": "reports", "id": "550e8400-e29b-41d4-a716-446655440000"}
    HrisDocumentTypeEnum:
      type: "object"
      properties:
        "value":
          type: "string"
          enum:
            - "application"
            - "academic"
            - "contract"
            - "certificates"
            - "visa"
            - "passport"
            - "driver_license"
            - "payslip"
            - "payroll"
            - "appraisal"
            - "resume"
            - "policy"
            - "cover_letter"
            - "offer_letter"
            - "policy_agreement"
            - "home_address"
            - "national_id"
            - "confidential"
            - "signed"
            - "shared"
            - "other"
            - "benefit"
            - "id_verification"
            - "background_check"
            - "unmapped_value"
            - null
          description: "The category of the file"
          nullable: true
          x-speakeasy-unknown-values: "allow"
        "source_value":
          oneOf:
            - type: "string"
            - type: "number"
            - type: "boolean"
            - type: "object"
            - type: "array"
              items: {}
          nullable: true
    HRISGroup:
      type: "object"
      properties:
        "id":
          type: "string"
          description: "Unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "remote_id":
          type: "string"
          description: "Provider's unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "unified_custom_fields":
          type: "object"
          additionalProperties: true
          description: "Custom Unified Fields configured in your StackOne project"
          nullable: true
          example: {"my_project_custom_field_1": "REF-1236", "my_project_custom_field_2": "some other value"}
        "name":
          type: "string"
          description: "The name of the group"
          nullable: true
          example: "Engineering"
        "parent_ids":
          type: "array"
          items:
            type: "string"
          description: "The list of parent group ids of the given group"
          nullable: true
          example: ["cxIQNjUyNDM0", "cxIQNjQzNzI0MQ"]
        "remote_parent_ids":
          type: "array"
          items:
            type: "string"
          description: "Provider's list of parent group remote ids of the given group"
          nullable: true
          example: ["652434", "6437241"]
        "owner_ids":
          type: "array"
          items:
            type: "string"
          description: "The list of group owner ids of the given group"
          nullable: true
          example: ["cxIQNjUyEDM0", "cxIQNjQzNzA0MQ"]
        "remote_owner_ids":
          type: "array"
          items:
            type: "string"
          description: "The list of remote group owner ids of the given group"
          nullable: true
          example: ["475364", "4327652"]
        "company_id":
          type: "string"
          description: "The id of the company that the group belongs to"
          nullable: true
          example: "1234567890"
        "remote_company_id":
          type: "string"
          description: "Provider's id of the company that the group belongs to"
          nullable: true
          example: "1234567890"
        "type":
          allOf:
            - {"$ref": "#/components/schemas/GroupTypeEnum"}
          description: "The type of the group"
          nullable: true
    HRISGroupsPaginated:
      type: "object"
      properties:
        "next_page":
          type: "string"
          nullable: true
          deprecated: true
        "next":
          type: "string"
          nullable: true
        "data":
          type: "array"
          items: {"$ref": "#/components/schemas/HRISGroup"}
        "raw":
          type: "array"
          items: {"$ref": "#/components/schemas/RawResponse"}
          nullable: true
      required:
        - "data"
    HRISGroupsResult:
      type: "object"
      properties:
        "data": {"$ref": "#/components/schemas/HRISGroup"}
        "raw":
          type: "array"
          items: {"$ref": "#/components/schemas/RawResponse"}
          nullable: true
      required:
        - "data"
    HrisInviteEmployeeRequestDto:
      type: "object"
      properties:
        "passthrough":
          type: "object"
          additionalProperties: true
          description: "Value to pass through to the provider"
          nullable: true
          example: {"other_known_names": "John Doe"}
    HRISLocation:
      type: "object"
      properties:
        "id":
          type: "string"
          description: "Unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "remote_id":
          type: "string"
          description: "Provider's unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "unified_custom_fields":
          type: "object"
          additionalProperties: true
          description: "Custom Unified Fields configured in your StackOne project"
          nullable: true
          example: {"my_project_custom_field_1": "REF-1236", "my_project_custom_field_2": "some other value"}
        "employee_id":
          type: "string"
          description: "The employee ID"
          nullable: true
          example: "1687-3"
        "remote_employee_id":
          type: "string"
          description: "Provider's unique identifier of the employee"
          nullable: true
          example: "e3cb75bf-aa84-466e-a6c1-b8322b257a48"
        "name":
          type: "string"
          description: "The name of the location"
          nullable: true
          example: "Woolsthorpe Manor"
        "phone_number":
          type: "string"
          description: "The phone number of the location"
          nullable: true
          example: "+44 1476 860 364"
        "street_1":
          type: "string"
          description: "The first line of the address"
          nullable: true
          example: "Water Lane"
        "street_2":
          type: "string"
          description: "The second line of the address"
          nullable: true
          example: "Woolsthorpe by Colsterworth"
        "city":
          type: "string"
          description: "The city where the location is situated"
          nullable: true
          example: "Grantham"
        "state":
          type: "string"
          description: "The state where the location is situated"
          nullable: true
          example: "Lincolnshire"
        "zip_code":
          type: "string"
          description: "The ZIP code/Postal code of the location"
          nullable: true
          example: "NG33 5NR"
        "country":
          allOf:
            - {"$ref": "#/components/schemas/CountryCodeEnum"}
          description: "The country code"
          nullable: true
        "location_type":
          allOf:
            - {"$ref": "#/components/schemas/LocationTypeEnum"}
          description: "The location type"
          nullable: true
          example: "work"
        "created_at":
          type: "string"
          format: "date-time"
          description: "The created_at date"
          nullable: true
          example: "2021-01-01T01:01:01.000Z"
        "updated_at":
          type: "string"
          format: "date-time"
          description: "The updated_at date"
          nullable: true
          example: "2021-01-01T01:01:01.000Z"
    HRISLocationResult:
      type: "object"
      properties:
        "data": {"$ref": "#/components/schemas/HRISLocation"}
        "raw":
          type: "array"
          items: {"$ref": "#/components/schemas/RawResponse"}
          nullable: true
      required:
        - "data"
    HRISLocationsPaginated:
      type: "object"
      properties:
        "next_page":
          type: "string"
          nullable: true
          deprecated: true
        "next":
          type: "string"
          nullable: true
        "data":
          type: "array"
          items: {"$ref": "#/components/schemas/HRISLocation"}
        "raw":
          type: "array"
          items: {"$ref": "#/components/schemas/RawResponse"}
          nullable: true
      required:
        - "data"
    HrisShift:
      type: "object"
      properties:
        "id":
          type: "string"
          description: "Unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "remote_id":
          type: "string"
          description: "Provider's unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "employee_id":
          type: "string"
          description: "The employee ID associated with this shift"
          nullable: true
          example: "emp_123456789"
        "location_id":
          type: "string"
          description: "The location ID where this shift takes place"
          nullable: true
          example: "loc_123456789"
        "company_id":
          type: "string"
          description: "The company ID associated with this shift"
          nullable: true
          example: "comp_123456789"
        "start_time":
          type: "string"
          format: "date-time"
          description: "The start time of the shift"
          nullable: true
          example: "2024-03-20T09:00:00Z"
        "end_time":
          type: "string"
          format: "date-time"
          description: "The end time of the shift"
          nullable: true
          example: "2024-03-20T17:00:00Z"
        "break_duration":
          type: "string"
          description: "The total break duration for this shift in ISO 8601 duration format"
          nullable: true
          example: "PT1H30M"
        "status":
          allOf:
            - {"$ref": "#/components/schemas/ShiftStatusEnum"}
          description: "The status of the shift"
          nullable: true
        "approval_status":
          allOf:
            - {"$ref": "#/components/schemas/ShiftApprovalStatusEnum"}
          description: "The approval status of the shift"
          nullable: true
        "breaks":
          type: "array"
          items: {"$ref": "#/components/schemas/ShiftBreak"}
          description: "The breaks taken during this shift"
          nullable: true
        "created_at":
          type: "string"
          format: "date-time"
          description: "The date and time the shift was created"
          nullable: true
          example: "2024-03-20T08:00:00Z"
        "updated_at":
          type: "string"
          format: "date-time"
          description: "The date and time the shift was last updated"
          nullable: true
          example: "2024-03-20T08:00:00Z"
    HrisShiftResult:
      type: "object"
      properties:
        "data":
          allOf:
            - {"$ref": "#/components/schemas/HrisShift"}
          nullable: true
        "raw":
          type: "array"
          items: {"$ref": "#/components/schemas/RawResponse"}
          nullable: true
    HrisShiftsPaginated:
      type: "object"
      properties:
        "next":
          type: "string"
          nullable: true
        "data":
          type: "array"
          items: {"$ref": "#/components/schemas/HrisShift"}
          nullable: true
        "raw":
          type: "array"
          items: {"$ref": "#/components/schemas/RawResponse"}
          nullable: true
    HRISTeam:
      type: "object"
      properties:
        "id":
          type: "string"
          description: "Unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "remote_id":
          type: "string"
          description: "Provider's unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "unified_custom_fields":
          type: "object"
          additionalProperties: true
          description: "Custom Unified Fields configured in your StackOne project"
          nullable: true
          example: {"my_project_custom_field_1": "REF-1236", "my_project_custom_field_2": "some other value"}
        "name":
          type: "string"
          description: "The name of the group"
          nullable: true
          example: "Engineering"
        "parent_ids":
          type: "array"
          items:
            type: "string"
          description: "The list of parent group ids of the given group"
          nullable: true
          example: ["cxIQNjUyNDM0", "cxIQNjQzNzI0MQ"]
        "remote_parent_ids":
          type: "array"
          items:
            type: "string"
          description: "Provider's list of parent group remote ids of the given group"
          nullable: true
          example: ["652434", "6437241"]
        "owner_ids":
          type: "array"
          items:
            type: "string"
          description: "The list of group owner ids of the given group"
          nullable: true
          example: ["cxIQNjUyEDM0", "cxIQNjQzNzA0MQ"]
        "remote_owner_ids":
          type: "array"
          items:
            type: "string"
          description: "The list of remote group owner ids of the given group"
          nullable: true
          example: ["475364", "4327652"]
        "company_id":
          type: "string"
          description: "The id of the company that the group belongs to"
          nullable: true
          example: "1234567890"
        "remote_company_id":
          type: "string"
          description: "Provider's id of the company that the group belongs to"
          nullable: true
          example: "1234567890"
        "type":
          allOf:
            - {"$ref": "#/components/schemas/TeamTypeEnum"}
          description: "The type of the team group"
          nullable: true
          example: "team"
    HRISTeamsPaginated:
      type: "object"
      properties:
        "next_page":
          type: "string"
          nullable: true
          deprecated: true
        "next":
          type: "string"
          nullable: true
        "data":
          type: "array"
          items: {"$ref": "#/components/schemas/HRISTeam"}
        "raw":
          type: "array"
          items: {"$ref": "#/components/schemas/RawResponse"}
          nullable: true
      required:
        - "data"
    HRISTeamsResult:
      type: "object"
      properties:
        "data": {"$ref": "#/components/schemas/HRISTeam"}
        "raw":
          type: "array"
          items: {"$ref": "#/components/schemas/RawResponse"}
          nullable: true
      required:
        - "data"
    HrisUpdateEmployeeRequestDto:
      type: "object"
      properties:
        "first_name":
          type: "string"
          description: "The employee first name"
          nullable: true
          example: "Isaac"
        "last_name":
          type: "string"
          description: "The employee last name"
          nullable: true
          example: "Newton"
        "name":
          type: "string"
          description: "The employee name"
          nullable: true
          example: "Isaac Newton"
        "display_name":
          type: "string"
          description: "The employee display name"
          nullable: true
          example: "Sir Isaac Newton"
        "avatar_url":
          type: "string"
          description: "The employee avatar Url"
          nullable: true
          example: "https://example.com/avatar.png"
        "personal_email":
          type: "string"
          description: "The employee personal email"
          nullable: true
          example: "isaac.newton@example.com"
        "personal_phone_number":
          type: "string"
          description: "The employee personal phone number"
          nullable: true
          example: "+1234567890"
        "work_email":
          type: "string"
          description: "The employee work email"
          nullable: true
          example: "newton@example.com"
        "work_phone_number":
          type: "string"
          description: "The employee work phone number"
          nullable: true
          example: "+1234567890"
        "job_id":
          type: "string"
          description: "The employee job id"
          nullable: true
          example: "R-6789"
          deprecated: true
        "job_title":
          type: "string"
          description: "If the source of the job_title is the Employee's current Employment, and that Employment pertains exclusively to this Employee, then the active Employment job_title will also be written"
          nullable: true
          example: "Physicist"
        "department_id":
          type: "string"
          description: "The employee department id"
          nullable: true
          example: "3093"
        "team_id":
          type: "string"
          description: "The employee team id"
          nullable: true
          example: "2913"
        "department":
          type: "string"
          description: "The employee department"
          nullable: true
          example: "Physics"
        "manager_id":
          type: "string"
          description: "The employee manager ID"
          nullable: true
          example: "67890"
        "gender":
          allOf:
            - {"$ref": "#/components/schemas/GenderEnum"}
          description: "The employee gender"
          nullable: true
          example: "male"
        "preferred_language":
          allOf:
            - {"$ref": "#/components/schemas/PreferredLanguageEnum"}
          description: "The employee preferred language"
          nullable: true
          example: "eng"
        "ethnicity":
          allOf:
            - {"$ref": "#/components/schemas/EthnicityEnum"}
          description: "The employee ethnicity"
          nullable: true
          example: "white"
        "date_of_birth":
          type: "string"
          format: "date-time"
          description: "The employee date_of_birth"
          nullable: true
          example: "1990-01-01T00:00:00.000Z"
        "birthday":
          type: "string"
          format: "date-time"
          description: "The employee birthday"
          nullable: true
          example: "2021-01-01T00:00:00Z"
        "marital_status":
          allOf:
            - {"$ref": "#/components/schemas/MaritalStatusEnum"}
          description: "The employee marital status"
          nullable: true
          example: "single"
        "avatar":
          allOf:
            - {"$ref": "#/components/schemas/Image"}
          description: "The employee avatar"
          nullable: true
          example: "https://example.com/avatar.png"
        "hire_date":
          type: "string"
          format: "date-time"
          description: "The employee hire date"
          nullable: true
          example: "2021-01-01T00:00:00.000Z"
        "start_date":
          type: "string"
          format: "date-time"
          description: "The employee start date"
          nullable: true
          example: "2021-01-01T00:00:00.000Z"
        "employment_type":
          allOf:
            - {"$ref": "#/components/schemas/EmploymentTypeEnum"}
          description: "The employee employment type"
          nullable: true
          example: "permanent"
          deprecated: true
        "employment_contract_type":
          allOf:
            - {"$ref": "#/components/schemas/EmploymentScheduleTypeEnum"}
          description: "The employment work schedule type (e.g., full-time, part-time)"
          nullable: true
          example: "full_time"
          deprecated: true
        "employment_status":
          allOf:
            - {"$ref": "#/components/schemas/EmploymentStatusEnum"}
          description: "The employee employment status"
          nullable: true
          example: "active"
        "termination_date":
          type: "string"
          format: "date-time"
          description: "The employee termination date"
          nullable: true
          example: "2021-01-01T00:00:00Z"
        "company_name":
          type: "string"
          description: "The employee company name"
          nullable: true
          example: "Example Corp"
          deprecated: true
        "company_id":
          type: "string"
          description: "The employee company id"
          nullable: true
          example: "1234567890"
        "citizenships":
          type: "array"
          items: {"$ref": "#/components/schemas/CountryCodeEnum"}
          description: "The citizenships of the Employee"
          nullable: true
        "employment":
          allOf:
            - {"$ref": "#/components/schemas/CreateEmployeeEmploymentApiModel"}
          description: "The employee employment"
          nullable: true
        "custom_fields":
          type: "array"
          items: {"$ref": "#/components/schemas/CustomFields"}
          description: "The employee custom fields"
          nullable: true
        "benefits":
          type: "array"
          items: {"$ref": "#/components/schemas/CreateHRISBenefit"}
          description: "Current benefits of the employee"
          nullable: true
        "employee_number":
          type: "string"
          description: "The assigned employee number"
          nullable: true
          example: "125"
        "national_identity_number":
          allOf:
            - {"$ref": "#/components/schemas/NationalIdentityNumberApiModel"}
          description: "The national identity number"
          nullable: true
          deprecated: true
        "national_identity_numbers":
          type: "array"
          items: {"$ref": "#/components/schemas/NationalIdentityNumberApiModel"}
          description: "The national identity numbers"
          nullable: true
        "home_location":
          allOf:
            - {"$ref": "#/components/schemas/CreateEmployeeLocationApiModel"}
          description: "The employee home location"
          nullable: true
        "work_location":
          allOf:
            - {"$ref": "#/components/schemas/CreateEmployeeLocationApiModel"}
          description: "The employee work location"
          nullable: true
        "passthrough":
          type: "object"
          additionalProperties: true
          description: "Value to pass through to the provider"
          nullable: true
          example: {"other_known_names": "John Doe"}
    HrisUpdateEmploymentRequestDto:
      type: "object"
      properties:
        "unified_custom_fields":
          type: "object"
          additionalProperties: true
          description: "Custom Unified Fields configured in your StackOne project"
          nullable: true
          example: {"my_project_custom_field_1": "REF-1236", "my_project_custom_field_2": "some other value"}
        "job_title":
          type: "string"
          description: "The job title of the employee"
          nullable: true
          example: "Software Engineer"
        "pay_rate":
          type: "string"
          description: "The pay rate for the employee"
          nullable: true
          example: "40.00"
        "pay_period":
          allOf:
            - {"$ref": "#/components/schemas/PayPeriodEnum"}
          description: "The pay period"
          nullable: true
          example: "monthly"
        "pay_frequency":
          allOf:
            - {"$ref": "#/components/schemas/PayFrequencyEnum"}
          description: "The pay frequency"
          nullable: true
          example: "hourly"
        "pay_currency":
          type: "string"
          description: "The currency used for pay"
          nullable: true
          example: "USD"
        "effective_date":
          type: "string"
          format: "date-time"
          description: "The effective date of the employment contract"
          nullable: true
          example: "2021-01-01T01:01:01.000Z"
        "end_date":
          type: "string"
          format: "date-time"
          description: "The end date of employment"
          nullable: true
          example: "2021-01-01T01:01:01.000Z"
        "grade":
          allOf:
            - {"$ref": "#/components/schemas/EmploymentGradeApiModel"}
          description: "Represents the employee’s position within the organizational hierarchy."
          nullable: true
        "employment_type":
          allOf:
            - {"$ref": "#/components/schemas/EmploymentTypeEnum"}
          description: "The type of employment (e.g., contractor, permanent)"
          nullable: true
          example: "permanent"
          deprecated: true
        "employment_contract_type":
          allOf:
            - {"$ref": "#/components/schemas/EmploymentScheduleTypeEnum"}
          description: "The employment work schedule type (e.g., full-time, part-time)"
          nullable: true
          example: "full_time"
          deprecated: true
        "work_time":
          allOf:
            - {"$ref": "#/components/schemas/WorkTimeApiModel"}
          nullable: true
        "payroll_code":
          type: "string"
          description: "The payroll code of the employee"
          nullable: true
          example: "PC1"
        "passthrough":
          type: "object"
          additionalProperties: true
          description: "Value to pass through to the provider"
          nullable: true
          example: {"other_known_names": "John Doe"}
    Image:
      type: "object"
      properties:
        "url":
          type: "string"
          nullable: true
        "base64":
          type: "string"
          nullable: true
    InviteEmployeeResult:
      type: "object"
      properties:
        "statusCode":
          type: "number"
          example: 200
        "message":
          type: "string"
          example: "Record invited successfully"
        "timestamp":
          type: "string"
          format: "date-time"
          example: "2021-01-01T01:01:01.000Z"
        "data": {"$ref": "#/components/schemas/CreateResultDataApiModel"}
      required:
        - "statusCode"
        - "message"
        - "timestamp"
        - "data"
    ISO3166_2SubDivisionEnum:
      type: "object"
      properties:
        "value":
          type: "string"
          description: "state (ISO3166-2 Sub Division Code) - value must be a valid enum value"
          nullable: true
        "source_value":
          oneOf:
            - type: "string"
            - type: "number"
            - type: "boolean"
            - type: "object"
            - type: "array"
              items: {}
          nullable: true
    Job:
      type: "object"
      properties:
        "id":
          type: "string"
          description: "Unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "remote_id":
          type: "string"
          description: "Provider's unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "unified_custom_fields":
          type: "object"
          additionalProperties: true
          description: "Custom Unified Fields configured in your StackOne project"
          nullable: true
          example: {"my_project_custom_field_1": "REF-1236", "my_project_custom_field_2": "some other value"}
        "code":
          type: "string"
          description: "Code of the job"
          nullable: true
          example: "184919"
        "title":
          type: "string"
          description: "Title of the job"
          nullable: true
          example: "Software Engineer"
        "description":
          type: "string"
          description: "Description of the job"
          nullable: true
          example: "Responsible for identifying business requirements"
        "status":
          type: "string"
          description: "Status of the job"
          nullable: true
          example: "archived"
          deprecated: true
        "job_status":
          allOf:
            - {"$ref": "#/components/schemas/JobStatusEnum"}
          description: "Status of the job"
          nullable: true
        "department_ids":
          type: "array"
          items:
            type: "string"
          description: "Department ids of the job"
          nullable: true
          example: ["308570", "308571", "308572"]
        "remote_department_ids":
          type: "array"
          items:
            type: "string"
          description: "Provider's department ids of the job"
          nullable: true
          example: "e3cb75bf-aa84-466e-a6c1-b8322b257a48"
        "location_ids":
          type: "array"
          items:
            type: "string"
          description: "Location ids of the job"
          nullable: true
          example: ["668570", "678571", "688572"]
        "remote_location_ids":
          type: "array"
          items:
            type: "string"
          description: "Provider's location ids of the job"
          nullable: true
          example: ["668570", "678571", "688572"]
        "hiring_team":
          type: "array"
          items: {"$ref": "#/components/schemas/JobHiringTeam"}
          description: "Hiring team for the job."
          nullable: true
        "interview_stages":
          type: "array"
          items: {"$ref": "#/components/schemas/InterviewStage"}
          description: "Interview stages for the job."
          nullable: true
        "confidential":
          type: "string"
          enum:
            - "true"
            - "false"
            - "unmapped_value"
            - null
          description: "Confidential status of the job"
          nullable: true
          x-speakeasy-unknown-values: "allow"
        "custom_fields":
          type: "array"
          items: {"$ref": "#/components/schemas/CustomFields"}
          description: "The job custom fields"
          nullable: true
        "created_at":
          type: "string"
          format: "date-time"
          description: "Date of creation"
          nullable: true
          example: "2021-01-01T01:01:01.000Z"
        "updated_at":
          type: "string"
          format: "date-time"
          description: "Date of last update"
          nullable: true
          example: "2021-01-01T01:01:01.000Z"
    JobDescriptionApiModel:
      type: "object"
      properties:
        "text":
          type: "string"
          nullable: true
          example: "Testing the laws of motion"
    JobResult:
      type: "object"
      properties:
        "data": {"$ref": "#/components/schemas/Job"}
        "raw":
          type: "array"
          items: {"$ref": "#/components/schemas/RawResponse"}
          nullable: true
      required:
        - "data"
    JobsPaginated:
      type: "object"
      properties:
        "next_page":
          type: "string"
          nullable: true
          deprecated: true
        "next":
          type: "string"
          nullable: true
        "data":
          type: "array"
          items: {"$ref": "#/components/schemas/Job"}
        "raw":
          type: "array"
          items: {"$ref": "#/components/schemas/RawResponse"}
          nullable: true
      required:
        - "data"
    JobStatusEnum:
      type: "object"
      properties:
        "value":
          type: "string"
          enum:
            - "published"
            - "draft"
            - "pending"
            - "internal"
            - "archived"
            - "closed"
            - "open"
            - "deleted"
            - "on_hold"
            - "unmapped_value"
            - null
          description: "The status of the job."
          nullable: true
          example: "published"
          x-speakeasy-unknown-values: "allow"
        "source_value":
          oneOf:
            - type: "string"
            - type: "number"
            - type: "boolean"
            - type: "object"
            - type: "array"
              items: {}
          description: "The source value of the job status."
          nullable: true
          example: "Published"
    LaborTypeApiModel:
      type: "object"
      properties:
        "code":
          type: "string"
          nullable: true
          example: "ABC123"
    LanguageEnum:
      type: "object"
      properties:
        "value":
          type: "string"
          enum:
            - "ar_AR"
            - "aa_ER"
            - "af_NA"
            - "af_ZA"
            - "am_ET"
            - "ar_AE"
            - "ar_BH"
            - "ar_DJ"
            - "ar_DZ"
            - "ar_EG"
            - "ar_ER"
            - "ar_IQ"
            - "ar_JO"
            - "ar_KM"
            - "ar_KW"
            - "ar_LB"
            - "ar_LY"
            - "ar_MA"
            - "ar_MR"
            - "ar_OM"
            - "ar_PS"
            - "ar_QA"
            - "ar_SA"
            - "ar_SD"
            - "ar_SY"
            - "ar_TD"
            - "ar_TN"
            - "ar_YE"
            - "ay_BO"
            - "ay_PE"
            - "az_AZ"
            - "az_IR"
            - "be_BY"
            - "bg_BG"
            - "bi_VU"
            - "bn_BD"
            - "bn_IN"
            - "bs_BA"
            - "bs-ME"
            - "byn_ER"
            - "ca_AD"
            - "ca_ES"
            - "ca_FR"
            - "ca_IT"
            - "ch_GU"
            - "cs_CZ"
            - "da_DK"
            - "de_AT"
            - "de_BE"
            - "de_CH"
            - "de_DE"
            - "de_LI"
            - "de_LU"
            - "de_VA"
            - "de_MV"
            - "dv_MV"
            - "dz_BT"
            - "el_CY"
            - "el_GR"
            - "en_AG"
            - "en_AI"
            - "en_AS"
            - "en_AU"
            - "en_BB"
            - "en_BE"
            - "en_BM"
            - "en_BS"
            - "en_BW"
            - "en_BZ"
            - "en_CA"
            - "en_CC"
            - "en_CK"
            - "en_CM"
            - "en_CW"
            - "en_CX"
            - "en_DG"
            - "en_DM"
            - "en_ER"
            - "en_FJ"
            - "en_FK"
            - "en_FM"
            - "en_GB"
            - "en_GD"
            - "en_GG"
            - "en_GH"
            - "en_GI"
            - "en_GM"
            - "en_GS"
            - "en_GU"
            - "en_GY"
            - "en_HK"
            - "en_IE"
            - "en_IM"
            - "en_IN"
            - "en_IO"
            - "en_JE"
            - "en_JM"
            - "en_KE"
            - "en_KI"
            - "en_KN"
            - "en_KY"
            - "en_LC"
            - "en_LR"
            - "en_LS"
            - "en_MF"
            - "en_MG"
            - "en_MH"
            - "en_MO"
            - "en_MP"
            - "en_MS"
            - "en_MT"
            - "en_MU"
            - "en_MW"
            - "en_MY"
            - "en_NA"
            - "en_NF"
            - "en_NG"
            - "en_NL"
            - "en_NR"
            - "en_NU"
            - "en_NZ"
            - "en_PG"
            - "en_PH"
            - "en_PK"
            - "en_PN"
            - "en_PR"
            - "en_PW"
            - "en_RW"
            - "en_SB"
            - "en_SC"
            - "en_SD"
            - "en_SG"
            - "en_SH"
            - "en_SL"
            - "en_SS"
            - "en_SX"
            - "en_SZ"
            - "en_TC"
            - "en_TK"
            - "en_TO"
            - "en_TT"
            - "en_TV"
            - "en_TZ"
            - "en_UG"
            - "en_UM"
            - "en_US"
            - "en_VC"
            - "en_VG"
            - "en_VI"
            - "en_VU"
            - "en_WS"
            - "en_ZA"
            - "en_ZM"
            - "en_ZW"
            - "es_AR"
            - "es_BO"
            - "es_BZ"
            - "es_CL"
            - "es_CO"
            - "es_CR"
            - "es_CU"
            - "es_DO"
            - "es_EA"
            - "es_EC"
            - "es_EH"
            - "es_ES"
            - "es_GQ"
            - "es_GT"
            - "es_HN"
            - "es_IC"
            - "es_LA"
            - "es_MX"
            - "es_NI"
            - "es_PA"
            - "es_PE"
            - "es_PH"
            - "es_PR"
            - "es_PY"
            - "es_SV"
            - "es_US"
            - "es_UY"
            - "es_VE"
            - "et_EE"
            - "fa_AF"
            - "fa_IR"
            - "fan_GA"
            - "ff_CM"
            - "ff_GN"
            - "ff_MR"
            - "ff_SN"
            - "ff_BF"
            - "fi_FI"
            - "fj_FJ"
            - "fo_FO"
            - "fr_BE"
            - "fr_BF"
            - "fr_BI"
            - "fr_BJ"
            - "fr_BL"
            - "fr_CA"
            - "fr_CD"
            - "fr_CF"
            - "fr_CG"
            - "fr_CH"
            - "fr_CI"
            - "fr_CM"
            - "fr_DJ"
            - "fr_DZ"
            - "fr_FR"
            - "fr_GA"
            - "fr_GF"
            - "fr_GG"
            - "fr_GN"
            - "fr_GP"
            - "fr_GQ"
            - "fr_HT"
            - "fr_KM"
            - "fr_JE"
            - "fr_LU"
            - "fr_LB"
            - "fr_MA"
            - "fr_MC"
            - "fr_MF"
            - "fr_MG"
            - "fr_ML"
            - "fr_MQ"
            - "fr_MR"
            - "fr_MU"
            - "fr_NC"
            - "fr_NE"
            - "fr_PF"
            - "fr_PM"
            - "fr_RE"
            - "fr_RW"
            - "fr_SC"
            - "fr_SN"
            - "fr_SY"
            - "fr_TD"
            - "fr_TF"
            - "fr_TG"
            - "fr_TN"
            - "fr_VU"
            - "fr_VA"
            - "fr_WF"
            - "fr_YT"
            - "ga_IE"
            - "gn_PY"
            - "gn_AR"
            - "gu_IN"
            - "gv_IM"
            - "he_IL"
            - "hi_IN"
            - "hr_BA"
            - "hr_HR"
            - "hr_ME"
            - "ht_HT"
            - "hu_HU"
            - "hy_AM"
            - "hy_CY"
            - "id_ID"
            - "is_IS"
            - "it_CH"
            - "it_IT"
            - "it_SM"
            - "it_VA"
            - "ja_JP"
            - "ka_GE"
            - "kg_CD"
            - "kk_KZ"
            - "kl_GL"
            - "km_KH"
            - "ko_KP"
            - "ko_KR"
            - "ku_IQ"
            - "ky_KG"
            - "la_VA"
            - "lb_LU"
            - "ln_AO"
            - "ln_CD"
            - "ln_CF"
            - "ln_CG"
            - "lo_LA"
            - "lt_LT"
            - "lu_CD"
            - "lv_LV"
            - "mg_MG"
            - "mh_MH"
            - "mi_NZ"
            - "mk_MK"
            - "mn_MN"
            - "mr_IN"
            - "ms_BN"
            - "ms_MY"
            - "ms_SG"
            - "mt_MT"
            - "my_MM"
            - "nb_NO"
            - "nb_BV"
            - "nb_ZW"
            - "ne_NP"
            - "nl_AW"
            - "nl_BE"
            - "nl_BQ"
            - "nl_CW"
            - "nl_NL"
            - "nl_SR"
            - "nl_SX"
            - "nl_MF"
            - "nn_NO"
            - "nn_BV"
            - "no_NO"
            - "no_BV"
            - "no_SJ"
            - "nr_ZA"
            - "ny_MW"
            - "pa_IN"
            - "pa_PK"
            - "pl_PL"
            - "ps_AF"
            - "pt_AO"
            - "pt_BR"
            - "pt_CH"
            - "pt_CV"
            - "pt_GQ"
            - "pt_GW"
            - "pt_LU"
            - "pt_MO"
            - "pt_MZ"
            - "pt_PT"
            - "pt_ST"
            - "pt_TL"
            - "qu_BO"
            - "qu_EC"
            - "qu_PE"
            - "rar_CK"
            - "rm_CH"
            - "rup_MK"
            - "ro_MD"
            - "ro_RO"
            - "ru_BY"
            - "ru_KG"
            - "ru_KZ"
            - "ru_MD"
            - "ru_RU"
            - "ru_UA"
            - "ru_AQ"
            - "ru_TJ"
            - "ru_TM"
            - "ru_UZ"
            - "rw_RW"
            - "se_SE"
            - "sg_CF"
            - "si_LK"
            - "sk_SK"
            - "sl_SI"
            - "sm_AS"
            - "sm_WS"
            - "sn_ZW"
            - "so_DJ"
            - "so_ET"
            - "so_KE"
            - "so_SO"
            - "sq_AL"
            - "sq_ME"
            - "sq_XK"
            - "sr_BA"
            - "sr_ME"
            - "sr_RS"
            - "sr_XK"
            - "ss_SZ"
            - "ss_ZA"
            - "sv_AX"
            - "sv_FI"
            - "sv_SE"
            - "sw_KE"
            - "sw_TZ"
            - "sw_UG"
            - "sw_CD"
            - "ta_IN"
            - "ta_MY"
            - "ta_SG"
            - "ta_LK"
            - "te_IN"
            - "tg_TJ"
            - "th_TH"
            - "ti_ER"
            - "ti_ET"
            - "tig_ER"
            - "tk_TM"
            - "tk_AF"
            - "tn_BW"
            - "tn_ZA"
            - "to_TO"
            - "tr_CY"
            - "tr_TR"
            - "ts_ZA"
            - "uk_UA"
            - "ur_IN"
            - "ur_PK"
            - "uz_AF"
            - "uz_UZ"
            - "ve_ZA"
            - "vi_VN"
            - "xh_ZA"
            - "zh_CN"
            - "zh_HK"
            - "zh_MO"
            - "zh_SG"
            - "zh_TW"
            - "zu_ZA"
            - "unmapped_value"
            - null
          description: "The Locale Code of the language"
          nullable: true
          example: "en_GB"
          x-speakeasy-unknown-values: "allow"
        "source_value":
          oneOf:
            - type: "string"
            - type: "number"
            - type: "boolean"
            - type: "object"
            - type: "array"
              items: {}
          nullable: true
    LocationTypeEnum:
      type: "object"
      properties:
        "value":
          type: "string"
          enum:
            - "home"
            - "work"
            - "unmapped_value"
            - null
          description: "The type of the location."
          nullable: true
          example: "home"
          x-speakeasy-unknown-values: "allow"
        "source_value":
          oneOf:
            - type: "string"
            - type: "number"
            - type: "boolean"
            - type: "object"
            - type: "array"
              items: {}
          description: "The source value of the location type."
          nullable: true
          example: "Home"
    ManagerRoleApiModel:
      type: "object"
      properties:
        "id":
          type: "string"
          description: "Unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "remote_id":
          type: "string"
          description: "Provider's unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "label":
          type: "string"
          description: "The label of the role type"
          nullable: true
          example: "Admin"
        "role_type":
          allOf:
            - {"$ref": "#/components/schemas/RoleTypeEnum"}
          description: "The manager role type (e.g., admin, viewer)"
          nullable: true
          example: "admin"
    MaritalStatusEnum:
      type: "object"
      properties:
        "value":
          type: "string"
          enum:
            - "single"
            - "married"
            - "common_law"
            - "divorced"
            - "widowed"
            - "domestic_partnership"
            - "separated"
            - "other"
            - "not_disclosed"
            - "unmapped_value"
            - null
          nullable: true
          x-speakeasy-unknown-values: "allow"
        "source_value":
          oneOf:
            - type: "string"
            - type: "number"
            - type: "boolean"
            - type: "object"
            - type: "array"
              items: {}
          nullable: true
    NationalIdentityNumberApiModel:
      type: "object"
      properties:
        "value":
          type: "string"
          nullable: true
          example: "123456789"
        "type":
          allOf:
            - {"$ref": "#/components/schemas/NationalIdentityNumberTypeEnumApiModel"}
          nullable: true
        "country":
          allOf:
            - {"$ref": "#/components/schemas/CountryCodeEnum"}
          description: "The country code"
          nullable: true
    NationalIdentityNumberTypeEnumApiModel:
      type: "object"
      properties:
        "value":
          type: "string"
          enum:
            - "ssn"
            - "nin"
            - "sin"
            - "nid"
            - "pin"
            - "pn"
            - "umcn"
            - "pic"
            - "ric"
            - "idnum"
            - "cid"
            - "nidnr"
            - "pan"
            - "aadhaar"
            - "epic"
            - "ptn"
            - "itin"
            - "tin"
            - "uprc"
            - "pcode"
            - "ssi"
            - "cedula"
            - "passport"
            - "voterid"
            - "ntin"
            - "bn"
            - "fnr"
            - "mva"
            - "civil_id"
            - "cnic"
            - "nric"
            - "fin"
            - "uen"
            - "registrationnumber"
            - "nic"
            - "personnummer"
            - "ahv"
            - "id"
            - "eid"
            - "va"
            - "pid"
            - "nrt"
            - "nipt"
            - "cbu"
            - "cuit"
            - "dni"
            - "businessid"
            - "vnr"
            - "abn"
            - "acn"
            - "tfn"
            - "jmbg"
            - "bis"
            - "insz"
            - "nn"
            - "egn"
            - "pnf"
            - "vat"
            - "cnpj"
            - "unp"
            - "gst"
            - "pst"
            - "qst"
            - "ni"
            - "dic"
            - "rc"
            - "uid"
            - "rut"
            - "uscc"
            - "cpf"
            - "cpj"
            - "cr"
            - "stnr"
            - "svnr"
            - "ncf"
            - "rnc"
            - "nif"
            - "ci"
            - "ik"
            - "kmkr"
            - "registrikood"
            - "tn"
            - "ruc"
            - "nit"
            - "alv"
            - "hetu"
            - "ytunnus"
            - "vn"
            - "utr"
            - "nifp"
            - "amka"
            - "cui"
            - "nir"
            - "siren"
            - "siret"
            - "tva"
            - "oib"
            - "hkid"
            - "anum"
            - "kennitala"
            - "vsk"
            - "npwp"
            - "pps"
            - "gstin"
            - "idnr"
            - "hr"
            - "aic"
            - "codicefiscale"
            - "iva"
            - "peid"
            - "asmens"
            - "pvm"
            - "ctps"
            - "vrn"
            - "vtk"
            - "int"
            - "tk"
            - "pas"
            - "rne"
            - "rg"
            - "nci"
            - "crnm"
            - "pis"
            - "insee"
            - "tax"
            - "mpf"
            - "epfo"
            - "esi"
            - "pran"
            - "uan"
            - "idk"
            - "bsn"
            - "mid"
            - "sss"
            - "nie"
            - "nss"
            - "arc"
            - "curp"
            - "imss"
            - "rfc"
            - "ein"
            - "other"
            - "unknown"
            - "unmapped_value"
            - null
          description: "The type of the national identity number"
          nullable: true
          example: "ssn"
          x-speakeasy-unknown-values: "allow"
        "source_value":
          oneOf:
            - type: "string"
            - type: "number"
            - type: "boolean"
            - type: "object"
            - type: "array"
              items: {}
          nullable: true
    PayFrequencyEnum:
      type: "object"
      properties:
        "value":
          type: "string"
          enum:
            - "hourly"
            - "weekly"
            - "bi_weekly"
            - "four_weekly"
            - "semi_monthly"
            - "monthly"
            - "bi_monthly"
            - "quarterly"
            - "semi_annually"
            - "yearly"
            - "thirteen_monthly"
            - "pro_rata"
            - "unmapped_value"
            - "half_yearly"
            - "daily"
            - null
          description: "The pay frequency of the job postings."
          nullable: true
          example: "hourly"
          x-speakeasy-unknown-values: "allow"
        "source_value":
          oneOf:
            - type: "string"
            - type: "number"
            - type: "boolean"
            - type: "object"
            - type: "array"
              items: {}
          description: "The source value of the pay frequency."
          nullable: true
          example: "Hourly"
    PayPeriodEnum:
      type: "object"
      properties:
        "value":
          type: "string"
          enum:
            - "hour"
            - "day"
            - "week"
            - "every_two_weeks"
            - "month"
            - "twice_a_month"
            - "every_two_months"
            - "quarter"
            - "every_six_months"
            - "year"
            - "one_off"
            - "none"
            - "unmapped_value"
            - null
          description: "The pay period of the job postings."
          nullable: true
          example: "hour"
          x-speakeasy-unknown-values: "allow"
        "source_value":
          oneOf:
            - type: "string"
            - type: "number"
            - type: "boolean"
            - type: "object"
            - type: "array"
              items: {}
          description: "The source value of the pay period."
          nullable: true
          example: "Hour"
    Position:
      type: "object"
      properties:
        "id":
          type: "string"
          description: "Unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "remote_id":
          type: "string"
          description: "Provider's unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "job_id":
          type: "string"
          description: "Job ID from the HRIS provider"
          nullable: true
          example: "JOB-12345"
        "title":
          type: "string"
          description: "Title of the position"
          nullable: true
          example: "Senior Software Engineer"
        "description":
          type: "string"
          description: "Description of the position"
          nullable: true
          example: "Responsible for developing and maintaining software applications"
        "department_id":
          type: "string"
          description: "Department ID associated with the position"
          nullable: true
          example: "dept-123"
        "location_id":
          type: "string"
          description: "Location ID associated with the position"
          nullable: true
          example: "loc-456"
        "employment_type":
          type: "string"
          description: "Employment type for the position"
          nullable: true
          example: "full-time"
        "status":
          allOf:
            - {"$ref": "#/components/schemas/PositionStatusEnum"}
          description: "Status of the position"
          nullable: true
        "posted_date":
          type: "string"
          format: "date-time"
          description: "Date when the position was posted"
          nullable: true
          example: "2024-01-15T10:00:00.000Z"
    PositionResult:
      type: "object"
      properties:
        "data": {"$ref": "#/components/schemas/Position"}
        "raw":
          type: "array"
          items: {"$ref": "#/components/schemas/RawResponse"}
          nullable: true
      required:
        - "data"
    PositionsPaginated:
      type: "object"
      properties:
        "next_page":
          type: "string"
          nullable: true
          deprecated: true
        "next":
          type: "string"
          nullable: true
        "data":
          type: "array"
          items: {"$ref": "#/components/schemas/Position"}
        "raw":
          type: "array"
          items: {"$ref": "#/components/schemas/RawResponse"}
          nullable: true
      required:
        - "data"
    PositionStatusEnum:
      type: "object"
      properties:
        "value":
          type: "string"
          enum:
            - "open"
            - "closed"
            - "paused"
            - "unmapped_value"
            - null
          description: "The status of the position."
          nullable: true
          example: "open"
          x-speakeasy-unknown-values: "allow"
        "source_value":
          oneOf:
            - type: "string"
            - type: "number"
            - type: "boolean"
            - type: "object"
            - type: "array"
              items: {}
          description: "The source value of the position status."
          nullable: true
    PreferredLanguageEnum:
      type: "object"
      properties:
        "value":
          type: "string"
          enum:
            - "aar"
            - "afr"
            - "amh"
            - "ara"
            - "aym"
            - "aze"
            - "bel"
            - "bul"
            - "bis"
            - "ben"
            - "bos"
            - "byn"
            - "cat"
            - "cha"
            - "ces"
            - "dan"
            - "deu"
            - "div"
            - "dzo"
            - "ell"
            - "eng"
            - "spa"
            - "est"
            - "fas"
            - "fan"
            - "ful"
            - "fin"
            - "fij"
            - "fao"
            - "fra"
            - "gle"
            - "grn"
            - "guj"
            - "glv"
            - "heb"
            - "hin"
            - "hrv"
            - "hat"
            - "hun"
            - "hye"
            - "ind"
            - "isl"
            - "ita"
            - "jpn"
            - "kat"
            - "kon"
            - "kaz"
            - "kal"
            - "khm"
            - "kor"
            - "kur"
            - "kir"
            - "lat"
            - "ltz"
            - "lin"
            - "lao"
            - "lit"
            - "lub"
            - "lav"
            - "mlg"
            - "mah"
            - "mri"
            - "mkd"
            - "mon"
            - "mar"
            - "msa"
            - "mlt"
            - "mya"
            - "nob"
            - "nep"
            - "nld"
            - "nno"
            - "nor"
            - "nbl"
            - "nya"
            - "pan"
            - "pol"
            - "pus"
            - "por"
            - "que"
            - "rar"
            - "roh"
            - "rup"
            - "ron"
            - "rus"
            - "kin"
            - "sme"
            - "sag"
            - "sin"
            - "slk"
            - "slv"
            - "smo"
            - "sna"
            - "som"
            - "sqi"
            - "srp"
            - "ssw"
            - "swe"
            - "swa"
            - "tam"
            - "tel"
            - "tgk"
            - "tha"
            - "tir"
            - "tig"
            - "tuk"
            - "tsn"
            - "ton"
            - "tur"
            - "tso"
            - "ukr"
            - "urd"
            - "uzb"
            - "ven"
            - "vie"
            - "xho"
            - "zho"
            - "zul"
            - "unmapped_value"
            - null
          description: "The ISO639-2 Code of the language"
          nullable: true
          example: "eng"
          x-speakeasy-unknown-values: "allow"
        "source_value":
          oneOf:
            - type: "string"
            - type: "number"
            - type: "boolean"
            - type: "object"
            - type: "array"
              items: {}
          nullable: true
    Proficiency:
      type: "object"
      properties:
        "id":
          type: "string"
          description: "Unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "remote_id":
          type: "string"
          description: "Provider's unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "name":
          type: "string"
          description: "The name associated with this proficiency"
          nullable: true
          example: "Expert"
        "value":
          type: "string"
          enum:
            - "1"
            - "2"
            - "3"
            - "4"
            - "5"
            - "unmapped_value"
            - null
          nullable: true
          x-speakeasy-unknown-values: "allow"
        "source_value":
          oneOf:
            - type: "string"
            - type: "number"
            - type: "boolean"
            - type: "object"
            - type: "array"
              items: {}
          nullable: true
    ProviderErrorApiModel:
      type: "object"
      properties:
        "status":
          type: "number"
          nullable: true
          example: 400
        "url":
          type: "string"
          nullable: true
          example: "https://api.someprovider.com/v1/endpoint"
        "raw":
          type: "object"
          nullable: true
        "headers":
          type: "object"
          nullable: true
          example: {"date": "Tue, 02 Apr 2024 13:52:01 GMT", "content-type": "application/json; charset=utf-8", "transfer-encoding": "chunked", "connection": "close"}
    RawResponse:
      type: "object"
      properties:
        "method":
          type: "string"
        "url":
          type: "string"
        "body":
          oneOf:
            - type: "string"
            - type: "object"
            - type: "array"
              items:
                type: "integer"
                maximum: 255
                minimum: 0
                format: "int32"
          additionalProperties: true
          nullable: true
        "response":
          oneOf:
            - type: "object"
              additionalProperties: true
            - type: "array"
              items: {}
            - type: "string"
          nullable: true
      required:
        - "method"
        - "url"
    Reason:
      type: "object"
      properties:
        "id":
          type: "string"
          description: "Unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "remote_id":
          type: "string"
          description: "Provider's unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "name":
          type: "string"
          nullable: true
    Reference:
      type: "object"
      properties:
        "id":
          type: "string"
          description: "The reference id"
          nullable: true
          example: "1687-3"
        "remote_id":
          type: "string"
          description: "Provider's unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "name":
          type: "string"
          description: "The reference name"
          nullable: true
          example: "1687-4"
        "active":
          oneOf:
            - type: "boolean"
            - type: "string"
              enum:
                - "true"
                - "false"
          description: "The reference status"
          nullable: true
          example: true
    ReferencePaginated:
      type: "object"
      properties:
        "next_page":
          type: "string"
          nullable: true
          deprecated: true
        "next":
          type: "string"
          nullable: true
        "data":
          type: "array"
          items: {"$ref": "#/components/schemas/Reference"}
        "raw":
          type: "array"
          items: {"$ref": "#/components/schemas/RawResponse"}
          nullable: true
      required:
        - "data"
    ReferenceResult:
      type: "object"
      properties:
        "data": {"$ref": "#/components/schemas/Reference"}
        "raw":
          type: "array"
          items: {"$ref": "#/components/schemas/RawResponse"}
          nullable: true
      required:
        - "data"
    RoleTypeEnum:
      type: "object"
      properties:
        "value":
          type: "string"
          enum:
            - "admin"
            - "viewer"
            - "editor"
            - "basic"
            - "guest"
            - "unassigned"
            - "restricted"
            - "unmapped_value"
            - null
          nullable: true
          example: "admin"
          x-speakeasy-unknown-values: "allow"
        "source_value":
          oneOf:
            - type: "string"
            - type: "number"
            - type: "boolean"
            - type: "object"
            - type: "array"
              items: {}
          nullable: true
    ShiftApprovalStatusEnum:
      type: "object"
      properties:
        "value":
          type: "string"
          enum:
            - "pending"
            - "approved"
            - "rejected"
            - "unmapped_value"
            - null
          description: "The approval status of the shift"
          nullable: true
          example: "approved"
          x-speakeasy-unknown-values: "allow"
        "source_value":
          oneOf:
            - type: "string"
            - type: "number"
            - type: "boolean"
            - type: "object"
            - type: "array"
              items: {}
          nullable: true
          example: "Approved"
    ShiftBreak:
      type: "object"
      properties:
        "id":
          type: "string"
          description: "The unique identifier of the break"
          nullable: true
          example: "break_123456789"
        "start_time":
          type: "string"
          format: "date-time"
          description: "The start time of the break"
          nullable: true
          example: "2024-03-20T12:00:00Z"
        "end_time":
          type: "string"
          format: "date-time"
          description: "The end time of the break"
          nullable: true
          example: "2024-03-20T13:00:00Z"
        "duration":
          type: "string"
          description: "The duration of the break in ISO 8601 duration format"
          nullable: true
          example: "PT1H"
        "is_paid":
          type: "boolean"
          description: "Whether the break is paid"
          nullable: true
          example: true
        "created_at":
          type: "string"
          format: "date-time"
          description: "The date and time the break was created"
          nullable: true
          example: "2024-03-20T10:00:00Z"
        "updated_at":
          type: "string"
          format: "date-time"
          description: "The date and time the break was last updated"
          nullable: true
          example: "2024-03-20T10:00:00Z"
    ShiftStatusEnum:
      type: "object"
      properties:
        "value":
          type: "string"
          enum:
            - "draft"
            - "published"
            - "confirmed"
            - "cancelled"
            - "unmapped_value"
            - null
          description: "The status of the shift"
          nullable: true
          example: "confirmed"
          x-speakeasy-unknown-values: "allow"
        "source_value":
          oneOf:
            - type: "string"
            - type: "number"
            - type: "boolean"
            - type: "object"
            - type: "array"
              items: {}
          nullable: true
          example: "Confirmed"
    Task:
      type: "object"
      properties:
        "id":
          type: "string"
          description: "Unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "remote_id":
          type: "string"
          description: "Provider's unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "employee_id":
          type: "string"
          description: "The employee ID associated with this task"
          nullable: true
          example: "cx280928937"
        "name":
          type: "string"
          description: "The name of the task"
          nullable: true
          example: "Complete onboarding documents"
        "description":
          type: "string"
          description: "The description of the task"
          nullable: true
          example: "Please complete all required onboarding documents in the employee portal"
        "type":
          allOf:
            - {"$ref": "#/components/schemas/TaskTypeEnum"}
          description: "The type of the task"
          nullable: true
        "status":
          allOf:
            - {"$ref": "#/components/schemas/TaskStatusEnum"}
          description: "The status of the task"
          nullable: true
        "due_date":
          type: "string"
          format: "date-time"
          description: "The due date of the task"
          nullable: true
          example: "2024-03-20T23:59:59.000Z"
        "completion_date":
          type: "string"
          format: "date-time"
          description: "The completion date of the task"
          nullable: true
          example: "2024-03-19T15:30:00.000Z"
        "assigned_by_employee_id":
          type: "string"
          description: "The ID of the employee who assigned this task"
          nullable: true
          example: "cx280928938"
        "assigned_by_employee_name":
          type: "string"
          description: "The name of the employee who assigned this task"
          nullable: true
          example: "John Smith"
        "link_to_task":
          type: "string"
          description: "Link to the task in the provider system"
          nullable: true
          example: "https://provider.com/tasks/123"
        "extracted_links":
          type: "array"
          items:
            type: "string"
          description: "List of extracted links from the task"
          nullable: true
          example: ["https://provider.com/docs/1", "https://provider.com/forms/2"]
        "next_task_id":
          type: "string"
          description: "ID of the next task in sequence"
          nullable: true
          example: "cx280928939"
        "parent_process_name":
          type: "string"
          description: "Name of the parent process of this task"
          nullable: true
          example: "Onboarding Tasks"
        "comments":
          type: "array"
          items: {"$ref": "#/components/schemas/TaskCommentApiModel"}
          description: "The comments associated with this task"
          nullable: true
        "attachments":
          type: "array"
          items: {"$ref": "#/components/schemas/File"}
          description: "The documents attached to this task"
          nullable: true
        "created_at":
          type: "string"
          format: "date-time"
          description: "The creation date of this task"
          nullable: true
          example: "2024-03-15T10:00:00.000Z"
        "updated_at":
          type: "string"
          format: "date-time"
          description: "The last updated date of this task"
          nullable: true
          example: "2024-03-19T15:30:00.000Z"
    TaskCommentApiModel:
      type: "object"
      properties:
        "author_employee_id":
          type: "string"
          description: "The Employee ID of the author of the comment"
          nullable: true
        "comment":
          type: "string"
          description: "The text of the comment"
          nullable: true
          example: "Approved based on in-person assessment"
        "created_at":
          type: "string"
          format: "date-time"
          description: "The creation date of this comment"
          nullable: true
          example: "2024-03-15T10:00:00.000Z"
    TaskResult:
      type: "object"
      properties:
        "data":
          type: "array"
          items: {"$ref": "#/components/schemas/Task"}
          nullable: true
        "raw":
          type: "array"
          items: {"$ref": "#/components/schemas/RawResponse"}
          nullable: true
    TasksPaginated:
      type: "object"
      properties:
        "next":
          type: "string"
          nullable: true
        "data":
          type: "array"
          items: {"$ref": "#/components/schemas/Task"}
          nullable: true
        "raw":
          type: "array"
          items: {"$ref": "#/components/schemas/RawResponse"}
          nullable: true
    TaskStatusEnum:
      type: "object"
      properties:
        "value":
          type: "string"
          enum:
            - "open"
            - "in_progress"
            - "blocked"
            - "completed"
            - "cancelled"
            - "unmapped_value"
            - null
          description: "The unified value for the status of the task. If the provider does not specify this status, the value will be set to UnmappedValue"
          nullable: true
          example: "open"
          x-speakeasy-unknown-values: "allow"
        "source_value":
          oneOf:
            - type: "string"
            - type: "number"
            - type: "boolean"
            - type: "object"
            - type: "array"
              items: {}
          nullable: true
    TaskTypeEnum:
      type: "object"
      properties:
        "value":
          type: "string"
          enum:
            - "action"
            - "review"
            - "acknowledgment"
            - "edit"
            - "approve"
            - "unmapped_value"
            - null
          description: "The unified value for the type of the task. If the provider does not specify this type, the value will be set to UnmappedValue"
          nullable: true
          example: "action"
          x-speakeasy-unknown-values: "allow"
        "source_value":
          oneOf:
            - type: "string"
            - type: "number"
            - type: "boolean"
            - type: "object"
            - type: "array"
              items: {}
          nullable: true
    TeamTypeEnum:
      type: "object"
      properties:
        "value":
          type: "string"
          enum:
            - "team"
            - "unmapped_value"
            - null
          nullable: true
          example: "team"
          x-speakeasy-unknown-values: "allow"
        "source_value":
          oneOf:
            - type: "string"
            - type: "number"
            - type: "boolean"
            - type: "object"
            - type: "array"
              items: {}
          nullable: true
    TimeEntries:
      type: "object"
      properties:
        "id":
          type: "string"
          description: "Unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "remote_id":
          type: "string"
          description: "Provider's unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "unified_custom_fields":
          type: "object"
          additionalProperties: true
          description: "Custom Unified Fields configured in your StackOne project"
          nullable: true
          example: {"my_project_custom_field_1": "REF-1236", "my_project_custom_field_2": "some other value"}
        "employee_id":
          type: "string"
          description: "The employee ID associated with this time entry"
          nullable: true
          example: "1687-3"
        "remote_employee_id":
          type: "string"
          description: "Provider's unique identifier of the employee associated with this time entry"
          nullable: true
          example: "e3cb75bf-aa84-466e-a6c1-b8322b257a48"
        "start_time":
          type: "string"
          format: "date-time"
          description: "The start time of the time entry"
          nullable: true
          example: "2021-01-01T01:01:01.000Z"
        "end_time":
          type: "string"
          format: "date-time"
          description: "The end time of the time entry"
          nullable: true
          example: "2021-01-01T01:01:01.000Z"
        "hours_worked":
          type: "number"
          description: "The hours worked in the time entry"
          nullable: true
          example: 8
        "break_duration":
          type: "number"
          description: "The duration of the break taken during time entry in hours"
          nullable: true
          example: 0.5
        "status":
          allOf:
            - {"$ref": "#/components/schemas/TimeEntryStatusEnum"}
          description: "The status of the time entry"
          nullable: true
        "labor_type":
          allOf:
            - {"$ref": "#/components/schemas/LaborTypeApiModel"}
          description: "The labor type associated with this time entry"
          nullable: true
        "location":
          allOf:
            - {"$ref": "#/components/schemas/Reference"}
          description: "The location of the time entry"
          nullable: true
        "created_at":
          type: "string"
          format: "date-time"
          description: "The created_at date"
          nullable: true
          example: "2023-02-23T00:00:00.000Z"
        "updated_at":
          type: "string"
          format: "date-time"
          description: "The updated_at date"
          nullable: true
          example: "2024-02-23T00:00:00.000Z"
    TimeEntriesPaginated:
      type: "object"
      properties:
        "next_page":
          type: "string"
          nullable: true
          deprecated: true
        "next":
          type: "string"
          nullable: true
        "data":
          type: "array"
          items: {"$ref": "#/components/schemas/TimeEntries"}
        "raw":
          type: "array"
          items: {"$ref": "#/components/schemas/RawResponse"}
          nullable: true
      required:
        - "data"
    TimeEntriesResult:
      type: "object"
      properties:
        "data": {"$ref": "#/components/schemas/TimeEntries"}
        "raw":
          type: "array"
          items: {"$ref": "#/components/schemas/RawResponse"}
          nullable: true
      required:
        - "data"
    TimeEntryStatusEnum:
      type: "object"
      properties:
        "value":
          type: "string"
          enum:
            - "approved"
            - "unmapped_value"
            - null
          nullable: true
          x-speakeasy-unknown-values: "allow"
        "source_value":
          oneOf:
            - type: "string"
            - type: "number"
            - type: "boolean"
            - type: "object"
            - type: "array"
              items: {}
          nullable: true
    TimeOff:
      type: "object"
      properties:
        "id":
          type: "string"
          description: "Unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "remote_id":
          type: "string"
          description: "Provider's unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "employee_id":
          type: "string"
          description: "The employee ID"
          nullable: true
          example: "1687-3"
        "remote_employee_id":
          type: "string"
          description: "Provider's unique identifier of the employee"
          nullable: true
          example: "e3cb75bf-aa84-466e-a6c1-b8322b257a48"
        "approver_id":
          type: "string"
          description: "The approver ID"
          nullable: true
          example: "1687-4"
        "remote_approver_id":
          type: "string"
          description: "Provider's unique identifier of the approver"
          nullable: true
          example: "e3cb75bf-aa84-466e-a6c1-b8322b257a48"
        "status":
          allOf:
            - {"$ref": "#/components/schemas/TimeOffStatusEnum"}
          description: "The status of the time off request"
          nullable: true
        "type":
          allOf:
            - {"$ref": "#/components/schemas/TimeOffTypeEnum"}
          description: "The type of the time off request"
          nullable: true
          deprecated: true
        "start_date":
          type: "string"
          format: "datetime-local"
          description: "The start date of the time off request (ISO8601 date-time without timezone)"
          nullable: true
          example: "2021-01-01T01:01:01.000"
        "end_date":
          type: "string"
          format: "datetime-local"
          description: "Inclusive end date of the time off request (ISO8601 date-time without timezone). The time off includes this day"
          nullable: true
          example: "2021-01-01T01:01:01.000"
        "start_half_day":
          oneOf:
            - type: "boolean"
            - type: "string"
              enum:
                - "true"
                - "false"
          description: "True if the start of the time off request begins half way through the day"
          nullable: true
          example: true
        "end_half_day":
          oneOf:
            - type: "boolean"
            - type: "string"
              enum:
                - "true"
                - "false"
          description: "True if the end of the time off request ends half way through the day"
          nullable: true
          example: true
        "duration":
          type: "string"
          format: "duration"
          description: "The duration of the time off request"
          nullable: true
          example: "P3Y6M4DT12H30M5S"
        "time_off_policy_id":
          type: "string"
          description: "The time off policy id associated with this time off request"
          nullable: true
          example: "cx280928933"
        "remote_time_off_policy_id":
          type: "string"
          description: "Provider's unique identifier of the time off policy id associated with this time off request"
          nullable: true
          example: "e3cb75bf-aa84-466e-a6c1-b8322b257a48"
        "reason":
          allOf:
            - {"$ref": "#/components/schemas/Reason"}
          nullable: true
        "created_date":
          type: "string"
          format: "date-time"
          description: "The created date of the time off request"
          nullable: true
          example: "2021-01-01T01:01:01.000Z"
        "updated_date":
          type: "string"
          format: "date-time"
          description: "The updated date of the time off request"
          nullable: true
          example: "2021-01-01T01:01:01.000Z"
        "policy":
          allOf:
            - {"$ref": "#/components/schemas/TimeOffPolicies"}
          description: "The time off policy associated with Time Off"
          nullable: true
        "comment":
          type: "string"
          description: "Allows users to provide additional context or notes for their time off request"
          nullable: true
          example: "Taking a day off for personal reasons"
    TimeOffBalanceResult:
      type: "object"
      properties:
        "data": {"$ref": "#/components/schemas/TimeOffBalances"}
        "raw":
          type: "array"
          items: {"$ref": "#/components/schemas/RawResponse"}
          nullable: true
      required:
        - "data"
    TimeOffBalances:
      type: "object"
      properties:
        "id":
          type: "string"
          description: "Unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "remote_id":
          type: "string"
          description: "Provider's unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "employee_id":
          type: "string"
          description: "The employee id associated with this balance"
          nullable: true
          example: "cx280928937"
        "remote_employee_id":
          type: "string"
          description: "Provider's unique identifier of the employee associated with this balance"
          nullable: true
          example: "e3cb75bf-aa84-466e-a6c1-b8322b257a48"
        "policy_id":
          type: "string"
          description: "The time off policy id associated with this balance"
          nullable: true
          example: "cx280928937"
        "remote_policy_id":
          type: "string"
          description: "Provider's unique identifier of the time off policy id associated with this balance"
          nullable: true
          example: "e3cb75bf-aa84-466e-a6c1-b8322b257a48"
        "policy":
          allOf:
            - {"$ref": "#/components/schemas/TimeOffPolicies"}
          description: "The time off policy associated with this balance"
          nullable: true
        "current_balance":
          type: "number"
          description: "The current numeric balance for the associated employee and time off policy"
          nullable: true
          example: 8
        "initial_balance":
          type: "number"
          description: "The initial numeric balance for the associated employee and time off policy as of the balance start date"
          nullable: true
          example: 8
        "balance_unit":
          allOf:
            - {"$ref": "#/components/schemas/TimeOffBalanceUnitEnum"}
          description: "The duration unit of the current balance"
          nullable: true
          example: "hours"
        "balance_start_date":
          type: "string"
          format: "date-time"
          description: "The date of when the initial balance quantity was set"
          nullable: true
          example: "2021-01-01T01:01:01.000Z"
        "balance_expiry_date":
          type: "string"
          format: "date-time"
          description: "The date of when the current balance expires"
          nullable: true
          example: "2021-01-01T01:01:01.000Z"
        "updated_at":
          type: "string"
          format: "date-time"
          description: "The updated_at date of this time off balance"
          nullable: true
          example: "2021-01-01T01:01:01.000Z"
    TimeOffBalancesPaginated:
      type: "object"
      properties:
        "next":
          type: "string"
          nullable: true
        "data":
          type: "array"
          items: {"$ref": "#/components/schemas/TimeOffBalances"}
        "raw":
          type: "array"
          items: {"$ref": "#/components/schemas/RawResponse"}
          nullable: true
      required:
        - "data"
    TimeOffBalanceUnitEnum:
      type: "object"
      properties:
        "value":
          type: "string"
          enum:
            - "minutes"
            - "hours"
            - "days"
            - "weeks"
            - "months"
            - "years"
            - "unknown"
            - "unmapped_value"
            - null
          description: "The unified value for the duration unit. If the provider does not specify this unit, the value will be set to unknown"
          nullable: true
          example: "hours"
          x-speakeasy-unknown-values: "allow"
        "source_value":
          oneOf:
            - type: "string"
            - type: "number"
            - type: "boolean"
            - type: "object"
            - type: "array"
              items: {}
          nullable: true
    TimeOffPaginated:
      type: "object"
      properties:
        "next_page":
          type: "string"
          nullable: true
          deprecated: true
        "next":
          type: "string"
          nullable: true
        "data":
          type: "array"
          items: {"$ref": "#/components/schemas/TimeOff"}
        "raw":
          type: "array"
          items: {"$ref": "#/components/schemas/RawResponse"}
          nullable: true
      required:
        - "data"
    TimeOffPolicies:
      type: "object"
      properties:
        "id":
          type: "string"
          description: "Unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "remote_id":
          type: "string"
          description: "Provider's unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "name":
          type: "string"
          description: "The name of this policy"
          nullable: true
          example: "Holidays"
        "description":
          type: "string"
          description: "The description of this policy"
          nullable: true
          example: "Usable for regional and national holidays of employees."
        "type":
          allOf:
            - {"$ref": "#/components/schemas/TimeOffPolicyTypeEnum"}
          description: "The type of this policy"
          nullable: true
        "duration_unit":
          allOf:
            - {"$ref": "#/components/schemas/TimeOffBalanceUnitEnum"}
          description: "The duration unit of the current policy"
          nullable: true
        "reasons":
          type: "array"
          items: {"$ref": "#/components/schemas/Reason"}
          nullable: true
        "created_at":
          type: "string"
          format: "date-time"
          description: "The created_at date of this policy"
          nullable: true
          example: "2021-01-01T01:01:01.000Z"
        "updated_at":
          type: "string"
          format: "date-time"
          description: "The updated_at date of this policy"
          nullable: true
          example: "2021-01-01T01:01:01.000Z"
    TimeOffPoliciesPaginated:
      type: "object"
      properties:
        "next":
          type: "string"
          nullable: true
        "data":
          type: "array"
          items: {"$ref": "#/components/schemas/TimeOffPolicies"}
        "raw":
          type: "array"
          items: {"$ref": "#/components/schemas/RawResponse"}
          nullable: true
      required:
        - "data"
    TimeOffPolicyResult:
      type: "object"
      properties:
        "data": {"$ref": "#/components/schemas/TimeOffPolicies"}
        "raw":
          type: "array"
          items: {"$ref": "#/components/schemas/RawResponse"}
          nullable: true
      required:
        - "data"
    TimeOffPolicyTypeEnum:
      type: "object"
      properties:
        "value":
          type: "string"
          enum:
            - "sick"
            - "unmapped_value"
            - "vacation"
            - "long_term_disability"
            - "short_term_disability"
            - "absent"
            - "comp_time"
            - "training"
            - "annual_leave"
            - "leave_of_absence"
            - "break"
            - "child_care_leave"
            - "maternity_leave"
            - "jury_duty"
            - "sabbatical"
            - "accident"
            - "paid"
            - "unpaid"
            - "holiday"
            - "personal"
            - "in_lieu"
            - "bereavement"
            - null
          description: "The unified value for the type of the time off policy. If the provider does not specify this unit, the value will be set to unmapped_value"
          nullable: true
          example: "holiday"
          x-speakeasy-unknown-values: "allow"
        "source_value":
          oneOf:
            - type: "string"
            - type: "number"
            - type: "boolean"
            - type: "object"
            - type: "array"
              items: {}
          nullable: true
    TimeOffResult:
      type: "object"
      properties:
        "data": {"$ref": "#/components/schemas/TimeOff"}
        "raw":
          type: "array"
          items: {"$ref": "#/components/schemas/RawResponse"}
          nullable: true
      required:
        - "data"
    TimeOffStatusEnum:
      type: "object"
      properties:
        "value":
          type: "string"
          enum:
            - "approved"
            - "cancelled"
            - "rejected"
            - "pending"
            - "deleted"
            - "draft"
            - "unmapped_value"
            - null
          nullable: true
          x-speakeasy-unknown-values: "allow"
        "source_value":
          oneOf:
            - type: "string"
            - type: "number"
            - type: "boolean"
            - type: "object"
            - type: "array"
              items: {}
          nullable: true
    TimeOffTypeEnum:
      type: "object"
      properties:
        "value":
          type: "string"
          enum:
            - "sick"
            - "unmapped_value"
            - "vacation"
            - "long_term_disability"
            - "short_term_disability"
            - "absent"
            - "comp_time"
            - "training"
            - "annual_leave"
            - "leave_of_absence"
            - "break"
            - "child_care_leave"
            - "maternity_leave"
            - "jury_duty"
            - "sabbatical"
            - "accident"
            - "paid"
            - "unpaid"
            - "holiday"
            - "personal"
            - "in_lieu"
            - "bereavement"
            - null
          nullable: true
          x-speakeasy-unknown-values: "allow"
        "source_value":
          oneOf:
            - type: "string"
            - type: "number"
            - type: "boolean"
            - type: "object"
            - type: "array"
              items: {}
          nullable: true
    TypeApiModel:
      type: "object"
      properties:
        "id":
          type: "string"
          description: "Unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "remote_id":
          type: "string"
          description: "Provider's unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "label":
          type: "string"
          description: "The label of the employment type"
          nullable: true
          example: "Permanent"
        "type":
          allOf:
            - {"$ref": "#/components/schemas/TypeEnum"}
          description: "The type of employment (e.g., contractor, permanent)"
          nullable: true
          example: "permanent"
    TypeEnum:
      type: "object"
      properties:
        "value":
          type: "string"
          enum:
            - "contractor"
            - "intern"
            - "permanent"
            - "apprentice"
            - "freelance"
            - "terminated"
            - "temporary"
            - "seasonal"
            - "volunteer"
            - "probation"
            - "internal"
            - "external"
            - "expatriate"
            - "employer_of_record"
            - "casual"
            - "Programme"
            - "unmapped_value"
            - null
          nullable: true
          x-speakeasy-unknown-values: "allow"
        "source_value":
          oneOf:
            - type: "string"
            - type: "number"
            - type: "boolean"
            - type: "object"
            - type: "array"
              items: {}
          nullable: true
    UnifiedWarningApiModel:
      type: "object"
      properties:
        "message":
          type: "string"
          nullable: true
          example: "The provided field type is not supported in the current model."
    UpdateResult:
      type: "object"
      properties:
        "statusCode":
          type: "number"
          example: 200
        "message":
          type: "string"
          example: "Record updated successfully."
        "timestamp":
          type: "string"
          format: "date-time"
          example: "2021-01-01T01:01:01.000Z"
      required:
        - "statusCode"
        - "message"
        - "timestamp"
    WorkEligibility:
      type: "object"
      properties:
        "id":
          type: "string"
          description: "Unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "remote_id":
          type: "string"
          description: "Provider's unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "type":
          allOf:
            - {"$ref": "#/components/schemas/WorkEligibilityTypeEnum"}
          nullable: true
          example: "visa"
        "sub_type":
          type: "string"
          nullable: true
          example: "H1B"
        "document":
          allOf:
            - {"$ref": "#/components/schemas/File"}
          nullable: true
        "valid_from":
          type: "string"
          format: "date-time"
          nullable: true
          example: "2021-01-01T00:00:00.000Z"
        "valid_to":
          type: "string"
          format: "date-time"
          nullable: true
          example: "2021-01-01T00:00:00.000Z"
        "issued_by":
          allOf:
            - {"$ref": "#/components/schemas/CountryCodeEnum"}
          description: "The country code of the issued by authority"
          nullable: true
        "number":
          type: "string"
          nullable: true
          example: "1234567890"
    WorkEligibilityPaginated:
      type: "object"
      properties:
        "next_page":
          type: "string"
          nullable: true
          deprecated: true
        "next":
          type: "string"
          nullable: true
        "data":
          type: "array"
          items: {"$ref": "#/components/schemas/WorkEligibility"}
        "raw":
          type: "array"
          items: {"$ref": "#/components/schemas/RawResponse"}
          nullable: true
      required:
        - "data"
    WorkEligibilityResult:
      type: "object"
      properties:
        "data": {"$ref": "#/components/schemas/WorkEligibility"}
        "raw":
          type: "array"
          items: {"$ref": "#/components/schemas/RawResponse"}
          nullable: true
      required:
        - "data"
    WorkEligibilityTypeEnum:
      type: "object"
      properties:
        "value":
          type: "string"
          enum:
            - "visa"
            - "passport"
            - "driver_license"
            - "birth_certificate"
            - "other"
            - "unmapped_value"
            - null
          nullable: true
          x-speakeasy-unknown-values: "allow"
        "source_value":
          oneOf:
            - type: "string"
            - type: "number"
            - type: "boolean"
            - type: "object"
            - type: "array"
              items: {}
          nullable: true
    WorkTimeApiModel:
      type: "object"
      properties:
        "duration":
          type: "string"
          format: "duration"
          description: "The work time duration in ISO 8601 duration format"
          nullable: true
          example: "P0Y0M0DT8H0M0S"
        "duration_unit":
          allOf:
            - {"$ref": "#/components/schemas/WorkTimeUnitEnum"}
          description: "The duration unit of the work time"
          nullable: true
          example: "month"
    WorkTimeUnitEnum:
      type: "object"
      properties:
        "value":
          type: "string"
          enum:
            - "day"
            - "week"
            - "month"
            - "year"
            - "unmapped_value"
            - null
          description: "The unified value for the period."
          nullable: true
          example: "month"
          x-speakeasy-unknown-values: "allow"
        "source_value":
          oneOf:
            - type: "string"
            - type: "number"
            - type: "boolean"
            - type: "object"
            - type: "array"
              items: {}
          nullable: true
    WriteResultApiModel:
      type: "object"
      properties:
        "statusCode":
          type: "number"
          nullable: true
          example: 201
        "message":
          type: "string"
          nullable: true
          example: "Employee created successfully"
        "timestamp":
          type: "string"
          format: "date-time"
          nullable: true
          example: "2021-01-01T01:01:01.000Z"
        "provider_errors":
          type: "array"
          items: {"$ref": "#/components/schemas/ProviderErrorApiModel"}
          nullable: true
          example: [{"status": 400, "url": "https://api.someprovider.com/v1/endpoint", "raw": {"error": "Bad Request", "message": "The supplied data is invalid"}, "headers": {"date": "Tue, 02 Apr 2024 13:52:01 GMT", "content-type": "application/json; charset=utf-8", "transfer-encoding": "chunked", "connection": "close"}}]
        "unified_warnings":
          type: "array"
          items: {"$ref": "#/components/schemas/UnifiedWarningApiModel"}
          nullable: true
          example: [{"message": "The provided field type is not supported in the current model."}]
    Answer:
      type: "object"
      properties:
        "id":
          type: "string"
          description: "Unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "remote_id":
          type: "string"
          description: "Provider's unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "type":
          allOf:
            - {"$ref": "#/components/schemas/AnswerEnum"}
          description: "Type of the answer"
          nullable: true
        "values":
          type: "array"
          items:
            type: "string"
          description: "Values of the answer"
          nullable: true
          example: ["Yes", "No Travel", "It sounds pretty cool.", "Excel", "Power Point"]
    AnswerEnum:
      type: "object"
      properties:
        "value":
          type: "string"
          enum:
            - "short_text"
            - "long_text"
            - "attachment"
            - "multi_select"
            - "single_select"
            - "boolean"
            - "number"
            - "date"
            - "video"
            - "reference_check"
            - "url"
            - "unmapped_value"
            - null
          description: "The type of the answer."
          nullable: true
          example: "short_text"
          x-speakeasy-unknown-values: "allow"
        "source_value":
          oneOf:
            - type: "string"
            - type: "number"
            - type: "boolean"
            - type: "object"
            - type: "array"
              items: {}
          description: "The source value of the answer type."
          nullable: true
          example: "Short Text"
    Application:
      type: "object"
      properties:
        "id":
          type: "string"
          description: "Unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "remote_id":
          type: "string"
          description: "Provider's unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "unified_custom_fields":
          type: "object"
          additionalProperties: true
          description: "Custom Unified Fields configured in your StackOne project"
          nullable: true
          example: {"my_project_custom_field_1": "REF-1236", "my_project_custom_field_2": "some other value"}
        "candidate_id":
          type: "string"
          description: "Unique identifier of the candidate"
          nullable: true
          example: "e3cb75bf-aa84-466e-a6c1-b8322b257a48"
        "remote_candidate_id":
          type: "string"
          description: "Provider's unique identifier of the candidate"
          nullable: true
          example: "e3cb75bf-aa84-466e-a6c1-b8322b257a48"
        "job_id":
          type: "string"
          description: "Unique identifier of the job"
          nullable: true
          example: "4071538b-3cac-4fbf-ac76-f78ed250ffdd"
        "remote_job_id":
          type: "string"
          description: "Provider's unique identifier of the job"
          nullable: true
          example: "4071538b-3cac-4fbf-ac76-f78ed250ffdd"
        "interview_stage":
          allOf:
            - {"$ref": "#/components/schemas/InterviewStage"}
          nullable: true
        "interview_stage_id":
          type: "string"
          description: "Unique identifier of the interview stage"
          nullable: true
          example: "18bcbb1b-3cbc-4198-a999-460861d19480"
        "remote_interview_stage_id":
          type: "string"
          description: "Provider's unique identifier of the interview stage"
          nullable: true
          example: "18bcbb1b-3cbc-4198-a999-460861d19480"
        "rejected_reasons":
          type: "array"
          items: {"$ref": "#/components/schemas/RejectedReason"}
          nullable: true
        "rejected_reason_ids":
          type: "array"
          items:
            type: "string"
          description: "Unique identifiers of the rejection reasons"
          nullable: true
          example: ["f223d7f6-908b-48f0-9237-b201c307f609"]
        "remote_rejected_reason_ids":
          type: "array"
          items:
            type: "string"
          description: "Provider's unique identifiers of the rejection reasons"
          nullable: true
          example: ["f223d7f6-908b-48f0-9237-b201c307f609"]
        "rejected_at":
          type: "string"
          format: "date-time"
          description: "Date of rejection"
          nullable: true
          example: "2021-01-01T01:01:01.000Z"
        "location_id":
          type: "string"
          description: "Unique identifier of the location"
          nullable: true
          example: "dd8d41d1-5eb8-4408-9c87-9ba44604eae4"
          deprecated: true
        "remote_location_id":
          type: "string"
          description: "Provider's unique identifier of the location"
          nullable: true
          example: "dd8d41d1-5eb8-4408-9c87-9ba44604eae4"
        "location_ids":
          type: "array"
          items:
            type: "string"
          description: "Unique identifiers of the locations"
          nullable: true
          example: ["dd8d41d1-5eb8-4408-9c87-9ba44604eae4"]
        "remote_location_ids":
          type: "array"
          items:
            type: "string"
          description: "Remote's unique identifiers of the locations"
          nullable: true
          example: ["dd8d41d1-5eb8-4408-9c87-9ba44604eae4"]
        "application_status":
          allOf:
            - {"$ref": "#/components/schemas/ApplicationStatusEnum"}
          nullable: true
        "questionnaires":
          type: "array"
          items: {"$ref": "#/components/schemas/Questionnaire"}
          description: "Questionnaires associated with the application"
          nullable: true
          example: {"id": "right_to_work", "answers": [{"id": "answer1", "type": "text", "values": ["Yes"]}]}
        "candidate":
          allOf:
            - {"$ref": "#/components/schemas/ApplicationCandidate"}
          nullable: true
        "attachments":
          type: "array"
          items: {"$ref": "#/components/schemas/ApplicationAttachment"}
          description: "Use `documents` expand instead"
          nullable: true
          deprecated: true
        "documents":
          type: "array"
          items: {"$ref": "#/components/schemas/AtsDocumentApiModel"}
          description: "The documents attached to this application (eg. resume, cover letter etc.)"
          nullable: true
        "result_links":
          type: "array"
          items: {"$ref": "#/components/schemas/ResultLink"}
          nullable: true
        "source":
          allOf:
            - {"$ref": "#/components/schemas/Source"}
          nullable: true
        "created_at":
          type: "string"
          format: "date-time"
          description: "Date of creation"
          nullable: true
          example: "2021-01-01T01:01:01.000Z"
        "updated_at":
          type: "string"
          format: "date-time"
          description: "Date of last update"
          nullable: true
          example: "2021-01-01T01:01:01.000Z"
        "custom_fields":
          type: "array"
          items: {"$ref": "#/components/schemas/CustomFields"}
          description: "The application custom fields"
          nullable: true
    ApplicationAttachment:
      type: "object"
      properties:
        "file_name":
          type: "string"
          description: "The file name of the attachment."
          nullable: true
          example: "resume.pdf"
        "content":
          type: "string"
          description: "The content of the attachment."
          nullable: true
          example: "Base64 encoded content"
        "url":
          type: "string"
          description: "The URL of the attachment."
          nullable: true
          example: "http://example.com/resume.pdf"
        "content_type":
          allOf:
            - {"$ref": "#/components/schemas/AttachmentContentType"}
          nullable: true
    ApplicationCandidate:
      type: "object"
      properties:
        "name":
          type: "string"
          description: "Candidate name"
          nullable: true
          example: "Romain Sestier"
        "first_name":
          type: "string"
          description: "First name of the candidate"
          nullable: true
          example: "John"
        "last_name":
          type: "string"
          description: "Last name of the candidate"
          nullable: true
          example: "Doe"
        "email":
          type: "string"
          description: "Email of the candidate"
          nullable: true
          example: "john.doe@example.com"
        "emails":
          type: "array"
          items: {"$ref": "#/components/schemas/CandidateEmail"}
          description: "List of candidate emails"
          nullable: true
        "phone_numbers":
          type: "array"
          items: {"$ref": "#/components/schemas/PhoneNumber"}
          description: "List of candidate phone numbers including the type of the number when available"
          nullable: true
        "social_links":
          type: "array"
          items: {"$ref": "#/components/schemas/SocialLink"}
          description: "List of candidate social links"
          nullable: true
        "company":
          type: "string"
          description: "Candidate company"
          nullable: true
          example: "Company Inc."
        "title":
          type: "string"
          description: "Candidate title"
          nullable: true
          example: "Software Engineer"
    ApplicationChanges:
      type: "object"
      properties:
        "id":
          type: "string"
          description: "Unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "remote_id":
          type: "string"
          description: "Provider's unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "created_at":
          type: "string"
          format: "date-time"
          description: "Timestamp when the change was created"
          example: "2024-01-15T10:30:00Z"
        "effective_at":
          type: "string"
          format: "date-time"
          description: "Timestamp when the change became effective"
          nullable: true
          example: "2024-01-15T10:30:00Z"
        "actor":
          allOf:
            - {"$ref": "#/components/schemas/ChangesActor"}
          description: "The actor who made the change"
          nullable: true
        "change_type":
          allOf:
            - {"$ref": "#/components/schemas/ApplicationChangeTypeEnum"}
          description: "The type of change that occurred to the application"
          nullable: true
        "new_values":
          allOf:
            - {"$ref": "#/components/schemas/ApplicationChangesDataModel"}
          description: "The new values for changed application properties. Only includes fields that commonly change over the application lifecycle."
      required:
        - "created_at"
        - "new_values"
    ApplicationChangesDataModel:
      type: "object"
      properties:
        "interview_stage_id":
          type: "string"
          description: "Unique identifier of the interview stage"
          nullable: true
          example: "18bcbb1b-3cbc-4198-a999-460861d19480"
        "rejected_reason_ids":
          type: "array"
          items:
            type: "string"
          description: "Unique identifiers of the rejection reasons"
          nullable: true
          example: ["f223d7f6-908b-48f0-9237-b201c307f609"]
        "application_status":
          allOf:
            - {"$ref": "#/components/schemas/ApplicationStatusEnum"}
          nullable: true
    ApplicationChangesPaginated:
      type: "object"
      properties:
        "next":
          type: "string"
          nullable: true
        "data":
          type: "array"
          items: {"$ref": "#/components/schemas/ApplicationChanges"}
          nullable: true
        "raw":
          type: "array"
          items: {"$ref": "#/components/schemas/RawResponse"}
          nullable: true
    ApplicationChangeTypeEnum:
      type: "object"
      properties:
        "value":
          type: "string"
          enum:
            - "application_status"
            - "interview_stage"
            - "rejected_reasons"
            - "unmapped_value"
            - null
          description: "The type of change that occurred to the application"
          nullable: true
          example: "application_status"
          x-speakeasy-unknown-values: "allow"
        "source_value":
          oneOf:
            - type: "string"
            - type: "number"
            - type: "boolean"
            - type: "object"
            - type: "array"
              items: {}
          description: "The source value of the change type"
          nullable: true
          example: "StatusChange"
    ApplicationResult:
      type: "object"
      properties:
        "data": {"$ref": "#/components/schemas/Application"}
        "raw":
          type: "array"
          items: {"$ref": "#/components/schemas/RawResponse"}
          nullable: true
      required:
        - "data"
    ApplicationsPaginated:
      type: "object"
      properties:
        "next_page":
          type: "string"
          nullable: true
          deprecated: true
        "next":
          type: "string"
          nullable: true
        "data":
          type: "array"
          items: {"$ref": "#/components/schemas/Application"}
        "raw":
          type: "array"
          items: {"$ref": "#/components/schemas/RawResponse"}
          nullable: true
      required:
        - "data"
    ApplicationStatusEnum:
      type: "object"
      properties:
        "value":
          type: "string"
          enum:
            - "active"
            - "assessment"
            - "background_check"
            - "converted"
            - "declined_by_candidate"
            - "hired"
            - "interview"
            - "lead"
            - "offer"
            - "reference_check"
            - "rejected"
            - "review"
            - "screen"
            - "new"
            - "onboarding"
            - "created"
            - "accepted"
            - "short_list"
            - "approved"
            - "unmapped_value"
            - null
          description: "The status of the application."
          nullable: true
          example: "hired"
          x-speakeasy-unknown-values: "allow"
        "source_value":
          oneOf:
            - type: "string"
            - type: "number"
            - type: "boolean"
            - type: "object"
            - type: "array"
              items: {}
          description: "The source value of the application status."
          nullable: true
          example: "Hired"
    AssessmentPackage:
      type: "object"
      properties:
        "id":
          type: "string"
          description: "Unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "remote_id":
          type: "string"
          description: "Provider's unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "name":
          type: "string"
          description: "Package name"
          nullable: true
          example: "Test 1"
        "description":
          type: "string"
          description: "Package description"
          nullable: true
          example: "Skills test to gauge a candidate's proficiency in job-specific skills"
    AssessmentPackagePaginated:
      type: "object"
      properties:
        "next_page":
          type: "string"
          nullable: true
          deprecated: true
        "next":
          type: "string"
          nullable: true
        "data":
          type: "array"
          items: {"$ref": "#/components/schemas/AssessmentPackage"}
        "raw":
          type: "array"
          items: {"$ref": "#/components/schemas/RawResponse"}
          nullable: true
      required:
        - "data"
    AssessmentPackageResult:
      type: "object"
      properties:
        "data": {"$ref": "#/components/schemas/AssessmentPackage"}
        "raw":
          type: "array"
          items: {"$ref": "#/components/schemas/RawResponse"}
          nullable: true
      required:
        - "data"
    AssessmentResult:
      type: "object"
      properties:
        "id":
          type: "string"
          description: "Unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "remote_id":
          type: "string"
          description: "Provider's unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "candidate":
          allOf:
            - {"$ref": "#/components/schemas/ResultCandidateApiModel"}
          nullable: true
        "score":
          allOf:
            - {"$ref": "#/components/schemas/ScoreApiModel"}
          nullable: true
        "start_date":
          type: "string"
          format: "date-time"
          description: "The start date of the candidate test"
          nullable: true
          example: "2021-01-01T01:01:01.000Z"
        "submission_date":
          type: "string"
          format: "date-time"
          description: "The submission date of the candidate test"
          nullable: true
          example: "2021-01-01T01:01:01.000Z"
        "summary":
          type: "string"
          description: "The summary about the result of the test"
          nullable: true
          example: "Test is passed"
        "result":
          allOf:
            - {"$ref": "#/components/schemas/ResultEnum"}
          nullable: true
        "result_url":
          type: "string"
          description: "The test`s result url"
          nullable: true
          example: "https://exmaple.com/result?id=xyz"
        "attachments":
          type: "array"
          items: {"$ref": "#/components/schemas/Attachment"}
          nullable: true
    AssessmentResultsResult:
      type: "object"
      properties:
        "data": {"$ref": "#/components/schemas/AssessmentResult"}
        "raw":
          type: "array"
          items: {"$ref": "#/components/schemas/RawResponse"}
          nullable: true
      required:
        - "data"
    AssessmentTypeEnum:
      type: "object"
      properties:
        "value":
          type: "string"
          enum:
            - "responsibilities"
            - "skills"
            - "benefits"
            - "company_overview"
            - "description"
            - "other"
            - "unmapped_value"
            - null
          description: "The type of the description."
          nullable: true
          example: "responsibilities"
          x-speakeasy-unknown-values: "allow"
        "source_value":
          oneOf:
            - type: "string"
            - type: "number"
            - type: "boolean"
            - type: "object"
            - type: "array"
              items: {}
          description: "The source value of the description type."
          nullable: true
          example: "key_responsibilities"
    AtsCreateApplicationRequestDto:
      type: "object"
      properties:
        "passthrough":
          type: "object"
          additionalProperties: true
          description: "Value to pass through to the provider"
          nullable: true
          example: {"other_known_names": "John Doe"}
        "job_id":
          type: "string"
          description: "Unique identifier of the job"
          nullable: true
          example: "4071538b-3cac-4fbf-ac76-f78ed250ffdd"
        "job_posting_id":
          type: "string"
          description: "Unique identifier of the job posting that is associated with application"
          nullable: true
          example: "1c702a20-8de8-4d03-ac18-cbf4ac42eb51"
        "location_id":
          type: "string"
          description: "Unique identifier of the location"
          nullable: true
          example: "dd8d41d1-5eb8-4408-9c87-9ba44604eae4"
        "application_status":
          allOf:
            - {"$ref": "#/components/schemas/ApplicationStatusEnum"}
          nullable: true
        "questionnaires":
          type: "array"
          items: {"$ref": "#/components/schemas/CreateQuestionnaire"}
          description: "Questionnaires associated with the application"
          nullable: true
          example: {"id": "right_to_work", "answers": [{"id": "answer1", "type": "text", "values": ["Yes"]}]}
        "source":
          allOf:
            - {"$ref": "#/components/schemas/CreateSource"}
          nullable: true
        "candidate_id":
          type: "string"
          description: "Unique identifier of the candidate. Provide this OR candidate, but not both."
          nullable: true
          example: "e3cb75bf-aa84-466e-a6c1-b8322b257a48"
        "candidate":
          allOf:
            - {"$ref": "#/components/schemas/CreateCandidate"}
          description: "Candidate Properties. Provide this OR candidate_id, but not both. Providing this attempts to create a new candidate with the application."
          nullable: true
        "documents":
          type: "array"
          items: {"$ref": "#/components/schemas/UnifiedUploadRequestDto"}
          description: "Document Properties. Providing this attempts to upload files with the application."
          nullable: true
    AtsCreateBackgroundCheckOrderRequestDto:
      type: "object"
      properties:
        "id":
          type: "string"
          description: "Unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "remote_id":
          type: "string"
          description: "Provider's unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "application":
          allOf:
            - {"$ref": "#/components/schemas/OrderApplicationApiModel"}
          nullable: true
        "job":
          allOf:
            - {"$ref": "#/components/schemas/OrderJobApiModel"}
          nullable: true
        "candidate":
          allOf:
            - {"$ref": "#/components/schemas/OrderCandidateApiModel"}
          nullable: true
        "requester":
          allOf:
            - {"$ref": "#/components/schemas/OrderJobHiringTeamApiModel"}
          nullable: true
        "results_update_url":
          type: "string"
          description: "Results update url"
          nullable: true
          example: "https://exmaple.com/integrations/results/update"
        "package":
          allOf:
            - {"$ref": "#/components/schemas/OrderBackgroundCheckPackageApiModel"}
          nullable: true
        "passthrough":
          type: "object"
          additionalProperties: true
          description: "Value to pass through to the provider"
          nullable: true
          example: {"other_known_names": "John Doe"}
    AtsCreateBackgroundCheckPackagesRequestDto:
      type: "object"
      properties:
        "name":
          type: "string"
          description: "Package name"
          nullable: true
          example: "Test 1"
        "description":
          type: "string"
          description: "Package description"
          nullable: true
          example: "Skills test to gauge a candidate's proficiency in job-specific skills"
        "tests":
          type: "array"
          items: {"$ref": "#/components/schemas/CreatePackage"}
          description: "Package tests"
          nullable: true
        "passthrough":
          type: "object"
          additionalProperties: true
          description: "Value to pass through to the provider"
          nullable: true
          example: {"other_known_names": "John Doe"}
    AtsCreateCandidateRequestDto:
      type: "object"
      properties:
        "passthrough":
          type: "object"
          additionalProperties: true
          description: "Value to pass through to the provider"
          nullable: true
          example: {"other_known_names": "John Doe"}
        "unified_custom_fields":
          type: "object"
          additionalProperties: true
          description: "Custom Unified Fields configured in your StackOne project"
          nullable: true
          example: {"my_project_custom_field_1": "REF-1236", "my_project_custom_field_2": "some other value"}
        "phone_number":
          type: "string"
          description: "The candidate personal phone number"
          nullable: true
          example: "+1234567890"
          deprecated: true
        "phone_numbers":
          type: "array"
          items: {"$ref": "#/components/schemas/PhoneNumber"}
          description: "List of candidate phone numbers including the type of the number when available"
          nullable: true
        "name":
          type: "string"
          description: "Candidate name"
          nullable: true
          example: "Romain Sestier"
        "first_name":
          type: "string"
          description: "Candidate first name"
          nullable: true
          example: "Romain"
        "last_name":
          type: "string"
          description: "Candidate last name"
          nullable: true
          example: "Sestier"
        "email":
          type: "string"
          description: "Candidate email"
          nullable: true
          example: "sestier.romain123@gmail.com"
        "social_links":
          type: "array"
          items: {"$ref": "#/components/schemas/SocialLink"}
          description: "List of candidate social links"
          nullable: true
        "company":
          type: "string"
          description: "Candidate company"
          nullable: true
          example: "Company Inc."
        "title":
          type: "string"
          description: "Candidate title"
          nullable: true
          example: "Software Engineer"
        "hired_at":
          type: "string"
          format: "date-time"
          description: "Candidate hired date"
          nullable: true
          example: "2021-01-01T01:01:01.000Z"
        "country":
          type: "string"
          description: "Candidate country"
          nullable: true
          example: "United States"
        "custom_fields":
          type: "array"
          items: {"$ref": "#/components/schemas/CustomFields"}
          description: "The candidate custom fields"
          nullable: true
    AtsCreateCandidatesAssessmentsRequestDto:
      type: "object"
      properties:
        "id":
          type: "string"
          description: "Unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "package":
          allOf:
            - {"$ref": "#/components/schemas/OrderPackageApiModel"}
          nullable: true
        "application":
          allOf:
            - {"$ref": "#/components/schemas/OrderApplicationApiModel"}
          nullable: true
        "job":
          allOf:
            - {"$ref": "#/components/schemas/OrderJobApiModel"}
          nullable: true
        "candidate":
          allOf:
            - {"$ref": "#/components/schemas/OrderCandidateApiModel"}
          nullable: true
        "requester":
          allOf:
            - {"$ref": "#/components/schemas/OrderJobHiringTeamApiModel"}
          nullable: true
        "results_update_url":
          type: "string"
          description: "Results update url"
          nullable: true
          example: "https://exmaple.com/integrations/results/update"
        "passthrough":
          type: "object"
          additionalProperties: true
          description: "Value to pass through to the provider"
          nullable: true
          example: {"other_known_names": "John Doe"}
    AtsCreateJobRequestDto:
      type: "object"
      properties:
        "unified_custom_fields":
          type: "object"
          additionalProperties: true
          description: "Custom Unified Fields configured in your StackOne project"
          nullable: true
          example: {"my_project_custom_field_1": "REF-1236", "my_project_custom_field_2": "some other value"}
        "code":
          type: "string"
          description: "Code of the job"
          nullable: true
          example: "184919"
        "title":
          type: "string"
          description: "Title of the job"
          nullable: true
          example: "Software Engineer"
        "description":
          type: "string"
          description: "Description of the job"
          nullable: true
          example: "Responsible for identifying business requirements"
        "status":
          type: "string"
          description: "Status of the job"
          nullable: true
          example: "archived"
          deprecated: true
        "job_status":
          allOf:
            - {"$ref": "#/components/schemas/JobStatusEnum"}
          description: "Status of the job"
          nullable: true
        "department_ids":
          type: "array"
          items:
            type: "string"
          description: "Department ids of the job"
          nullable: true
          example: ["308570", "308571", "308572"]
        "location_ids":
          type: "array"
          items:
            type: "string"
          description: "Location ids of the job"
          nullable: true
          example: ["668570", "678571", "688572"]
        "hiring_team":
          type: "array"
          items: {"$ref": "#/components/schemas/JobHiringTeam"}
          description: "Hiring team for the job."
          nullable: true
        "interview_stages":
          type: "array"
          items: {"$ref": "#/components/schemas/InterviewStage"}
          description: "Interview stages for the job."
          nullable: true
        "confidential":
          type: "string"
          enum:
            - "true"
            - "false"
            - "unmapped_value"
            - null
          description: "Confidential status of the job"
          nullable: true
          x-speakeasy-unknown-values: "allow"
        "custom_fields":
          type: "array"
          items: {"$ref": "#/components/schemas/CustomFields"}
          description: "The job custom fields"
          nullable: true
        "passthrough":
          type: "object"
          additionalProperties: true
          description: "Value to pass through to the provider"
          nullable: true
          example: {"other_known_names": "John Doe"}
    AtsCreateNotesRequestDto:
      type: "object"
      properties:
        "content":
          type: "array"
          items: {"$ref": "#/components/schemas/NoteContentApiModel"}
          nullable: true
        "author_id":
          type: "string"
          description: "Unique identifier of the author"
          nullable: true
          example: "1234567890"
        "visibility":
          allOf:
            - {"$ref": "#/components/schemas/NotesVisibilityEnum"}
          description: "Visibility of the note"
          nullable: true
          example: "public"
        "passthrough":
          type: "object"
          additionalProperties: true
          description: "Value to pass through to the provider"
          nullable: true
          example: {"other_known_names": "John Doe"}
    AtsCreateOfferRequestDto:
      type: "object"
      properties:
        "application_id":
          type: "string"
          nullable: true
        "start_date":
          type: "string"
          format: "date-time"
          description: "Date of creation"
          nullable: true
          example: "2021-01-01T01:01:01.000Z"
        "offer_status":
          allOf:
            - {"$ref": "#/components/schemas/OfferStatusEnum"}
          nullable: true
        "salary":
          type: "number"
          nullable: true
        "currency":
          type: "string"
          nullable: true
        "offer_history":
          type: "array"
          items: {"$ref": "#/components/schemas/OfferHistory"}
          nullable: true
        "passthrough":
          type: "object"
          additionalProperties: true
          description: "Value to pass through to the provider"
          nullable: true
          example: {"other_known_names": "John Doe"}
    AtsDocumentApiModel:
      type: "object"
      properties:
        "id":
          type: "string"
          description: "Unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "remote_id":
          type: "string"
          description: "Provider's unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "name":
          type: "string"
          description: "The name of the file"
          nullable: true
          example: "My Document"
        "path":
          type: "string"
          description: "The path where the file is stored"
          nullable: true
          example: "/path/to/file"
        "category":
          allOf:
            - {"$ref": "#/components/schemas/FileCategoryEnumApiModel"}
          description: "The category of the the document"
          nullable: true
          example: "templates, forms, backups, etc."
        "contents":
          type: "array"
          items: {"$ref": "#/components/schemas/Content"}
          description: "The content of the file. Deprecated, use `url` and `file_format` one level up instead"
          nullable: true
          deprecated: true
        "category_id":
          type: "string"
          description: "The categoryId of the documents"
          nullable: true
          example: "6530"
        "created_at":
          type: "string"
          format: "date-time"
          description: "The creation date of the file"
          nullable: true
          example: "2021-01-01T01:01:01.000Z"
        "updated_at":
          type: "string"
          format: "date-time"
          description: "The update date of the file"
          nullable: true
          example: "2021-01-02T01:01:01.000Z"
        "remote_url":
          type: "string"
          description: "URL where the file content is located"
          nullable: true
          example: "https://example.com/file.pdf"
        "file_format":
          allOf:
            - {"$ref": "#/components/schemas/FileFormatEnum"}
          description: "The file format of the file"
          nullable: true
        "unified_custom_fields":
          type: "object"
          additionalProperties: true
          description: "Custom Unified Fields configured in your StackOne project"
          nullable: true
          example: {"my_project_custom_field_1": "REF-1236", "my_project_custom_field_2": "some other value"}
        "type":
          allOf:
            - {"$ref": "#/components/schemas/AtsDocumentTypeEnum"}
          description: "The content type of the document"
          nullable: true
          deprecated: true
    AtsDocumentResult:
      type: "object"
      properties:
        "data": {"$ref": "#/components/schemas/AtsDocumentApiModel"}
        "raw":
          type: "array"
          items: {"$ref": "#/components/schemas/RawResponse"}
          nullable: true
      required:
        - "data"
    AtsDocumentsPaginated:
      type: "object"
      properties:
        "next_page":
          type: "string"
          nullable: true
          deprecated: true
        "next":
          type: "string"
          nullable: true
        "data":
          type: "array"
          items: {"$ref": "#/components/schemas/AtsDocumentApiModel"}
        "raw":
          type: "array"
          items: {"$ref": "#/components/schemas/RawResponse"}
          nullable: true
      required:
        - "data"
    AtsDocumentTypeEnum:
      type: "object"
      properties:
        "value":
          type: "string"
          enum:
            - "resume"
            - "avatar"
            - "cover_letter"
            - "profile_picture"
            - "policy"
            - "passport"
            - "assessment"
            - "interview_attachment"
            - "take_home_test"
            - "offer_letter"
            - "signed_offer_letter"
            - "national_id"
            - "offer_packet"
            - "other"
            - "unmapped_value"
            - null
          description: "The category of the file"
          nullable: true
          x-speakeasy-unknown-values: "allow"
        "source_value":
          oneOf:
            - type: "string"
            - type: "number"
            - type: "boolean"
            - type: "object"
            - type: "array"
              items: {}
          nullable: true
    ATSLocation:
      type: "object"
      properties:
        "id":
          type: "string"
          description: "Unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "remote_id":
          type: "string"
          description: "Provider's unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "unified_custom_fields":
          type: "object"
          additionalProperties: true
          description: "Custom Unified Fields configured in your StackOne project"
          nullable: true
          example: {"my_project_custom_field_1": "REF-1236", "my_project_custom_field_2": "some other value"}
        "name":
          type: "string"
          nullable: true
    ATSLocationResult:
      type: "object"
      properties:
        "data": {"$ref": "#/components/schemas/ATSLocation"}
        "raw":
          type: "array"
          items: {"$ref": "#/components/schemas/RawResponse"}
          nullable: true
      required:
        - "data"
    ATSLocationsPaginated:
      type: "object"
      properties:
        "next_page":
          type: "string"
          nullable: true
          deprecated: true
        "next":
          type: "string"
          nullable: true
        "data":
          type: "array"
          items: {"$ref": "#/components/schemas/ATSLocation"}
        "raw":
          type: "array"
          items: {"$ref": "#/components/schemas/RawResponse"}
          nullable: true
      required:
        - "data"
    AtsMoveApplicationRequestDto:
      type: "object"
      properties:
        "passthrough":
          type: "object"
          additionalProperties: true
          description: "Value to pass through to the provider"
          nullable: true
          example: {"other_known_names": "John Doe"}
        "interview_stage_id":
          type: "string"
          description: "Unique identifier of the application stage."
          nullable: true
          example: "f223d7f6-908b-48f0-9237-b201c307f609"
    AtsRejectApplicationRequestDto:
      type: "object"
      properties:
        "passthrough":
          type: "object"
          additionalProperties: true
          description: "Value to pass through to the provider"
          nullable: true
          example: {"other_known_names": "John Doe"}
        "rejected_reason_id":
          type: "string"
          description: "Unique identifier of the rejection reason"
          nullable: true
          example: "f223d7f6-908b-48f0-9237-b201c307f609"
    AtsUpdateApplicationRequestDto:
      type: "object"
      properties:
        "passthrough":
          type: "object"
          additionalProperties: true
          description: "Value to pass through to the provider"
          nullable: true
          example: {"other_known_names": "John Doe"}
        "custom_fields":
          type: "array"
          items: {"$ref": "#/components/schemas/CustomFields"}
          description: "The application custom fields"
          nullable: true
        "application_status":
          allOf:
            - {"$ref": "#/components/schemas/ApplicationStatusEnum"}
          nullable: true
        "source":
          allOf:
            - {"$ref": "#/components/schemas/CreateSource"}
          nullable: true
    AtsUpdateBackgroundCheckPackagesRequestDto:
      type: "object"
      properties:
        "name":
          type: "string"
          description: "Package name"
          nullable: true
          example: "Test 1"
        "description":
          type: "string"
          description: "Package description"
          nullable: true
          example: "Skills test to gauge a candidate's proficiency in job-specific skills"
        "tests":
          type: "array"
          items: {"$ref": "#/components/schemas/UpdatePackage"}
          description: "Package tests"
          nullable: true
        "passthrough":
          type: "object"
          additionalProperties: true
          description: "Value to pass through to the provider"
          nullable: true
          example: {"other_known_names": "John Doe"}
    AtsUpdateBackgroundCheckResultRequestDto:
      type: "object"
      properties:
        "id":
          type: "string"
          description: "Unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "score":
          allOf:
            - {"$ref": "#/components/schemas/ScoreApiModel"}
          nullable: true
        "start_date":
          type: "string"
          format: "date-time"
          description: "The start date of the candidate test"
          nullable: true
          example: "2021-01-01T01:01:01.000Z"
        "submission_date":
          type: "string"
          format: "date-time"
          description: "The submission date of the candidate test"
          nullable: true
          example: "2021-01-01T01:01:01.000Z"
        "summary":
          type: "string"
          description: "The summary about the result of the test"
          nullable: true
          example: "Test is passed"
        "result":
          allOf:
            - {"$ref": "#/components/schemas/ResultEnum"}
          nullable: true
        "result_url":
          type: "string"
          description: "The test`s result url"
          nullable: true
          example: "https://exmaple.com/result?id=xyz"
        "attachments":
          type: "array"
          items: {"$ref": "#/components/schemas/Attachment"}
          nullable: true
        "candidate":
          allOf:
            - {"$ref": "#/components/schemas/UpdateResultCandidateApiModel"}
          nullable: true
        "passthrough":
          type: "object"
          additionalProperties: true
          description: "Value to pass through to the provider"
          nullable: true
          example: {"other_known_names": "John Doe"}
    AtsUpdateCandidateRequestDto:
      type: "object"
      properties:
        "passthrough":
          type: "object"
          additionalProperties: true
          description: "Value to pass through to the provider"
          nullable: true
          example: {"other_known_names": "John Doe"}
        "unified_custom_fields":
          type: "object"
          additionalProperties: true
          description: "Custom Unified Fields configured in your StackOne project"
          nullable: true
          example: {"my_project_custom_field_1": "REF-1236", "my_project_custom_field_2": "some other value"}
        "name":
          type: "string"
          description: "Candidate name"
          nullable: true
          example: "Romain Sestier"
        "first_name":
          type: "string"
          description: "Candidate first name"
          nullable: true
          example: "Romain"
        "last_name":
          type: "string"
          description: "Candidate last name"
          nullable: true
          example: "Sestier"
        "email":
          type: "string"
          description: "Candidate email"
          nullable: true
          example: "sestier.romain123@gmail.com"
        "emails":
          type: "array"
          items: {"$ref": "#/components/schemas/CandidateEmail"}
          description: "List of candidate emails"
          nullable: true
        "social_links":
          type: "array"
          items: {"$ref": "#/components/schemas/SocialLink"}
          description: "List of candidate social links"
          nullable: true
        "phone":
          type: "string"
          description: "Candidate phone number"
          nullable: true
          example: "+16178294093"
          deprecated: true
        "phone_numbers":
          type: "array"
          items: {"$ref": "#/components/schemas/PhoneNumber"}
          description: "List of candidate phone numbers including the type of the number when available"
          nullable: true
        "company":
          type: "string"
          description: "Candidate company"
          nullable: true
          example: "Company Inc."
        "title":
          type: "string"
          description: "Candidate title"
          nullable: true
          example: "Software Engineer"
        "application_ids":
          type: "array"
          items:
            type: "string"
          description: "List of candidate application IDs"
          nullable: true
          example: ["123e4567-e89b-12d3-a456-426614174000", "523e1234-e89b-fdd2-a456-762545121101"]
        "hired_at":
          type: "string"
          format: "date-time"
          description: "Candidate hired date"
          nullable: true
          example: "2021-01-01T01:01:01.000Z"
        "country":
          type: "string"
          description: "Candidate country"
          nullable: true
          example: "United States"
        "custom_fields":
          type: "array"
          items: {"$ref": "#/components/schemas/CustomFields"}
          description: "The candidate custom fields"
          nullable: true
    AtsUpdateCandidatesAssessmentsResultsRequestDto:
      type: "object"
      properties:
        "id":
          type: "string"
          description: "Unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "score":
          allOf:
            - {"$ref": "#/components/schemas/ScoreApiModel"}
          nullable: true
        "start_date":
          type: "string"
          format: "date-time"
          description: "The start date of the candidate test"
          nullable: true
          example: "2021-01-01T01:01:01.000Z"
        "submission_date":
          type: "string"
          format: "date-time"
          description: "The submission date of the candidate test"
          nullable: true
          example: "2021-01-01T01:01:01.000Z"
        "summary":
          type: "string"
          description: "The summary about the result of the test"
          nullable: true
          example: "Test is passed"
        "result":
          allOf:
            - {"$ref": "#/components/schemas/ResultEnum"}
          nullable: true
        "result_url":
          type: "string"
          description: "The test`s result url"
          nullable: true
          example: "https://exmaple.com/result?id=xyz"
        "attachments":
          type: "array"
          items: {"$ref": "#/components/schemas/Attachment"}
          nullable: true
        "candidate":
          allOf:
            - {"$ref": "#/components/schemas/UpdateResultCandidateApiModel"}
          nullable: true
        "passthrough":
          type: "object"
          additionalProperties: true
          description: "Value to pass through to the provider"
          nullable: true
          example: {"other_known_names": "John Doe"}
    AtsUpdateJobRequestDto:
      type: "object"
      properties:
        "unified_custom_fields":
          type: "object"
          additionalProperties: true
          description: "Custom Unified Fields configured in your StackOne project"
          nullable: true
          example: {"my_project_custom_field_1": "REF-1236", "my_project_custom_field_2": "some other value"}
        "code":
          type: "string"
          description: "Code of the job"
          nullable: true
          example: "184919"
        "title":
          type: "string"
          description: "Title of the job"
          nullable: true
          example: "Software Engineer"
        "description":
          type: "string"
          description: "Description of the job"
          nullable: true
          example: "Responsible for identifying business requirements"
        "status":
          type: "string"
          description: "Status of the job"
          nullable: true
          example: "archived"
          deprecated: true
        "job_status":
          allOf:
            - {"$ref": "#/components/schemas/JobStatusEnum"}
          description: "Status of the job"
          nullable: true
        "department_ids":
          type: "array"
          items:
            type: "string"
          description: "Department ids of the job"
          nullable: true
          example: ["308570", "308571", "308572"]
        "location_ids":
          type: "array"
          items:
            type: "string"
          description: "Location ids of the job"
          nullable: true
          example: ["668570", "678571", "688572"]
        "hiring_team":
          type: "array"
          items: {"$ref": "#/components/schemas/JobHiringTeam"}
          description: "Hiring team for the job."
          nullable: true
        "interview_stages":
          type: "array"
          items: {"$ref": "#/components/schemas/InterviewStage"}
          description: "Interview stages for the job."
          nullable: true
        "confidential":
          type: "string"
          enum:
            - "true"
            - "false"
            - "unmapped_value"
            - null
          description: "Confidential status of the job"
          nullable: true
          x-speakeasy-unknown-values: "allow"
        "custom_fields":
          type: "array"
          items: {"$ref": "#/components/schemas/CustomFields"}
          description: "The job custom fields"
          nullable: true
        "passthrough":
          type: "object"
          additionalProperties: true
          description: "Value to pass through to the provider"
          nullable: true
          example: {"other_known_names": "John Doe"}
    AtsUpdateNotesRequestDto:
      type: "object"
      properties:
        "content":
          type: "array"
          items: {"$ref": "#/components/schemas/NoteContentApiModel"}
          nullable: true
        "author_id":
          type: "string"
          description: "Unique identifier of the author"
          nullable: true
          example: "1234567890"
        "visibility":
          allOf:
            - {"$ref": "#/components/schemas/NotesVisibilityEnum"}
          description: "Visibility of the note"
          nullable: true
          example: "public"
        "passthrough":
          type: "object"
          additionalProperties: true
          description: "Value to pass through to the provider"
          nullable: true
          example: {"other_known_names": "John Doe"}
    Attachment:
      type: "object"
      properties:
        "url":
          type: "string"
          description: "The URL of the attachment."
          nullable: true
          example: "http://example.com/resume.pdf"
        "content_type":
          allOf:
            - {"$ref": "#/components/schemas/AttachmentContentType"}
          nullable: true
    AttachmentContentType:
      type: "object"
      properties:
        "value":
          type: "string"
          enum:
            - "text"
            - "unmapped_value"
            - null
          description: "The content type of the attachment."
          nullable: true
          example: "text"
          x-speakeasy-unknown-values: "allow"
        "source_value":
          oneOf:
            - type: "string"
            - type: "number"
            - type: "boolean"
            - type: "object"
            - type: "array"
              items: {}
          description: "The source value of the content type."
          nullable: true
          example: "Text"
    BackgroundCheckPackage:
      type: "object"
      properties:
        "id":
          type: "string"
          description: "Unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "remote_id":
          type: "string"
          description: "Provider's unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "name":
          type: "string"
          description: "Package name"
          nullable: true
          example: "Test 1"
        "description":
          type: "string"
          description: "Package description"
          nullable: true
          example: "Skills test to gauge a candidate's proficiency in job-specific skills"
        "tests":
          type: "array"
          items: {"$ref": "#/components/schemas/Package"}
          description: "Package tests"
          nullable: true
    BackgroundCheckPackagePaginated:
      type: "object"
      properties:
        "next_page":
          type: "string"
          nullable: true
          deprecated: true
        "next":
          type: "string"
          nullable: true
        "data":
          type: "array"
          items: {"$ref": "#/components/schemas/BackgroundCheckPackage"}
        "raw":
          type: "array"
          items: {"$ref": "#/components/schemas/RawResponse"}
          nullable: true
      required:
        - "data"
    BackgroundCheckPackageResult:
      type: "object"
      properties:
        "data": {"$ref": "#/components/schemas/BackgroundCheckPackage"}
        "raw":
          type: "array"
          items: {"$ref": "#/components/schemas/RawResponse"}
          nullable: true
      required:
        - "data"
    BackgroundCheckResult:
      type: "object"
      properties:
        "id":
          type: "string"
          description: "Unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "remote_id":
          type: "string"
          description: "Provider's unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "candidate":
          allOf:
            - {"$ref": "#/components/schemas/ResultCandidateApiModel"}
          nullable: true
        "score":
          allOf:
            - {"$ref": "#/components/schemas/ScoreApiModel"}
          nullable: true
        "start_date":
          type: "string"
          format: "date-time"
          description: "The start date of the candidate test"
          nullable: true
          example: "2021-01-01T01:01:01.000Z"
        "submission_date":
          type: "string"
          format: "date-time"
          description: "The submission date of the candidate test"
          nullable: true
          example: "2021-01-01T01:01:01.000Z"
        "summary":
          type: "string"
          description: "The summary about the result of the test"
          nullable: true
          example: "Test is passed"
        "result":
          allOf:
            - {"$ref": "#/components/schemas/ResultEnum"}
          nullable: true
        "result_url":
          type: "string"
          description: "The test`s result url"
          nullable: true
          example: "https://exmaple.com/result?id=xyz"
        "attachments":
          type: "array"
          items: {"$ref": "#/components/schemas/Attachment"}
          nullable: true
    BackgroundCheckResultsResult:
      type: "object"
      properties:
        "data": {"$ref": "#/components/schemas/BackgroundCheckResult"}
        "raw":
          type: "array"
          items: {"$ref": "#/components/schemas/RawResponse"}
          nullable: true
      required:
        - "data"
    Candidate:
      type: "object"
      properties:
        "id":
          type: "string"
          description: "Unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "remote_id":
          type: "string"
          description: "Provider's unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "unified_custom_fields":
          type: "object"
          additionalProperties: true
          description: "Custom Unified Fields configured in your StackOne project"
          nullable: true
          example: {"my_project_custom_field_1": "REF-1236", "my_project_custom_field_2": "some other value"}
        "name":
          type: "string"
          description: "Candidate name"
          nullable: true
          example: "Romain Sestier"
        "first_name":
          type: "string"
          description: "Candidate first name"
          nullable: true
          example: "Romain"
        "last_name":
          type: "string"
          description: "Candidate last name"
          nullable: true
          example: "Sestier"
        "email":
          type: "string"
          description: "Candidate email"
          nullable: true
          example: "sestier.romain123@gmail.com"
        "emails":
          type: "array"
          items: {"$ref": "#/components/schemas/CandidateEmail"}
          description: "List of candidate emails"
          nullable: true
        "social_links":
          type: "array"
          items: {"$ref": "#/components/schemas/SocialLink"}
          description: "List of candidate social links"
          nullable: true
        "phone":
          type: "string"
          description: "Candidate phone number"
          nullable: true
          example: "+16178294093"
          deprecated: true
        "phone_numbers":
          type: "array"
          items: {"$ref": "#/components/schemas/PhoneNumber"}
          description: "List of candidate phone numbers including the type of the number when available"
          nullable: true
        "company":
          type: "string"
          description: "Candidate company"
          nullable: true
          example: "Company Inc."
        "title":
          type: "string"
          description: "Candidate title"
          nullable: true
          example: "Software Engineer"
        "application_ids":
          type: "array"
          items:
            type: "string"
          description: "List of candidate application IDs"
          nullable: true
          example: ["123e4567-e89b-12d3-a456-426614174000", "523e1234-e89b-fdd2-a456-762545121101"]
        "remote_application_ids":
          type: "array"
          items:
            type: "string"
          description: "Provider's list of candidate application IDs"
          nullable: true
          example: ["123e4567-e89b-12d3-a456-426614174000", "523e1234-e89b-fdd2-a456-762545121101"]
        "hired_at":
          type: "string"
          format: "date-time"
          description: "Candidate hired date"
          nullable: true
          example: "2021-01-01T01:01:01.000Z"
        "country":
          type: "string"
          description: "Candidate country"
          nullable: true
          example: "United States"
        "custom_fields":
          type: "array"
          items: {"$ref": "#/components/schemas/CustomFields"}
          description: "The candidate custom fields"
          nullable: true
        "created_at":
          type: "string"
          format: "date-time"
          description: "Candidate created date"
          nullable: true
          example: "2021-01-01T01:01:01.000Z"
        "updated_at":
          type: "string"
          format: "date-time"
          description: "Candidate updated date"
          nullable: true
          example: "2021-01-01T01:01:01.000Z"
    CandidateEmail:
      type: "object"
      properties:
        "type":
          type: "string"
          description: "Type of the email"
          nullable: true
          example: "personal"
        "value":
          type: "string"
          description: "Email value"
          nullable: true
          example: "sestier.romain123@gmail.com"
    CandidateResult:
      type: "object"
      properties:
        "data": {"$ref": "#/components/schemas/Candidate"}
        "raw":
          type: "array"
          items: {"$ref": "#/components/schemas/RawResponse"}
          nullable: true
      required:
        - "data"
    CandidatesPaginated:
      type: "object"
      properties:
        "next_page":
          type: "string"
          nullable: true
          deprecated: true
        "next":
          type: "string"
          nullable: true
        "data":
          type: "array"
          items: {"$ref": "#/components/schemas/Candidate"}
        "raw":
          type: "array"
          items: {"$ref": "#/components/schemas/RawResponse"}
          nullable: true
      required:
        - "data"
    ChangesActor:
      type: "object"
      properties:
        "id":
          type: "string"
          description: "Unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "remote_id":
          type: "string"
          description: "Provider's unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
    CompensationTypeEnum:
      type: "object"
      properties:
        "value":
          type: "string"
          enum:
            - "salary"
            - "hourly"
            - "commission"
            - "bonus"
            - "equity"
            - "other"
            - "unmapped_value"
            - null
          description: "The type of the compensation."
          nullable: true
          example: "salary"
          x-speakeasy-unknown-values: "allow"
        "source_value":
          oneOf:
            - type: "string"
            - type: "number"
            - type: "boolean"
            - type: "object"
            - type: "array"
              items: {}
          description: "The source value of the compensation type."
          nullable: true
          example: "Salary"
    ConditionTypeEnum:
      type: "object"
      properties:
        "value":
          type: "string"
          enum:
            - "equals_to"
            - "contains"
            - "unmapped_value"
            - null
          description: "The type of the question's condition"
          nullable: true
          example: "equals_to"
          x-speakeasy-unknown-values: "allow"
        "source_value":
          oneOf:
            - type: "string"
            - type: "number"
            - type: "boolean"
            - type: "object"
            - type: "array"
              items: {}
          description: "The source value of the question's condition type"
          nullable: true
          example: "EqualsTo"
    CreateAnswer:
      type: "object"
      properties:
        "id":
          type: "string"
          description: "Unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "type":
          allOf:
            - {"$ref": "#/components/schemas/AnswerEnum"}
          description: "Type of the answer"
          nullable: true
        "values":
          type: "array"
          items:
            type: "string"
          description: "Values of the answer"
          nullable: true
          example: ["Yes", "No Travel", "It sounds pretty cool.", "Excel", "Power Point"]
    CreateAssessmentOrderResult:
      type: "object"
      properties:
        "id":
          type: "string"
          description: "Unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "remote_id":
          type: "string"
          description: "Provider's unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "test_url":
          type: "string"
          description: "Test url"
          nullable: true
          example: "https://exmaple.com/integrations/candidate/test"
    CreateBackgroundCheckOrderResult:
      type: "object"
      properties:
        "id":
          type: "string"
          description: "Unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "remote_id":
          type: "string"
          description: "Provider's unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "test_url":
          type: "string"
          description: "Test url"
          nullable: true
          example: "https://exmaple.com/integrations/candidate/test"
    CreateCandidate:
      type: "object"
      properties:
        "passthrough":
          type: "object"
          additionalProperties: true
          description: "Value to pass through to the provider"
          nullable: true
          example: {"other_known_names": "John Doe"}
        "unified_custom_fields":
          type: "object"
          additionalProperties: true
          description: "Custom Unified Fields configured in your StackOne project"
          nullable: true
          example: {"my_project_custom_field_1": "REF-1236", "my_project_custom_field_2": "some other value"}
        "phone_number":
          type: "string"
          description: "The candidate personal phone number"
          nullable: true
          example: "+1234567890"
          deprecated: true
        "phone_numbers":
          type: "array"
          items: {"$ref": "#/components/schemas/PhoneNumber"}
          description: "List of candidate phone numbers including the type of the number when available"
          nullable: true
        "name":
          type: "string"
          description: "Candidate name"
          nullable: true
          example: "Romain Sestier"
        "first_name":
          type: "string"
          description: "Candidate first name"
          nullable: true
          example: "Romain"
        "last_name":
          type: "string"
          description: "Candidate last name"
          nullable: true
          example: "Sestier"
        "email":
          type: "string"
          description: "Candidate email"
          nullable: true
          example: "sestier.romain123@gmail.com"
        "social_links":
          type: "array"
          items: {"$ref": "#/components/schemas/SocialLink"}
          description: "List of candidate social links"
          nullable: true
        "company":
          type: "string"
          description: "Candidate company"
          nullable: true
          example: "Company Inc."
        "title":
          type: "string"
          description: "Candidate title"
          nullable: true
          example: "Software Engineer"
        "hired_at":
          type: "string"
          format: "date-time"
          description: "Candidate hired date"
          nullable: true
          example: "2021-01-01T01:01:01.000Z"
        "country":
          type: "string"
          description: "Candidate country"
          nullable: true
          example: "United States"
        "custom_fields":
          type: "array"
          items: {"$ref": "#/components/schemas/CustomFields"}
          description: "The candidate custom fields"
          nullable: true
    CreatePackage:
      type: "object"
      properties:
        "name":
          type: "string"
          description: "Package name"
          nullable: true
          example: "Test 1"
        "description":
          type: "string"
          description: "Package description"
          nullable: true
          example: "Skills test to gauge a candidate's proficiency in job-specific skills"
    CreateQuestionnaire:
      type: "object"
      properties:
        "id":
          type: "string"
          description: "Unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "answers":
          type: "array"
          items: {"$ref": "#/components/schemas/CreateAnswer"}
          nullable: true
    CreateSource:
      type: "object"
      properties:
        "id":
          type: "string"
          description: "Unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "name":
          type: "string"
          description: "The source of the application"
          nullable: true
          example: "LinkedIn"
    Department:
      type: "object"
      properties:
        "id":
          type: "string"
          description: "Unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "remote_id":
          type: "string"
          description: "Provider's unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "unified_custom_fields":
          type: "object"
          additionalProperties: true
          description: "Custom Unified Fields configured in your StackOne project"
          nullable: true
          example: {"my_project_custom_field_1": "REF-1236", "my_project_custom_field_2": "some other value"}
        "name":
          type: "string"
          nullable: true
    DepartmentResult:
      type: "object"
      properties:
        "data": {"$ref": "#/components/schemas/Department"}
        "raw":
          type: "array"
          items: {"$ref": "#/components/schemas/RawResponse"}
          nullable: true
      required:
        - "data"
    DepartmentsPaginated:
      type: "object"
      properties:
        "next_page":
          type: "string"
          nullable: true
          deprecated: true
        "next":
          type: "string"
          nullable: true
        "data":
          type: "array"
          items: {"$ref": "#/components/schemas/Department"}
        "raw":
          type: "array"
          items: {"$ref": "#/components/schemas/RawResponse"}
          nullable: true
      required:
        - "data"
    EmploymentContractTypeEnum:
      type: "object"
      properties:
        "value":
          type: "string"
          enum:
            - "full_time"
            - "shifts"
            - "part_time"
            - "unmapped_value"
            - null
          description: "The employment contract type."
          nullable: true
          example: "full_time"
          x-speakeasy-unknown-values: "allow"
        "source_value":
          oneOf:
            - type: "string"
            - type: "number"
            - type: "boolean"
            - type: "object"
            - type: "array"
              items: {}
          description: "The source value of the employment contract type."
          nullable: true
          example: "FullTime"
    Field:
      type: "object"
      properties:
        "id":
          type: "string"
          description: "Unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "remote_id":
          type: "string"
          description: "Provider's unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "label":
          type: "string"
          description: "The label of the field"
          nullable: true
          example: "Problem Solving"
        "type":
          type: "string"
          enum:
            - "short_text"
            - "long_text"
            - "multi_select"
            - "single_select"
            - "boolean"
            - "number"
            - "date"
            - "phone"
            - "email"
            - "score"
            - "location"
            - "unmapped_value"
            - null
          description: "The type of the field"
          nullable: true
          example: "text"
          x-speakeasy-unknown-values: "allow"
        "values":
          type: "array"
          items:
            type: "string"
          description: "The possible values for the field"
          nullable: true
          example: ["Excellent", "Good", "Average", "Poor"]
        "required":
          oneOf:
            - type: "boolean"
            - type: "string"
              enum:
                - "true"
                - "false"
          description: "Indicates if the field is required"
          nullable: true
          example: true
    Interview:
      type: "object"
      properties:
        "id":
          type: "string"
          description: "Unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "remote_id":
          type: "string"
          description: "Provider's unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "unified_custom_fields":
          type: "object"
          additionalProperties: true
          description: "Custom Unified Fields configured in your StackOne project"
          nullable: true
          example: {"my_project_custom_field_1": "REF-1236", "my_project_custom_field_2": "some other value"}
        "application_id":
          type: "string"
          nullable: true
        "remote_application_id":
          type: "string"
          description: "Provider's unique identifier of the application"
          nullable: true
          example: "e3cb75bf-aa84-466e-a6c1-b8322b257a48"
        "interview_stage_id":
          type: "string"
          nullable: true
        "remote_interview_stage_id":
          type: "string"
          description: "Provider's unique identifier of the interview stage"
          nullable: true
          example: "e3cb75bf-aa84-466e-a6c1-b8322b257a48"
        "interview_stage":
          allOf:
            - {"$ref": "#/components/schemas/InterviewStage"}
          nullable: true
        "interview_status":
          allOf:
            - {"$ref": "#/components/schemas/InterviewStatusEnum"}
          nullable: true
        "interviewer_ids":
          type: "array"
          items:
            type: "string"
          nullable: true
        "remote_interviewer_ids":
          type: "array"
          items:
            type: "string"
          description: "Provider's unique identifiers of the interviewers"
          nullable: true
          example: ["e3cb75bf-aa84-466e-a6c1-b8322b257a48", "e3cb75bf-aa84-466e-a6c1-b8322b257a48"]
        "interview_parts":
          type: "array"
          items: {"$ref": "#/components/schemas/InterviewPart"}
          nullable: true
        "interviewers":
          type: "array"
          items: {"$ref": "#/components/schemas/Interviewer"}
          nullable: true
        "start_at":
          type: "string"
          format: "date-time"
          description: "Interview start date"
          nullable: true
          example: "2021-01-01T01:01:01.000Z"
        "end_at":
          type: "string"
          format: "date-time"
          description: "Interview end date"
          nullable: true
          example: "2021-01-01T01:01:01.000Z"
        "meeting_url":
          type: "string"
          nullable: true
        "created_at":
          type: "string"
          format: "date-time"
          description: "Interview created date"
          nullable: true
          example: "2021-01-01T01:01:01.000Z"
        "updated_at":
          type: "string"
          format: "date-time"
          description: "Interview updated date"
          nullable: true
          example: "2021-01-01T01:01:01.000Z"
    Interviewer:
      type: "object"
      properties:
        "id":
          type: "string"
          description: "Unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "remote_id":
          type: "string"
          description: "Provider's unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "first_name":
          type: "string"
          nullable: true
        "last_name":
          type: "string"
          nullable: true
        "name":
          type: "string"
          nullable: true
        "email":
          type: "string"
          nullable: true
    InterviewPart:
      type: "object"
      properties:
        "id":
          type: "string"
          description: "Unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "remote_id":
          type: "string"
          description: "Provider's unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "type":
          allOf:
            - {"$ref": "#/components/schemas/InterviewTypeEnum"}
          nullable: true
        "title":
          type: "string"
          description: "The title of interview, usually corresponding to the title of an associated calendar event"
          nullable: true
          example: "Interview (Informal Interview) - Elon and StackOne"
        "interviewer_ids":
          type: "array"
          items:
            type: "string"
          description: "The user (interviewer) IDs taking part in this specific interview."
          nullable: true
          example: ["cx28iQahdfDHa", "cx28iQokkD78das"]
        "remote_interviewer_ids":
          type: "array"
          items:
            type: "string"
          description: "Provider's user (interviewer) IDs taking part in this specific interview."
          nullable: true
          example: ["cx28iQahdfDHa", "cx28iQokkD78das"]
        "meeting_url":
          type: "string"
          description: "The meeting URL for the interview - this may be populated using the underlying location if the location string extracted is a valid url."
          nullable: true
          example: "zoomus://zoom.us/join?confno=123456789"
        "meeting_provider":
          type: "string"
          description: "The video meeting provider used for the interview."
          nullable: true
          example: "zoom"
        "start_at":
          type: "string"
          format: "date-time"
          description: "The specific interview part's start date"
          nullable: true
          example: "2021-01-01T17:00:00.000Z"
        "end_at":
          type: "string"
          format: "date-time"
          description: "The specific interview part's end date"
          nullable: true
          example: "2021-01-01T18:00:00.000Z"
        "created_at":
          type: "string"
          format: "date-time"
          description: "Interview part created date"
          nullable: true
          example: "2021-01-01T01:01:01.000Z"
        "updated_at":
          type: "string"
          format: "date-time"
          description: "Interview part updated date"
          nullable: true
          example: "2021-01-01T01:01:01.000Z"
    InterviewsPaginated:
      type: "object"
      properties:
        "next_page":
          type: "string"
          nullable: true
          deprecated: true
        "next":
          type: "string"
          nullable: true
        "data":
          type: "array"
          items: {"$ref": "#/components/schemas/Interview"}
        "raw":
          type: "array"
          items: {"$ref": "#/components/schemas/RawResponse"}
          nullable: true
      required:
        - "data"
    InterviewsResult:
      type: "object"
      properties:
        "data": {"$ref": "#/components/schemas/Interview"}
        "raw":
          type: "array"
          items: {"$ref": "#/components/schemas/RawResponse"}
          nullable: true
      required:
        - "data"
    InterviewStage:
      type: "object"
      properties:
        "id":
          type: "string"
          description: "Unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "remote_id":
          type: "string"
          description: "Provider's unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "unified_custom_fields":
          type: "object"
          additionalProperties: true
          description: "Custom Unified Fields configured in your StackOne project"
          nullable: true
          example: {"my_project_custom_field_1": "REF-1236", "my_project_custom_field_2": "some other value"}
        "name":
          type: "string"
          nullable: true
        "order":
          type: "number"
          nullable: true
        "created_at":
          type: "string"
          format: "date-time"
          description: "Interview Stage created date"
          nullable: true
          example: "2021-01-01T01:01:01.000Z"
        "updated_at":
          type: "string"
          format: "date-time"
          description: "Interview Stage updated date"
          nullable: true
          example: "2021-01-01T01:01:01.000Z"
    InterviewStageResult:
      type: "object"
      properties:
        "data": {"$ref": "#/components/schemas/InterviewStage"}
        "raw":
          type: "array"
          items: {"$ref": "#/components/schemas/RawResponse"}
          nullable: true
      required:
        - "data"
    InterviewStagesPaginated:
      type: "object"
      properties:
        "next_page":
          type: "string"
          nullable: true
          deprecated: true
        "next":
          type: "string"
          nullable: true
        "data":
          type: "array"
          items: {"$ref": "#/components/schemas/InterviewStage"}
        "raw":
          type: "array"
          items: {"$ref": "#/components/schemas/RawResponse"}
          nullable: true
      required:
        - "data"
    InterviewStatusEnum:
      type: "object"
      properties:
        "value":
          type: "string"
          enum:
            - "unscheduled"
            - "scheduled"
            - "completed"
            - "cancelled"
            - "pending_feedback"
            - "unmapped_value"
            - null
          description: "The status of the interview."
          nullable: true
          example: "unscheduled"
          x-speakeasy-unknown-values: "allow"
        "source_value":
          oneOf:
            - type: "string"
            - type: "number"
            - type: "boolean"
            - type: "object"
            - type: "array"
              items: {}
          description: "The source value of the interview status."
          nullable: true
          example: "Unscheduled"
    InterviewTypeEnum:
      type: "object"
      properties:
        "value":
          type: "string"
          enum:
            - "screening"
            - "lunch"
            - "on_site"
            - "presentation"
            - "sell"
            - "culture"
            - "informal"
            - "test"
            - "phone"
            - "video"
            - "unmapped_value"
            - null
          description: "The type of the interview."
          nullable: true
          example: "on_site"
          x-speakeasy-unknown-values: "allow"
        "source_value":
          oneOf:
            - type: "string"
            - type: "number"
            - type: "boolean"
            - type: "object"
            - type: "array"
              items: {}
          description: "The source value of the interview type."
          nullable: true
          example: "Onsite Interview"
    JobHiringTeam:
      type: "object"
      properties:
        "user_id":
          type: "string"
          description: "User ID of the hiring team member."
          nullable: true
          example: "123456"
        "remote_user_id":
          type: "string"
          description: "Provider's unique identifier of the user"
          nullable: true
          example: "e3cb75bf-aa84-466e-a6c1-b8322b257a48"
        "first_name":
          type: "string"
          description: "First name of the hiring team member."
          nullable: true
          example: "John"
        "last_name":
          type: "string"
          description: "Last name of the hiring team member."
          nullable: true
          example: "Doe"
        "email":
          type: "string"
          description: "Email of the hiring team member."
          nullable: true
          example: "john.doe@gmail.com"
        "role":
          type: "string"
          description: "Role of the hiring team member."
          nullable: true
          example: "Software Engineer"
    JobPosting:
      type: "object"
      properties:
        "id":
          type: "string"
          description: "Unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "remote_id":
          type: "string"
          description: "Provider's unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "unified_custom_fields":
          type: "object"
          additionalProperties: true
          description: "Custom Unified Fields configured in your StackOne project"
          nullable: true
          example: {"my_project_custom_field_1": "REF-1236", "my_project_custom_field_2": "some other value"}
        "title":
          type: "string"
          nullable: true
          example: "Software Engineer"
        "locations":
          type: "array"
          items: {"$ref": "#/components/schemas/JobPostingLocation"}
          nullable: true
          example: [{"id": "12345", "name": "New York"}, {"id": "67890", "name": "Remote"}]
        "internal":
          type: "string"
          enum:
            - "true"
            - "false"
            - "unmapped_value"
            - null
          nullable: true
          example: "true"
          x-speakeasy-unknown-values: "allow"
        "status":
          allOf:
            - {"$ref": "#/components/schemas/JobPostingStatusEnum"}
          nullable: true
        "job_id":
          type: "string"
          nullable: true
          example: "job001"
        "remote_job_posting_id":
          type: "string"
          description: "Provider's unique identifier of the job posting"
          nullable: true
          example: "e3cb75bf-aa84-466e-a6c1-b8322b257a48"
        "content":
          allOf:
            - {"$ref": "#/components/schemas/JobPostingContent"}
          nullable: true
          example: {"plain": "This is a plain text description", "html": "<p>This is an HTML description</p>"}
        "compensation":
          type: "array"
          items: {"$ref": "#/components/schemas/JobPostingCompensation"}
          nullable: true
          example: [{"name": "Base Salary", "type": "salary", "pay_period": "month", "pay_frequency": "yearly", "currency": "USD", "value": "50000", "min_value": "45000", "max_value": "55000"}, {"name": "Bonus", "type": "bonus", "pay_frequency": "quarterly", "currency": "USD", "value": "10%"}]
        "employment_type":
          allOf:
            - {"$ref": "#/components/schemas/EmploymentTypeEnum"}
          nullable: true
        "employment_contract_type":
          allOf:
            - {"$ref": "#/components/schemas/EmploymentContractTypeEnum"}
          nullable: true
        "external_url":
          type: "string"
          nullable: true
          example: "https://www.example.com/job-posting/abcd1234"
        "external_apply_url":
          type: "string"
          nullable: true
          example: "https://www.example.com/job-posting/abcd1234/apply"
        "questionnaires":
          type: "array"
          items: {"$ref": "#/components/schemas/JobPostingQuestionnaire"}
          nullable: true
          example: [{"id": "about001", "name": "About", "internal": "false", "questions": [{"id": "question001", "text": "What is your name?", "type": "short_text", "required": true, "parent_question": null}, {"id": "question002", "text": "What are your hobbies?", "type": "long_text", "required": false, "parent_question": null}, {"id": "question003", "text": "What is your favourite animal?", "type": "single_select", "required": true, "multiple_choice_answers": [{"id": "1", "text": "Dog"}, {"id": "2", "text": "Cat"}, {"id": "3", "text": "Bird"}, {"id": "4", "text": "Other"}], "parent_question": null}, {"id": "question004", "text": "Do you have previous work experience??", "type": "single_select", "required": true, "multiple_choice_answers": [{"id": "1", "text": "Yes"}, {"id": "2", "text": "No"}], "parent_question": null}, {"id": "question005", "text": "What was the duration of your last employment?", "type": "single_select", "required": true, "multiple_choice_answers": [{"id": "1", "text": "Less than 1 year"}, {"id": "2", "text": "1-2 years"}, {"id": "2", "text": "More than 2 year"}], "parent_question": {"id": "question004", "option_ids": ["1"], "condition_type": "equals_to"}}]}, {"id": "experience001", "name": "Experience", "internal": "false", "questions": [{"id": "question004", "text": "Please upload your resume.", "type": "attachment", "parent_question": null, "required": true}, {"id": "question005", "text": "Select the programming languages you are proficient in.", "type": "multi_select", "multiple_choice_answers": [{"id": "1", "text": "JavaScript"}, {"id": "2", "text": "Python"}, {"id": "3", "text": "Java"}], "parent_question": null, "required": true}, {"id": "question006", "text": "Are you willing to relocate?", "type": "boolean", "parent_question": null}, {"id": "question007", "text": "How many years of experience do you have?", "type": "number", "parent_question": null}, {"id": "question008", "text": "When did you start your most recent position?", "type": "date", "parent_question": null}, {"id": "question009", "text": "Do you have Project Management Experience?", "type": "single_select", "multiple_choice_answers": [{"id": "1", "text": "Yes"}, {"id": "2", "text": "No"}], "parent_question": null, "required": true}, {"id": "question010", "text": "How much Project Management experience do you have?", "type": "single_select", "multiple_choice_answers": [{"id": "1", "text": "1-3 years"}, {"id": "2", "text": "3-5 years"}, {"id": "3", "text": "5-10 years"}, {"id": "4", "text": "More than 10 years"}], "parent_question": {"id": "question009", "option_ids": ["1"], "condition_type": "equals_to"}}]}]
        "start_date":
          type: "string"
          format: "date-time"
          description: "The posting start date"
          nullable: true
          example: "2021-01-01T00:00:00.000Z"
        "created_at":
          type: "string"
          format: "date-time"
          description: "Date of creation"
          nullable: true
          example: "2021-01-01T01:01:01.000Z"
        "updated_at":
          type: "string"
          format: "date-time"
          description: "Date of last update"
          nullable: true
          example: "2021-01-01T01:01:01.000Z"
    JobPostingCompensation:
      type: "object"
      properties:
        "name":
          type: "string"
          nullable: true
        "type":
          allOf:
            - {"$ref": "#/components/schemas/CompensationTypeEnum"}
          nullable: true
        "pay_period":
          allOf:
            - {"$ref": "#/components/schemas/PayPeriodEnum"}
          nullable: true
        "pay_frequency":
          allOf:
            - {"$ref": "#/components/schemas/PayFrequencyEnum"}
          nullable: true
        "currency":
          type: "string"
          nullable: true
        "value":
          type: "string"
          nullable: true
        "min_value":
          type: "string"
          nullable: true
        "max_value":
          type: "string"
          nullable: true
    JobPostingContent:
      type: "object"
      properties:
        "plain":
          type: "string"
          nullable: true
        "html":
          type: "string"
          nullable: true
        "sections":
          type: "array"
          items: {"$ref": "#/components/schemas/JobPostingContentSection"}
          nullable: true
    JobPostingContentSection:
      type: "object"
      properties:
        "id":
          type: "string"
          description: "Unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "remote_id":
          type: "string"
          description: "Provider's unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "type":
          allOf:
            - {"$ref": "#/components/schemas/AssessmentTypeEnum"}
          nullable: true
        "label":
          type: "string"
          nullable: true
          example: "Key Responsibilities"
        "content":
          type: "string"
          nullable: true
          example: "This is a plain description"
    JobPostingLocation:
      type: "object"
      properties:
        "id":
          type: "string"
          description: "Unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "remote_id":
          type: "string"
          description: "Provider's unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "name":
          type: "string"
          nullable: true
    JobPostingQuestionnaire:
      type: "object"
      properties:
        "id":
          type: "string"
          description: "Unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "remote_id":
          type: "string"
          description: "Provider's unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "name":
          type: "string"
          nullable: true
        "internal":
          oneOf:
            - type: "boolean"
            - type: "string"
              enum:
                - "true"
                - "false"
          nullable: true
        "questions":
          type: "array"
          items: {"$ref": "#/components/schemas/Question"}
          nullable: true
    JobPostingResult:
      type: "object"
      properties:
        "data": {"$ref": "#/components/schemas/JobPosting"}
        "raw":
          type: "array"
          items: {"$ref": "#/components/schemas/RawResponse"}
          nullable: true
      required:
        - "data"
    JobPostingsPaginated:
      type: "object"
      properties:
        "next_page":
          type: "string"
          nullable: true
          deprecated: true
        "next":
          type: "string"
          nullable: true
        "data":
          type: "array"
          items: {"$ref": "#/components/schemas/JobPosting"}
        "raw":
          type: "array"
          items: {"$ref": "#/components/schemas/RawResponse"}
          nullable: true
      required:
        - "data"
    JobPostingStatusEnum:
      type: "object"
      properties:
        "value":
          type: "string"
          enum:
            - "live"
            - "draft"
            - "pending"
            - "internal"
            - "rejected"
            - "closed"
            - "archived"
            - "unmapped_value"
            - null
          description: "The status of the job postings."
          nullable: true
          example: "live"
          x-speakeasy-unknown-values: "allow"
        "source_value":
          oneOf:
            - type: "string"
            - type: "number"
            - type: "boolean"
            - type: "object"
            - type: "array"
              items: {}
          description: "The source value of the job postings status."
          nullable: true
          example: "Live"
    List:
      type: "object"
      properties:
        "id":
          type: "string"
          description: "Unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "remote_id":
          type: "string"
          description: "Provider's unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "unified_custom_fields":
          type: "object"
          additionalProperties: true
          description: "Custom Unified Fields configured in your StackOne project"
          nullable: true
          example: {"my_project_custom_field_1": "REF-1236", "my_project_custom_field_2": "some other value"}
        "name":
          type: "string"
          nullable: true
        "items":
          type: "array"
          items: {"$ref": "#/components/schemas/ListItem"}
          nullable: true
        "created_at":
          type: "string"
          format: "date-time"
          description: "Timestamp when the list was created"
          nullable: true
          example: "2021-01-01T01:01:01.000Z"
        "updated_at":
          type: "string"
          format: "date-time"
          description: "Timestamp when the list was last updated"
          nullable: true
          example: "2021-01-01T01:01:01.000Z"
        "type":
          allOf:
            - {"$ref": "#/components/schemas/ListTypeEnum"}
          description: "The list type"
          nullable: true
    ListItem:
      type: "object"
      properties:
        "id":
          type: "string"
          description: "Unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "remote_id":
          type: "string"
          description: "Provider's unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
    ListResult:
      type: "object"
      properties:
        "data": {"$ref": "#/components/schemas/List"}
        "raw":
          type: "array"
          items: {"$ref": "#/components/schemas/RawResponse"}
          nullable: true
      required:
        - "data"
    ListsPaginated:
      type: "object"
      properties:
        "next_page":
          type: "string"
          nullable: true
          deprecated: true
        "next":
          type: "string"
          nullable: true
        "data":
          type: "array"
          items: {"$ref": "#/components/schemas/List"}
        "raw":
          type: "array"
          items: {"$ref": "#/components/schemas/RawResponse"}
          nullable: true
      required:
        - "data"
    ListTypeEnum:
      type: "object"
      properties:
        "value":
          type: "string"
          enum:
            - "candidates"
            - "contacts"
            - "companies"
            - "unmapped_value"
            - null
          description: "The type of the list."
          nullable: true
          example: "contacts"
          x-speakeasy-unknown-values: "allow"
        "source_value":
          oneOf:
            - type: "string"
            - type: "number"
            - type: "boolean"
            - type: "object"
            - type: "array"
              items: {}
          description: "The source value of the list type."
          nullable: true
          example: "Contacts"
    MoveApplicationResult:
      type: "object"
      properties:
        "statusCode":
          type: "number"
          example: 200
        "message":
          type: "string"
          example: "Application moved successfully."
        "timestamp":
          type: "string"
          format: "date-time"
          example: "2021-01-01T01:01:01.000Z"
        "data": {"$ref": "#/components/schemas/CreateResultDataApiModel"}
      required:
        - "statusCode"
        - "message"
        - "timestamp"
        - "data"
    Note:
      type: "object"
      properties:
        "id":
          type: "string"
          description: "Unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "remote_id":
          type: "string"
          description: "Provider's unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "unified_custom_fields":
          type: "object"
          additionalProperties: true
          description: "Custom Unified Fields configured in your StackOne project"
          nullable: true
          example: {"my_project_custom_field_1": "REF-1236", "my_project_custom_field_2": "some other value"}
        "content":
          type: "array"
          items: {"$ref": "#/components/schemas/NoteContentApiModel"}
          nullable: true
        "author_id":
          type: "string"
          description: "Unique identifier of the author"
          nullable: true
          example: "1234567890"
        "remote_author_id":
          type: "string"
          description: "Provider's unique identifier of the author"
          nullable: true
          example: "e3cb75bf-aa84-466e-a6c1-b8322b257a48"
        "visibility":
          allOf:
            - {"$ref": "#/components/schemas/NotesVisibilityEnum"}
          description: "Visibility of the note"
          nullable: true
          example: "public"
        "created_at":
          type: "string"
          format: "date-time"
          description: "Date of creation"
          nullable: true
          example: "2021-01-01T01:01:01.000Z"
        "updated_at":
          type: "string"
          format: "date-time"
          description: "Date of last update"
          nullable: true
          example: "2021-01-01T01:01:01.000Z"
        "deleted_at":
          type: "string"
          format: "date-time"
          description: "Date of Deletion"
          nullable: true
          example: "2021-01-01T01:01:01.000Z"
    NoteContentApiModel:
      type: "object"
      properties:
        "body":
          type: "string"
          description: "Body of the note"
          nullable: true
          example: "This candidate seems like a good fit for the role"
    NoteResult:
      type: "object"
      properties:
        "data": {"$ref": "#/components/schemas/Note"}
        "raw":
          type: "array"
          items: {"$ref": "#/components/schemas/RawResponse"}
          nullable: true
      required:
        - "data"
    NotesPaginated:
      type: "object"
      properties:
        "next_page":
          type: "string"
          nullable: true
          deprecated: true
        "next":
          type: "string"
          nullable: true
        "data":
          type: "array"
          items: {"$ref": "#/components/schemas/Note"}
        "raw":
          type: "array"
          items: {"$ref": "#/components/schemas/RawResponse"}
          nullable: true
      required:
        - "data"
    NotesVisibilityEnum:
      type: "object"
      properties:
        "value":
          type: "string"
          enum:
            - "private"
            - "public"
            - "unmapped_value"
            - null
          description: "The visibility of the notes."
          nullable: true
          example: "public"
          x-speakeasy-unknown-values: "allow"
        "source_value":
          oneOf:
            - type: "string"
            - type: "number"
            - type: "boolean"
            - type: "object"
            - type: "array"
              items: {}
          description: "The source value of the notes visibility."
          nullable: true
          example: "Public"
    Offer:
      type: "object"
      properties:
        "id":
          type: "string"
          description: "Unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "remote_id":
          type: "string"
          description: "Provider's unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "unified_custom_fields":
          type: "object"
          additionalProperties: true
          description: "Custom Unified Fields configured in your StackOne project"
          nullable: true
          example: {"my_project_custom_field_1": "REF-1236", "my_project_custom_field_2": "some other value"}
        "application_id":
          type: "string"
          nullable: true
        "remote_application_id":
          type: "string"
          description: "Provider's unique identifier of the application"
          nullable: true
          example: "e3cb75bf-aa84-466e-a6c1-b8322b257a48"
        "start_date":
          type: "string"
          format: "date-time"
          description: "Date of creation"
          nullable: true
          example: "2021-01-01T01:01:01.000Z"
        "offer_status":
          allOf:
            - {"$ref": "#/components/schemas/OfferStatusEnum"}
          nullable: true
        "salary":
          type: "number"
          nullable: true
        "currency":
          type: "string"
          nullable: true
        "created_at":
          type: "string"
          format: "date-time"
          description: "Date of creation"
          nullable: true
          example: "2021-01-01T01:01:01.000Z"
        "updated_at":
          type: "string"
          format: "date-time"
          description: "Date of last update"
          nullable: true
          example: "2021-01-01T01:01:01.000Z"
        "offer_history":
          type: "array"
          items: {"$ref": "#/components/schemas/OfferHistory"}
          nullable: true
    OfferHistory:
      type: "object"
      properties:
        "start_date":
          type: "string"
          format: "date-time"
          description: "Start Date of the offer"
          nullable: true
          example: "2021-01-01T01:01:01.000Z"
        "salary":
          type: "number"
          nullable: true
        "currency":
          type: "string"
          nullable: true
        "created_at":
          type: "string"
          format: "date-time"
          description: "Date of creation"
          nullable: true
          example: "2021-01-01T01:01:01.000Z"
        "updated_at":
          type: "string"
          format: "date-time"
          description: "Date of last update"
          nullable: true
          example: "2021-01-01T01:01:01.000Z"
    OffersPaginated:
      type: "object"
      properties:
        "next_page":
          type: "string"
          nullable: true
          deprecated: true
        "next":
          type: "string"
          nullable: true
        "data":
          type: "array"
          items: {"$ref": "#/components/schemas/Offer"}
        "raw":
          type: "array"
          items: {"$ref": "#/components/schemas/RawResponse"}
          nullable: true
      required:
        - "data"
    OffersResult:
      type: "object"
      properties:
        "data": {"$ref": "#/components/schemas/Offer"}
        "raw":
          type: "array"
          items: {"$ref": "#/components/schemas/RawResponse"}
          nullable: true
      required:
        - "data"
    OfferStatusEnum:
      type: "object"
      properties:
        "value":
          type: "string"
          enum:
            - "pending"
            - "retracted"
            - "accepted"
            - "rejected"
            - "created"
            - "approved"
            - "not_approved"
            - "unmapped_value"
            - null
          description: "The status of the offer."
          nullable: true
          example: "pending"
          x-speakeasy-unknown-values: "allow"
        "source_value":
          oneOf:
            - type: "string"
            - type: "number"
            - type: "boolean"
            - type: "object"
            - type: "array"
              items: {}
          description: "The source value of the offer status."
          nullable: true
          example: "Pending"
    OrderApplicationApiModel:
      type: "object"
      properties:
        "id":
          type: "string"
          description: "Unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "remote_id":
          type: "string"
          description: "Provider's unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "application_status":
          allOf:
            - {"$ref": "#/components/schemas/ApplicationStatusEnum"}
          nullable: true
        "passthrough":
          type: "object"
          additionalProperties: true
          description: "Value to pass through to the provider"
          nullable: true
          example: {"other_known_names": "John Doe"}
    OrderBackgroundCheckPackageApiModel:
      type: "object"
      properties:
        "id":
          type: "string"
          description: "Unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "remote_id":
          type: "string"
          description: "Provider's unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "name":
          type: "string"
          description: "Package name"
          nullable: true
          example: "Test 1"
        "description":
          type: "string"
          description: "Package description"
          nullable: true
          example: "Skills test to gauge a candidate's proficiency in job-specific skills"
        "tests":
          type: "array"
          items: {"$ref": "#/components/schemas/Package"}
          description: "Package tests"
          nullable: true
    OrderCandidateApiModel:
      type: "object"
      properties:
        "id":
          type: "string"
          description: "Unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "remote_id":
          type: "string"
          description: "Provider's unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "first_name":
          type: "string"
          description: "Candidate first name"
          nullable: true
          example: "Romain"
        "last_name":
          type: "string"
          description: "Candidate last name"
          nullable: true
          example: "Sestier"
        "emails":
          type: "array"
          items: {"$ref": "#/components/schemas/CandidateEmail"}
          description: "List of candidate emails"
          nullable: true
        "passthrough":
          type: "object"
          additionalProperties: true
          description: "Value to pass through to the provider"
          nullable: true
          example: {"other_known_names": "John Doe"}
        "profile_url":
          type: "string"
          description: "Candidate profile url"
          nullable: true
          example: "https://exmaple.com/candidate?id=xyz"
    OrderJobApiModel:
      type: "object"
      properties:
        "id":
          type: "string"
          description: "Unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "remote_id":
          type: "string"
          description: "Provider's unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "title":
          type: "string"
          description: "Title of the job"
          nullable: true
          example: "Software Engineer"
        "hiring_team":
          type: "array"
          items: {"$ref": "#/components/schemas/JobHiringTeam"}
          description: "Hiring team for the job."
          nullable: true
        "passthrough":
          type: "object"
          additionalProperties: true
          description: "Value to pass through to the provider"
          nullable: true
          example: {"other_known_names": "John Doe"}
    OrderJobHiringTeamApiModel:
      type: "object"
      properties:
        "user_id":
          type: "string"
          description: "User ID of the hiring team member."
          nullable: true
          example: "123456"
        "remote_user_id":
          type: "string"
          description: "Provider's unique identifier of the user"
          nullable: true
          example: "e3cb75bf-aa84-466e-a6c1-b8322b257a48"
        "first_name":
          type: "string"
          description: "First name of the hiring team member."
          nullable: true
          example: "John"
        "last_name":
          type: "string"
          description: "Last name of the hiring team member."
          nullable: true
          example: "Doe"
        "email":
          type: "string"
          description: "Email of the hiring team member."
          nullable: true
          example: "john.doe@gmail.com"
        "role":
          type: "string"
          description: "Role of the hiring team member."
          nullable: true
          example: "Software Engineer"
    OrderPackageApiModel:
      type: "object"
      properties:
        "id":
          type: "string"
          description: "Unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "remote_id":
          type: "string"
          description: "Provider's unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "name":
          type: "string"
          description: "Package name"
          nullable: true
          example: "Test 1"
        "description":
          type: "string"
          description: "Package description"
          nullable: true
          example: "Skills test to gauge a candidate's proficiency in job-specific skills"
    Package:
      type: "object"
      properties:
        "id":
          type: "string"
          description: "Unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "remote_id":
          type: "string"
          description: "Provider's unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "name":
          type: "string"
          description: "Package name"
          nullable: true
          example: "Test 1"
        "description":
          type: "string"
          description: "Package description"
          nullable: true
          example: "Skills test to gauge a candidate's proficiency in job-specific skills"
    ParentQuestion:
      type: "object"
      properties:
        "id":
          type: "string"
          description: "Unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "remote_id":
          type: "string"
          description: "Provider's unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "option_ids":
          type: "array"
          items:
            type: "string"
          description: "List of parent questions's option IDs"
          nullable: true
          example: ["123e4567-e89b-12d3-a456-426614174000", "523e1234-e89b-fdd2-a456-762545121101"]
        "remote_option_ids":
          type: "array"
          items:
            type: "string"
          description: "Provider's list of parent questions's option IDs"
          nullable: true
          example: ["123e4567-e89b-12d3-a456-426614174000", "523e1234-e89b-fdd2-a456-762545121101"]
        "condition_type":
          allOf:
            - {"$ref": "#/components/schemas/ConditionTypeEnum"}
          nullable: true
    PhoneNumber:
      type: "object"
      properties:
        "type":
          type: "string"
          enum:
            - "personal"
            - "work"
            - "mobile"
            - "home"
            - "unknown"
            - "other"
            - "unmapped_value"
            - null
          description: "Type of phone number"
          nullable: true
          x-speakeasy-unknown-values: "allow"
        "phone":
          type: "string"
          description: "Phone number string"
          nullable: true
          example: "+447700112233"
    Question:
      type: "object"
      properties:
        "id":
          type: "string"
          description: "Unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "remote_id":
          type: "string"
          description: "Provider's unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "name":
          type: "string"
          nullable: true
        "type":
          allOf:
            - {"$ref": "#/components/schemas/QuestionsTypeEnum"}
          nullable: true
        "text":
          type: "string"
          nullable: true
        "required":
          oneOf:
            - type: "boolean"
            - type: "string"
              enum:
                - "true"
                - "false"
          nullable: true
        "multiple_choice_answers":
          type: "array"
          items: {"$ref": "#/components/schemas/QuestionMultipleChoiceAnswers"}
          nullable: true
        "parent_question":
          allOf:
            - {"$ref": "#/components/schemas/ParentQuestion"}
          nullable: true
    QuestionMultipleChoiceAnswers:
      type: "object"
      properties:
        "id":
          type: "string"
          description: "Unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "remote_id":
          type: "string"
          description: "Provider's unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "text":
          type: "string"
          nullable: true
    Questionnaire:
      type: "object"
      properties:
        "id":
          type: "string"
          description: "Unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "remote_id":
          type: "string"
          description: "Provider's unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "answers":
          type: "array"
          items: {"$ref": "#/components/schemas/Answer"}
          nullable: true
    QuestionsTypeEnum:
      type: "object"
      properties:
        "value":
          type: "string"
          enum:
            - "short_text"
            - "long_text"
            - "attachment"
            - "multi_select"
            - "single_select"
            - "boolean"
            - "number"
            - "date"
            - "video"
            - "reference_check"
            - "url"
            - "unmapped_value"
            - null
          description: "The type of the questions."
          nullable: true
          example: "short_text"
          x-speakeasy-unknown-values: "allow"
        "source_value":
          oneOf:
            - type: "string"
            - type: "number"
            - type: "boolean"
            - type: "object"
            - type: "array"
              items: {}
          description: "The source value of the questions type."
          nullable: true
          example: "ShortText"
    RejectApplicationResult:
      type: "object"
      properties:
        "statusCode":
          type: "number"
          example: 200
        "message":
          type: "string"
          example: "Application rejected successfully."
        "timestamp":
          type: "string"
          format: "date-time"
          example: "2021-01-01T01:01:01.000Z"
        "data": {"$ref": "#/components/schemas/CreateResultDataApiModel"}
      required:
        - "statusCode"
        - "message"
        - "timestamp"
        - "data"
    RejectedReason:
      type: "object"
      properties:
        "id":
          type: "string"
          description: "Unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "remote_id":
          type: "string"
          description: "Provider's unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "unified_custom_fields":
          type: "object"
          additionalProperties: true
          description: "Custom Unified Fields configured in your StackOne project"
          nullable: true
          example: {"my_project_custom_field_1": "REF-1236", "my_project_custom_field_2": "some other value"}
        "label":
          type: "string"
          description: "The label of the rejected reason."
          nullable: true
          example: "Failed Phone Screen"
        "type":
          type: "string"
          description: "The string type of the rejected reason."
          nullable: true
          example: "rejected_by_organization"
          deprecated: true
        "rejected_reason_type":
          allOf:
            - {"$ref": "#/components/schemas/RejectedReasonTypeEnum"}
          nullable: true
    RejectedReasonResult:
      type: "object"
      properties:
        "data": {"$ref": "#/components/schemas/RejectedReason"}
        "raw":
          type: "array"
          items: {"$ref": "#/components/schemas/RawResponse"}
          nullable: true
      required:
        - "data"
    RejectedReasonsPaginated:
      type: "object"
      properties:
        "next_page":
          type: "string"
          nullable: true
          deprecated: true
        "next":
          type: "string"
          nullable: true
        "data":
          type: "array"
          items: {"$ref": "#/components/schemas/RejectedReason"}
        "raw":
          type: "array"
          items: {"$ref": "#/components/schemas/RawResponse"}
          nullable: true
      required:
        - "data"
    RejectedReasonTypeEnum:
      type: "object"
      properties:
        "value":
          type: "string"
          enum:
            - "rejected_by_candidate"
            - "rejected_by_organization"
            - "other"
            - "unknown"
            - "unmapped_value"
            - null
          description: "The type of the rejected reason."
          nullable: true
          example: "rejected_by_organization"
          x-speakeasy-unknown-values: "allow"
        "source_value":
          oneOf:
            - type: "string"
            - type: "number"
            - type: "boolean"
            - type: "object"
            - type: "array"
              items: {}
          description: "The source value of the rejected reason type."
          nullable: true
          example: "RejectedByOrg"
    ResultCandidateApiModel:
      type: "object"
      properties:
        "id":
          type: "string"
          description: "Unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "remote_id":
          type: "string"
          description: "Provider's unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "profile_url":
          type: "string"
          description: "Candidate profile url"
          nullable: true
          example: "https://exmaple.com/candidate?id=xyz"
    ResultEnum:
      type: "object"
      properties:
        "value":
          type: "string"
          enum:
            - "cancelled"
            - "completed"
            - "expired"
            - "failed"
            - "passed"
            - "unmapped_value"
            - null
          description: "The result of the test."
          nullable: true
          example: "passed"
          x-speakeasy-unknown-values: "allow"
        "source_value":
          oneOf:
            - type: "string"
            - type: "number"
            - type: "boolean"
            - type: "object"
            - type: "array"
              items: {}
          description: "The source value of the test result."
          nullable: true
          example: "Passed"
    ResultLink:
      type: "object"
      properties:
        "label":
          type: "string"
          description: "The label of the result link."
          nullable: true
          example: "test result link"
        "url":
          type: "string"
          description: "The URL of the result link."
          nullable: true
          example: "http://example.com/test-result/4565765/data"
    ScheduledInterview:
      type: "object"
      properties:
        "id":
          type: "string"
          description: "Unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "remote_id":
          type: "string"
          description: "Provider's unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "application_id":
          type: "string"
          nullable: true
        "remote_application_id":
          type: "string"
          description: "Provider's unique identifier of the application"
          nullable: true
          example: "e3cb75bf-aa84-466e-a6c1-b8322b257a48"
        "interview_stage_id":
          type: "string"
          nullable: true
        "remote_interview_stage_id":
          type: "string"
          description: "Provider's unique identifier of the interview stage"
          nullable: true
          example: "e3cb75bf-aa84-466e-a6c1-b8322b257a48"
        "interview_stage":
          allOf:
            - {"$ref": "#/components/schemas/InterviewStage"}
          nullable: true
        "interview_status":
          allOf:
            - {"$ref": "#/components/schemas/InterviewStatusEnum"}
          nullable: true
        "interviewer_ids":
          type: "array"
          items:
            type: "string"
          nullable: true
        "remote_interviewer_ids":
          type: "array"
          items:
            type: "string"
          description: "Provider's unique identifiers of the interviewers"
          nullable: true
          example: ["e3cb75bf-aa84-466e-a6c1-b8322b257a48", "e3cb75bf-aa84-466e-a6c1-b8322b257a48"]
        "interview_parts":
          type: "array"
          items: {"$ref": "#/components/schemas/InterviewPart"}
          nullable: true
        "interviewers":
          type: "array"
          items: {"$ref": "#/components/schemas/Interviewer"}
          nullable: true
        "start_at":
          type: "string"
          format: "date-time"
          description: "Interview start date"
          nullable: true
          example: "2021-01-01T01:01:01.000Z"
        "end_at":
          type: "string"
          format: "date-time"
          description: "Interview end date"
          nullable: true
          example: "2021-01-01T01:01:01.000Z"
        "meeting_url":
          type: "string"
          nullable: true
        "created_at":
          type: "string"
          format: "date-time"
          description: "Interview created date"
          nullable: true
          example: "2021-01-01T01:01:01.000Z"
        "updated_at":
          type: "string"
          format: "date-time"
          description: "Interview updated date"
          nullable: true
          example: "2021-01-01T01:01:01.000Z"
    ScheduledInterviewsPaginated:
      type: "object"
      properties:
        "next_page":
          type: "string"
          nullable: true
          deprecated: true
        "next":
          type: "string"
          nullable: true
        "data":
          type: "array"
          items: {"$ref": "#/components/schemas/ScheduledInterview"}
        "raw":
          type: "array"
          items: {"$ref": "#/components/schemas/RawResponse"}
          nullable: true
      required:
        - "data"
    ScheduledInterviewsResult:
      type: "object"
      properties:
        "data": {"$ref": "#/components/schemas/ScheduledInterview"}
        "raw":
          type: "array"
          items: {"$ref": "#/components/schemas/RawResponse"}
          nullable: true
      required:
        - "data"
    ScoreApiModel:
      type: "object"
      properties:
        "label":
          type: "string"
          description: "The label of the score"
          nullable: true
          example: "Percentage"
        "value":
          type: "string"
          description: "The value is the actual score"
          nullable: true
          example: "80"
        "min":
          type: "string"
          description: "The minimum value of the score"
          nullable: true
          example: "0"
        "max":
          type: "string"
          description: "The maximum value of the score"
          nullable: true
          example: "100"
    Scorecard:
      type: "object"
      properties:
        "id":
          type: "string"
          description: "Unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "remote_id":
          type: "string"
          description: "Provider's unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "sections":
          type: "array"
          items: {"$ref": "#/components/schemas/ScorecardSection"}
          description: "The sections in the scorecard"
          nullable: true
        "label":
          type: "string"
          description: "The label of the scorecard"
          nullable: true
          example: "Technical Interview"
        "candidate_id":
          type: "string"
          description: "The candidate ID associated with the scorecard"
          nullable: true
          example: "5678-9"
        "remote_candidate_id":
          type: "string"
          description: "Provider's unique identifier of the candidate"
          nullable: true
          example: "e3cb75bf-aa84-466e-a6c1-b8322b257a48"
        "application_id":
          type: "string"
          description: "The application ID associated with the scorecard"
          nullable: true
          example: "1011-12"
        "remote_application_id":
          type: "string"
          description: "Provider's unique identifier of the application"
          nullable: true
          example: "e3cb75bf-aa84-466e-a6c1-b8322b257a48"
        "interview_id":
          type: "string"
          description: "The interview ID associated with the scorecard"
          nullable: true
          example: "1314-15"
        "remote_interview_id":
          type: "string"
          description: "Provider's unique identifier of the interview"
          nullable: true
          example: "e3cb75bf-aa84-466e-a6c1-b8322b257a48"
        "author_id":
          type: "string"
          description: "The author ID of the scorecard"
          nullable: true
          example: "1617-18"
        "remote_author_id":
          type: "string"
          description: "Provider's unique identifier of the author"
          nullable: true
          example: "e3cb75bf-aa84-466e-a6c1-b8322b257a48"
        "overall_recommendation":
          type: "string"
          enum:
            - "strong_yes"
            - "yes"
            - "no"
            - "strong_no"
            - "no_decision"
            - "unmapped_value"
            - null
          description: "The overall recommendation"
          nullable: true
          example: "recommended"
          x-speakeasy-unknown-values: "allow"
        "created_at":
          type: "string"
          format: "date-time"
          description: "The creation date of the scorecard"
          nullable: true
          example: "2021-01-01T00:00:00.000Z"
        "updated_at":
          type: "string"
          format: "date-time"
          description: "The update date of the scorecard"
          nullable: true
          example: "2021-01-01T00:00:00.000Z"
    ScorecardSection:
      type: "object"
      properties:
        "id":
          type: "string"
          description: "Unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "remote_id":
          type: "string"
          description: "Provider's unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "label":
          type: "string"
          description: "The label of the section"
          nullable: true
          example: "Technical Skills"
        "fields":
          type: "array"
          items: {"$ref": "#/components/schemas/Field"}
          description: "The fields within the section"
          nullable: true
    ScorecardsPaginated:
      type: "object"
      properties:
        "next_page":
          type: "string"
          nullable: true
          deprecated: true
        "next":
          type: "string"
          nullable: true
        "data":
          type: "array"
          items: {"$ref": "#/components/schemas/Scorecard"}
        "raw":
          type: "array"
          items: {"$ref": "#/components/schemas/RawResponse"}
          nullable: true
      required:
        - "data"
    ScorecardsResult:
      type: "object"
      properties:
        "data": {"$ref": "#/components/schemas/Scorecard"}
        "raw":
          type: "array"
          items: {"$ref": "#/components/schemas/RawResponse"}
          nullable: true
      required:
        - "data"
    SocialLink:
      type: "object"
      properties:
        "type":
          type: "string"
          description: "Type of the social link"
          nullable: true
          example: "linkedin"
        "url":
          type: "string"
          description: "URL of the social link"
          nullable: true
          example: "https://www.linkedin.com/in/romainsestier/"
    Source:
      type: "object"
      properties:
        "id":
          type: "string"
          description: "Unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "remote_id":
          type: "string"
          description: "Provider's unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "name":
          type: "string"
          description: "The source of the application"
          nullable: true
          example: "LinkedIn"
    UnifiedUploadCategoryEnumApiModel:
      type: "object"
      properties:
        "value":
          type: "string"
          description: "The category name for associating uploaded files."
          nullable: true
          example: "reports, resumes"
        "source_value":
          type: "string"
          description: "The provider specific category for associating uploaded files, if provided, the value will be ignored."
          nullable: true
          example: "550e8400-e29b-41d4-a716-446655440000, CUSTOM_CATEGORY_NAME"
    UnifiedUploadRequestDto:
      type: "object"
      properties:
        "name":
          type: "string"
          description: "The filename of the file to upload"
          nullable: true
          example: "weather-forecast"
        "file_format":
          allOf:
            - {"$ref": "#/components/schemas/FileFormatEnum"}
          description: "The file format of the file"
          nullable: true
        "content":
          type: "string"
          description: "The base64 encoded content of the file to upload"
          nullable: true
          example: "VGhpcyBpc24ndCByZWFsbHkgYSBzYW1wbGUgZmlsZSwgYnV0IG5vIG9uZSB3aWxsIGV2ZXIga25vdyE"
        "category_id":
          type: "string"
          description: "The categoryId of the documents"
          nullable: true
          example: "6530"
        "path":
          type: "string"
          description: "The path for the file to be uploaded to"
          nullable: true
          example: "/path/to/file"
        "category":
          allOf:
            - {"$ref": "#/components/schemas/UnifiedUploadCategoryEnumApiModel"}
          description: "The category object for associating uploaded files. If both an ID and a name are provided, the ID takes precedence."
          nullable: true
        "confidential":
          allOf:
            - {"$ref": "#/components/schemas/ConfidentialEnumApiModel"}
          description: "The confidentiality level of the file to be uploaded"
          nullable: true
    UpdatePackage:
      type: "object"
      properties:
        "id":
          type: "string"
          description: "Unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "name":
          type: "string"
          description: "Package name"
          nullable: true
          example: "Test 1"
        "description":
          type: "string"
          description: "Package description"
          nullable: true
          example: "Skills test to gauge a candidate's proficiency in job-specific skills"
    UpdateResultCandidateApiModel:
      type: "object"
      properties:
        "id":
          type: "string"
          description: "Unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "profile_url":
          type: "string"
          description: "Candidate profile url"
          nullable: true
          example: "https://exmaple.com/candidate?id=xyz"
    User:
      type: "object"
      properties:
        "id":
          type: "string"
          description: "Unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "remote_id":
          type: "string"
          description: "Provider's unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "unified_custom_fields":
          type: "object"
          additionalProperties: true
          description: "Custom Unified Fields configured in your StackOne project"
          nullable: true
          example: {"my_project_custom_field_1": "REF-1236", "my_project_custom_field_2": "some other value"}
        "email":
          type: "string"
          nullable: true
        "first_name":
          type: "string"
          nullable: true
        "last_name":
          type: "string"
          nullable: true
        "name":
          type: "string"
          nullable: true
        "phone":
          type: "string"
          nullable: true
    UserResult:
      type: "object"
      properties:
        "data": {"$ref": "#/components/schemas/LmsUser"}
        "raw":
          type: "array"
          items: {"$ref": "#/components/schemas/RawResponse"}
          nullable: true
      required:
        - "data"
    UsersPaginated:
      type: "object"
      properties:
        "next":
          type: "string"
          nullable: true
        "data":
          type: "array"
          items: {"$ref": "#/components/schemas/LmsUser"}
        "raw":
          type: "array"
          items: {"$ref": "#/components/schemas/RawResponse"}
          nullable: true
      required:
        - "data"
    Account:
      type: "object"
      properties:
        "id":
          type: "string"
          description: "Unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "remote_id":
          type: "string"
          description: "Provider's unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "unified_custom_fields":
          type: "object"
          additionalProperties: true
          description: "Custom Unified Fields configured in your StackOne project"
          nullable: true
          example: {"my_project_custom_field_1": "REF-1236", "my_project_custom_field_2": "some other value"}
        "owner_id":
          type: "string"
          nullable: true
        "remote_owner_id":
          type: "string"
          description: "Provider's unique identifier of the owner"
          nullable: true
          example: "e3cb75bf-aa84-466e-a6c1-b8322b257a48"
        "name":
          type: "string"
          nullable: true
        "description":
          type: "string"
          nullable: true
        "industries":
          type: "array"
          items:
            type: "string"
          description: "Values of the industries"
          nullable: true
          example: ["Information Technology", "Airlines & Airports", "Personal Care & Household Products"]
        "annual_revenue":
          type: "string"
          nullable: true
        "website":
          type: "string"
          nullable: true
        "addresses":
          type: "array"
          items: {"$ref": "#/components/schemas/AccountAddress"}
          nullable: true
        "phone_numbers":
          type: "array"
          items:
            type: "string"
          description: "List of account phone numbers"
          nullable: true
          example: ["+1123425334"]
        "created_at":
          type: "string"
          format: "date-time"
          description: "Timestamp when the account was created"
          nullable: true
          example: "2021-01-01T01:01:01.000Z"
        "updated_at":
          type: "string"
          format: "date-time"
          description: "Timestamp when the account was last updated"
          nullable: true
          example: "2021-01-01T01:01:01.000Z"
    AccountAddress:
      type: "object"
      properties:
        "street_1":
          type: "string"
          nullable: true
        "street_2":
          type: "string"
          nullable: true
        "city":
          type: "string"
          nullable: true
        "state":
          type: "string"
          nullable: true
        "zip_code":
          type: "string"
          nullable: true
        "country":
          allOf:
            - {"$ref": "#/components/schemas/CountryEnum"}
          description: "The country code"
          nullable: true
        "location_type":
          allOf:
            - {"$ref": "#/components/schemas/LocationTypeEnum"}
          description: "The location type"
          nullable: true
    AccountResult:
      type: "object"
      properties:
        "data": {"$ref": "#/components/schemas/Account"}
        "raw":
          type: "array"
          items: {"$ref": "#/components/schemas/RawResponse"}
          nullable: true
      required:
        - "data"
    AccountsPaginated:
      type: "object"
      properties:
        "next_page":
          type: "string"
          nullable: true
          deprecated: true
        "next":
          type: "string"
          nullable: true
        "data":
          type: "array"
          items: {"$ref": "#/components/schemas/Account"}
        "raw":
          type: "array"
          items: {"$ref": "#/components/schemas/RawResponse"}
          nullable: true
      required:
        - "data"
    Contact:
      type: "object"
      properties:
        "id":
          type: "string"
          description: "Unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "remote_id":
          type: "string"
          description: "Provider's unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "unified_custom_fields":
          type: "object"
          additionalProperties: true
          description: "Custom Unified Fields configured in your StackOne project"
          nullable: true
          example: {"my_project_custom_field_1": "REF-1236", "my_project_custom_field_2": "some other value"}
        "first_name":
          type: "string"
          description: "The contact first name"
          nullable: true
          example: "Steve"
        "last_name":
          type: "string"
          description: "The contact last name"
          nullable: true
          example: "Wozniak"
        "company_name":
          type: "string"
          description: "The contact company name"
          nullable: true
          example: "Apple Inc."
        "emails":
          type: "array"
          items:
            type: "string"
          description: "List of contact email addresses"
          nullable: true
          example: ["steve@apple.com"]
        "phone_numbers":
          type: "array"
          items:
            type: "string"
          description: "List of contact phone numbers"
          nullable: true
          example: ["123-456-7890"]
        "deal_ids":
          type: "array"
          items:
            type: "string"
          description: "List of associated deal IDs"
          nullable: true
          example: ["deal-001", "deal-002"]
        "remote_deal_ids":
          type: "array"
          items:
            type: "string"
          description: "Provider's list of associated deal IDs"
          nullable: true
          example: ["e3cb75bf-aa84-466e-a6c1-b8322b257a48", "e3cb75bf-aa84-466e-a6c1-b8322b257a49"]
        "account_ids":
          type: "array"
          items:
            type: "string"
          description: "List of associated account IDs"
          nullable: true
          example: ["account-123", "account-456"]
        "remote_account_ids":
          type: "array"
          items:
            type: "string"
          description: "Provider's list of associated account IDs"
          nullable: true
          example: ["e3cb75bf-aa84-466e-a6c1-b8322b257a48", "e3cb75bf-aa84-466e-a6c1-b8322b257a49"]
        "custom_fields":
          type: "array"
          items: {"$ref": "#/components/schemas/CustomFields"}
          description: "Contact custom fields"
          nullable: true
        "created_at":
          type: "string"
          format: "date-time"
          description: "Timestamp when the contact was created"
          nullable: true
          example: "2021-01-01T01:01:01.000Z"
        "updated_at":
          type: "string"
          format: "date-time"
          description: "Timestamp when the contact was last updated"
          nullable: true
          example: "2021-01-01T01:01:01.000Z"
    ContactResult:
      type: "object"
      properties:
        "data": {"$ref": "#/components/schemas/Contact"}
        "raw":
          type: "array"
          items: {"$ref": "#/components/schemas/RawResponse"}
          nullable: true
      required:
        - "data"
    ContactsPaginated:
      type: "object"
      properties:
        "next_page":
          type: "string"
          nullable: true
          deprecated: true
        "next":
          type: "string"
          nullable: true
        "data":
          type: "array"
          items: {"$ref": "#/components/schemas/Contact"}
        "raw":
          type: "array"
          items: {"$ref": "#/components/schemas/RawResponse"}
          nullable: true
      required:
        - "data"
    CountryEnum:
      type: "object"
      properties:
        "value":
          type: "string"
          enum:
            - "AF"
            - "AL"
            - "DZ"
            - "AS"
            - "AD"
            - "AO"
            - "AI"
            - "AQ"
            - "AG"
            - "AR"
            - "AM"
            - "AW"
            - "AU"
            - "AT"
            - "AZ"
            - "BS"
            - "BH"
            - "BD"
            - "BB"
            - "BY"
            - "BE"
            - "BZ"
            - "BJ"
            - "BM"
            - "BT"
            - "BO"
            - "BQ"
            - "BA"
            - "BW"
            - "BV"
            - "BR"
            - "IO"
            - "BN"
            - "BG"
            - "BF"
            - "BI"
            - "KH"
            - "CM"
            - "CA"
            - "CV"
            - "KY"
            - "CF"
            - "TD"
            - "CL"
            - "CN"
            - "CX"
            - "CC"
            - "CO"
            - "KM"
            - "CG"
            - "CD"
            - "CK"
            - "CR"
            - "HR"
            - "CU"
            - "CW"
            - "CY"
            - "CZ"
            - "CI"
            - "DK"
            - "DJ"
            - "DM"
            - "DO"
            - "EC"
            - "EG"
            - "SV"
            - "GQ"
            - "ER"
            - "EE"
            - "ET"
            - "FK"
            - "FO"
            - "FJ"
            - "FI"
            - "FR"
            - "GF"
            - "PF"
            - "TF"
            - "GA"
            - "GM"
            - "GE"
            - "DE"
            - "GH"
            - "GI"
            - "GR"
            - "GL"
            - "GD"
            - "GP"
            - "GU"
            - "GT"
            - "GG"
            - "GN"
            - "GW"
            - "GY"
            - "HT"
            - "HM"
            - "VA"
            - "HN"
            - "HK"
            - "HU"
            - "IS"
            - "IN"
            - "ID"
            - "IR"
            - "IQ"
            - "IE"
            - "IM"
            - "IL"
            - "IT"
            - "JM"
            - "JP"
            - "JE"
            - "JO"
            - "KZ"
            - "KE"
            - "KI"
            - "KP"
            - "KR"
            - "KW"
            - "KG"
            - "LA"
            - "LV"
            - "LB"
            - "LS"
            - "LR"
            - "LY"
            - "LI"
            - "LT"
            - "LU"
            - "MO"
            - "MK"
            - "MG"
            - "MW"
            - "MY"
            - "MV"
            - "ML"
            - "MT"
            - "MH"
            - "MQ"
            - "MR"
            - "MU"
            - "YT"
            - "MX"
            - "FM"
            - "MD"
            - "MC"
            - "MN"
            - "ME"
            - "MS"
            - "MA"
            - "MZ"
            - "MM"
            - "NA"
            - "NR"
            - "NP"
            - "NL"
            - "NC"
            - "NZ"
            - "NI"
            - "NE"
            - "NG"
            - "NU"
            - "NF"
            - "MP"
            - "NO"
            - "OM"
            - "PK"
            - "PW"
            - "PS"
            - "PA"
            - "PG"
            - "PY"
            - "PE"
            - "PH"
            - "PN"
            - "PL"
            - "PT"
            - "PR"
            - "QA"
            - "RO"
            - "RU"
            - "RW"
            - "RE"
            - "BL"
            - "SH"
            - "KN"
            - "LC"
            - "MF"
            - "PM"
            - "VC"
            - "WS"
            - "SM"
            - "ST"
            - "SA"
            - "SN"
            - "RS"
            - "SC"
            - "SL"
            - "SG"
            - "SX"
            - "SK"
            - "SI"
            - "SB"
            - "SO"
            - "ZA"
            - "GS"
            - "SS"
            - "ES"
            - "LK"
            - "SD"
            - "SR"
            - "SJ"
            - "SZ"
            - "SE"
            - "CH"
            - "SY"
            - "TW"
            - "TJ"
            - "TZ"
            - "TH"
            - "TL"
            - "TG"
            - "TK"
            - "TO"
            - "TT"
            - "TN"
            - "TR"
            - "TM"
            - "TC"
            - "TV"
            - "UG"
            - "UA"
            - "AE"
            - "GB"
            - "US"
            - "UM"
            - "UY"
            - "UZ"
            - "VU"
            - "VE"
            - "VN"
            - "VG"
            - "VI"
            - "WF"
            - "EH"
            - "YE"
            - "ZM"
            - "ZW"
            - "unmapped_value"
            - null
          description: "The ISO 3166-1 alpha-2 code of the country."
          nullable: true
          example: "GB"
          x-speakeasy-unknown-values: "allow"
        "source_value":
          oneOf:
            - type: "string"
            - type: "number"
            - type: "boolean"
            - type: "object"
            - type: "array"
              items: {}
          description: "The source value of the ISO 3166-1 alpha-2 code of the country."
          nullable: true
          example: "GB"
    CrmCreateContactRequestDto:
      type: "object"
      properties:
        "first_name":
          type: "string"
          description: "The contact first name"
          nullable: true
          example: "Steve"
        "last_name":
          type: "string"
          description: "The contact last name"
          nullable: true
          example: "Wozniak"
        "company_name":
          type: "string"
          description: "The contact company name"
          nullable: true
          example: "Apple Inc."
        "emails":
          type: "array"
          items:
            type: "string"
          description: "List of contact email addresses"
          nullable: true
          example: ["steve@apple.com"]
        "phone_numbers":
          type: "array"
          items:
            type: "string"
          description: "List of contact phone numbers"
          nullable: true
          example: ["123-456-7890"]
        "deal_ids":
          type: "array"
          items:
            type: "string"
          description: "List of associated deal IDs"
          nullable: true
          example: ["deal-001", "deal-002"]
        "account_ids":
          type: "array"
          items:
            type: "string"
          description: "List of associated account IDs"
          nullable: true
          example: ["account-123", "account-456"]
        "custom_fields":
          type: "array"
          items: {"$ref": "#/components/schemas/CustomFields"}
          description: "Contact custom fields"
          nullable: true
        "passthrough":
          type: "object"
          additionalProperties: true
          description: "Value to pass through to the provider"
          nullable: true
          example: {"other_known_names": "John Doe"}
    IamGroup:
      type: "object"
      properties:
        "id":
          type: "string"
          description: "Unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "remote_id":
          type: "string"
          description: "Provider's unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "name":
          type: "string"
          nullable: true
        "description":
          type: "string"
          nullable: true
        "type":
          allOf:
            - {"$ref": "#/components/schemas/GroupTypeEnum"}
          nullable: true
        "roles":
          type: "array"
          items: {"$ref": "#/components/schemas/IamRole"}
          nullable: true
        "parent_id":
          type: "string"
          description: "The parent group id for when a group belongs to another group."
          nullable: true
        "remote_parent_id":
          type: "string"
          description: "Provider's unique identifier of the parent group id for when a group belongs to another group."
          nullable: true
          example: "e3cb75bf-aa84-466e-a6c1-b8322b257a48"
        "created_at":
          type: "string"
          format: "date-time"
          nullable: true
          example: "2021-01-01T01:01:01.000Z"
        "updated_at":
          type: "string"
          format: "date-time"
          nullable: true
          example: "2021-01-01T01:01:01.000Z"
    IamGroupResult:
      type: "object"
      properties:
        "data": {"$ref": "#/components/schemas/IamGroup"}
        "raw":
          type: "array"
          items: {"$ref": "#/components/schemas/RawResponse"}
          nullable: true
      required:
        - "data"
    IamGroupsPaginated:
      type: "object"
      properties:
        "next_page":
          type: "string"
          nullable: true
          deprecated: true
        "next":
          type: "string"
          nullable: true
        "data":
          type: "array"
          items: {"$ref": "#/components/schemas/IamGroup"}
        "raw":
          type: "array"
          items: {"$ref": "#/components/schemas/RawResponse"}
          nullable: true
      required:
        - "data"
    IamMfaTypeEnum:
      type: "object"
      properties:
        "value":
          type: "string"
          enum:
            - "sms"
            - "email"
            - "push"
            - "totp"
            - "phone_call"
            - "question"
            - "software_token"
            - "hardware_token"
            - "web"
            - "unknown"
            - "unmapped_value"
            - null
          description: "The unified value for the type of multi-factor authentication. If the provider does not send back a type but does specify that MFA is set-up for this user, the value will be set to 'unknown'.'"
          nullable: true
          example: "totp"
          x-speakeasy-unknown-values: "allow"
        "source_value":
          oneOf:
            - type: "string"
            - type: "number"
            - type: "boolean"
            - type: "object"
            - type: "array"
              items: {}
          nullable: true
    IamPermission:
      type: "object"
      properties:
        "id":
          type: "string"
          description: "Unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "remote_id":
          type: "string"
          description: "Provider's unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "name":
          type: "string"
          description: "The name of the permission."
          nullable: true
          example: "read:users"
        "type":
          allOf:
            - {"$ref": "#/components/schemas/IamPermissionTypeEnum"}
          nullable: true
        "resources":
          type: "array"
          items: {"$ref": "#/components/schemas/IamResource"}
          description: "The resources that the permission applies to."
          nullable: true
        "description":
          type: "string"
          nullable: true
        "created_at":
          type: "string"
          format: "date-time"
          nullable: true
          example: "2021-01-01T01:01:01.000Z"
        "updated_at":
          type: "string"
          format: "date-time"
          nullable: true
          example: "2021-01-01T01:01:01.000Z"
    IamPermissionTypeEnum:
      type: "object"
      properties:
        "value":
          type: "string"
          enum:
            - "read"
            - "read_write"
            - "approve"
            - "delete"
            - "use"
            - "export"
            - "unmapped_value"
            - null
          description: "The type of the permission, e.g. read, read_write, delete, etc."
          nullable: true
          example: "read_write"
          x-speakeasy-unknown-values: "allow"
        "source_value":
          oneOf:
            - type: "string"
            - type: "number"
            - type: "boolean"
            - type: "object"
            - type: "array"
              items: {}
          nullable: true
    IamPoliciesPaginated:
      type: "object"
      properties:
        "next_page":
          type: "string"
          nullable: true
          deprecated: true
        "next":
          type: "string"
          nullable: true
        "data":
          type: "array"
          items: {"$ref": "#/components/schemas/IamPolicy"}
        "raw":
          type: "array"
          items: {"$ref": "#/components/schemas/RawResponse"}
          nullable: true
      required:
        - "data"
    IamPolicy:
      type: "object"
      properties:
        "id":
          type: "string"
          description: "Unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "remote_id":
          type: "string"
          description: "Provider's unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "name":
          type: "string"
          description: "The name of the policy."
          nullable: true
          example: "Remote Contractor Policy"
        "permissions":
          type: "array"
          items: {"$ref": "#/components/schemas/IamPermission"}
          description: "The set of permissions associated with the policy."
          nullable: true
        "description":
          type: "string"
          nullable: true
        "created_at":
          type: "string"
          format: "date-time"
          nullable: true
          example: "2021-01-01T01:01:01.000Z"
        "updated_at":
          type: "string"
          format: "date-time"
          nullable: true
          example: "2021-01-01T01:01:01.000Z"
    IamPolicyResult:
      type: "object"
      properties:
        "data": {"$ref": "#/components/schemas/IamPolicy"}
        "raw":
          type: "array"
          items: {"$ref": "#/components/schemas/RawResponse"}
          nullable: true
      required:
        - "data"
    IamResource:
      type: "object"
      properties:
        "id":
          type: "string"
          description: "Unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "remote_id":
          type: "string"
          description: "Provider's unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "name":
          type: "string"
          description: "The name of the resource."
          nullable: true
          example: "Company History Records"
        "location":
          type: "string"
          description: "The location of the resource."
          nullable: true
          example: "s3://bucket-name/folder-name"
        "type":
          allOf:
            - {"$ref": "#/components/schemas/IamResourceTypeEnum"}
          nullable: true
        "description":
          type: "string"
          nullable: true
        "created_at":
          type: "string"
          format: "date-time"
          nullable: true
          example: "2021-01-01T01:01:01.000Z"
        "updated_at":
          type: "string"
          format: "date-time"
          nullable: true
          example: "2021-01-01T01:01:01.000Z"
    IamResourceTypeEnum:
      type: "object"
      properties:
        "value":
          type: "string"
          enum:
            - "project"
            - "file"
            - "folder"
            - "product"
            - "property"
            - "user"
            - "unmapped_value"
            - null
          description: "The type of the resource, e.g. user, group, permission, etc."
          nullable: true
          example: "file"
          x-speakeasy-unknown-values: "allow"
        "source_value":
          oneOf:
            - type: "string"
            - type: "number"
            - type: "boolean"
            - type: "object"
            - type: "array"
              items: {}
          nullable: true
    IamRole:
      type: "object"
      properties:
        "id":
          type: "string"
          description: "Unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "remote_id":
          type: "string"
          description: "Provider's unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "name":
          type: "string"
          nullable: true
        "description":
          type: "string"
          nullable: true
        "type":
          allOf:
            - {"$ref": "#/components/schemas/RoleTypeEnum"}
          nullable: true
        "policies":
          type: "array"
          items: {"$ref": "#/components/schemas/IamPolicy"}
          description: "The set of policies associated with the role."
          nullable: true
        "created_at":
          type: "string"
          format: "date-time"
          nullable: true
          example: "2021-01-01T01:01:01.000Z"
        "updated_at":
          type: "string"
          format: "date-time"
          nullable: true
          example: "2021-01-01T01:01:01.000Z"
    IamRoleResult:
      type: "object"
      properties:
        "data": {"$ref": "#/components/schemas/IamRole"}
        "raw":
          type: "array"
          items: {"$ref": "#/components/schemas/RawResponse"}
          nullable: true
      required:
        - "data"
    IamRolesPaginated:
      type: "object"
      properties:
        "next_page":
          type: "string"
          nullable: true
          deprecated: true
        "next":
          type: "string"
          nullable: true
        "data":
          type: "array"
          items: {"$ref": "#/components/schemas/IamRole"}
        "raw":
          type: "array"
          items: {"$ref": "#/components/schemas/RawResponse"}
          nullable: true
      required:
        - "data"
    IamUpdateUserRequestDto:
      type: "object"
      properties:
        "primary_email_address":
          type: "string"
          description: "Primary email address of the user. This is generally a work email address."
          nullable: true
          example: "han@stackone.com"
        "first_name":
          type: "string"
          nullable: true
          example: "Han"
        "last_name":
          type: "string"
          nullable: true
          example: "Solo"
        "name":
          type: "string"
          description: "User's name which (can be a full name or display name)"
          nullable: true
          example: "Han Solo"
        "username":
          type: "string"
          nullable: true
          example: "hansolo1977"
        "is_bot_user":
          oneOf:
            - type: "boolean"
            - type: "string"
              enum:
                - "true"
                - "false"
          description: "Indicates if the user is a bot or service user"
          nullable: true
          example: true
        "status":
          allOf:
            - {"$ref": "#/components/schemas/UserStatusEnum"}
          nullable: true
        "passthrough":
          type: "object"
          additionalProperties: true
          description: "Value to pass through to the provider"
          nullable: true
          example: {"other_known_names": "John Doe"}
    IamUser:
      type: "object"
      properties:
        "id":
          type: "string"
          description: "Unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "remote_id":
          type: "string"
          description: "Provider's unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "unified_custom_fields":
          type: "object"
          additionalProperties: true
          description: "Custom Unified Fields configured in your StackOne project"
          nullable: true
          example: {"my_project_custom_field_1": "REF-1236", "my_project_custom_field_2": "some other value"}
        "primary_email_address":
          type: "string"
          description: "Primary email address of the user. This is generally a work email address."
          nullable: true
          example: "han@stackone.com"
        "first_name":
          type: "string"
          nullable: true
          example: "Han"
        "last_name":
          type: "string"
          nullable: true
          example: "Solo"
        "name":
          type: "string"
          description: "User's name which (can be a full name or display name)"
          nullable: true
          example: "Han Solo"
        "username":
          type: "string"
          nullable: true
          example: "hansolo1977"
        "is_bot_user":
          oneOf:
            - type: "boolean"
            - type: "string"
              enum:
                - "true"
                - "false"
          description: "Indicates if the user is a bot or service user"
          nullable: true
          example: true
        "roles":
          type: "array"
          items: {"$ref": "#/components/schemas/IamRole"}
          description: "List of roles the user is assigned to"
          nullable: true
        "groups":
          type: "array"
          items: {"$ref": "#/components/schemas/IamGroup"}
          description: "List of groups the user is assigned to"
          nullable: true
        "status":
          allOf:
            - {"$ref": "#/components/schemas/UserStatusEnum"}
          nullable: true
        "last_active_at":
          type: "string"
          format: "date-time"
          description: "The date this user was last active"
          nullable: true
          example: "2021-01-01T01:01:01.000Z"
        "last_login_at":
          type: "string"
          format: "date-time"
          description: "The date this user last logged in"
          nullable: true
          example: "2021-01-01T01:01:01.000Z"
        "created_at":
          type: "string"
          format: "date-time"
          description: "The date the user was created"
          nullable: true
          example: "2021-01-01T01:01:01.000Z"
        "updated_at":
          type: "string"
          format: "date-time"
          description: "The date the user was created"
          nullable: true
          example: "2021-01-01T01:01:01.000Z"
        "multi_factor_enabled":
          type: "array"
          items: {"$ref": "#/components/schemas/IamMfaTypeEnum"}
          description: "The list of Multi-Factor Authentication (MFA) types enabled for the user."
          nullable: true
        "avatar":
          allOf:
            - {"$ref": "#/components/schemas/File"}
          description: "The user's avatar data. This generally contains a URL within this property's 'contents' array."
          nullable: true
    IamUserResult:
      type: "object"
      properties:
        "data": {"$ref": "#/components/schemas/IamUser"}
        "raw":
          type: "array"
          items: {"$ref": "#/components/schemas/RawResponse"}
          nullable: true
      required:
        - "data"
    IamUsersPaginated:
      type: "object"
      properties:
        "next_page":
          type: "string"
          nullable: true
          deprecated: true
        "next":
          type: "string"
          nullable: true
        "data":
          type: "array"
          items: {"$ref": "#/components/schemas/IamUser"}
        "raw":
          type: "array"
          items: {"$ref": "#/components/schemas/RawResponse"}
          nullable: true
      required:
        - "data"
    UserStatusEnum:
      type: "object"
      properties:
        "value":
          type: "string"
          enum:
            - "enabled"
            - "disabled"
            - "pending"
            - "unmapped_value"
            - null
          description: "The status of the user, e.g. whether the user is enabled, has been disabled (eg. by an admin), or is pending (ie: awaiting approval by the user or an admin)."
          nullable: true
          example: "enabled"
          x-speakeasy-unknown-values: "allow"
        "source_value":
          oneOf:
            - type: "string"
            - type: "number"
            - type: "boolean"
            - type: "object"
            - type: "array"
              items: {}
          nullable: true
    Campaign:
      type: "object"
      properties:
        "id":
          type: "string"
          description: "Unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "remote_id":
          type: "string"
          description: "Provider's unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "name":
          type: "string"
          nullable: true
        "created_at":
          type: "string"
          format: "date-time"
          description: "The created_at date"
          nullable: true
          example: "2021-01-01T01:01:01.000Z"
        "updated_at":
          type: "string"
          format: "date-time"
          description: "The updated_at date"
          nullable: true
          example: "2021-01-01T01:01:01.000Z"
        "description":
          type: "string"
          nullable: true
        "schedule_type":
          allOf:
            - {"$ref": "#/components/schemas/ScheduleTypeEnum"}
          description: "The schedule type"
          nullable: true
        "status":
          allOf:
            - {"$ref": "#/components/schemas/StatusEnum"}
          description: "Status of the Campaign"
          nullable: true
        "archived":
          oneOf:
            - type: "boolean"
            - type: "string"
              enum:
                - "true"
                - "false"
          nullable: true
        "draft":
          oneOf:
            - type: "boolean"
            - type: "string"
              enum:
                - "true"
                - "false"
          nullable: true
        "channels":
          type: "array"
          items: {"$ref": "#/components/schemas/ChannelsEnum"}
          description: "channels of the Campaign"
          nullable: true
        "first_sent_at":
          type: "string"
          format: "date-time"
          description: "The first_sent_at date"
          nullable: true
          example: "2021-01-01T01:01:01.000Z"
        "last_sent_at":
          type: "string"
          format: "date-time"
          description: "The last_sent_at date"
          nullable: true
          example: "2021-01-01T01:01:01.000Z"
        "tags":
          type: "array"
          items:
            type: "string"
          nullable: true
        "messages":
          type: "array"
          items: {"$ref": "#/components/schemas/Message"}
          nullable: true
          example: [{"id": "message-id-1", "name": "SMS Message", "message_type": {"value": "sms", "sourceValue": "sms-message"}, "message_content": {"body": "This is an example SMS body.", "from": "1-555-123-4567"}}, {"id": "message-id-2", "name": "Email Message", "message_type": {"value": "email", "sourceValue": "email-message"}, "message_content": {"subject": "Example Email Subject", "body": "<h1>This is an example</h1>\n            <p>email body</p>", "from": "Jane Smith", "reply-to": "reply@example.com", "preheader": "This is the preheader of the email."}}, {"id": "message-id-3", "name": "iOS Push Message", "message_type": {"value": "ios_push", "sourceValue": "ios-push"}, "message_content": {"body": "This is an example push notification body."}}]
    CampaignResult:
      type: "object"
      properties:
        "data": {"$ref": "#/components/schemas/Campaign"}
        "raw":
          type: "array"
          items: {"$ref": "#/components/schemas/RawResponse"}
          nullable: true
      required:
        - "data"
    CampaignsPaginated:
      type: "object"
      properties:
        "next_page":
          type: "string"
          nullable: true
          deprecated: true
        "next":
          type: "string"
          nullable: true
        "data":
          type: "array"
          items: {"$ref": "#/components/schemas/Campaign"}
        "raw":
          type: "array"
          items: {"$ref": "#/components/schemas/RawResponse"}
          nullable: true
      required:
        - "data"
    ChannelsEnum:
      type: "object"
      properties:
        "value":
          type: "string"
          enum:
            - "email"
            - "sms"
            - "web_push"
            - "ios_push"
            - "android_push"
            - "unknown"
            - "unmapped_value"
            - null
          description: "The Channels of the campaign."
          nullable: true
          example: "sms"
          x-speakeasy-unknown-values: "allow"
        "source_value":
          oneOf:
            - type: "string"
            - type: "number"
            - type: "boolean"
            - type: "object"
            - type: "array"
              items: {}
          description: "The source value of the Channels."
          nullable: true
          example: "SMS"
    ContentBlock:
      type: "object"
      properties:
        "id":
          type: "string"
          description: "Unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "remote_id":
          type: "string"
          description: "Provider's unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "name":
          type: "string"
          nullable: true
        "tags":
          type: "array"
          items:
            type: "string"
          nullable: true
        "content":
          type: "string"
          nullable: true
        "type":
          allOf:
            - {"$ref": "#/components/schemas/ContentBlockTypeEnumApiModel"}
          description: "Stackone enum identifying the type of content block."
          nullable: true
        "status":
          allOf:
            - {"$ref": "#/components/schemas/ContentBlockStatusEnumApiModel"}
          description: "Stackone enum identifying the status of content block."
          nullable: true
        "created_at":
          type: "string"
          format: "date-time"
          description: "Date of creation"
          nullable: true
          example: "2021-01-01T00:00:00.000Z"
        "updated_at":
          type: "string"
          format: "date-time"
          description: "Date of last update"
          nullable: true
          example: "2021-01-01T00:00:00.000Z"
    ContentBlockResult:
      type: "object"
      properties:
        "data": {"$ref": "#/components/schemas/ContentBlock"}
        "raw":
          type: "array"
          items: {"$ref": "#/components/schemas/RawResponse"}
          nullable: true
      required:
        - "data"
    ContentBlocksPaginated:
      type: "object"
      properties:
        "next_page":
          type: "string"
          nullable: true
          deprecated: true
        "next":
          type: "string"
          nullable: true
        "data":
          type: "array"
          items: {"$ref": "#/components/schemas/ContentBlock"}
        "raw":
          type: "array"
          items: {"$ref": "#/components/schemas/RawResponse"}
          nullable: true
      required:
        - "data"
    ContentBlockStatusEnumApiModel:
      type: "object"
      properties:
        "value":
          type: "string"
          enum:
            - "draft"
            - "live"
            - "archived"
            - "unmapped_value"
            - null
          description: "The Status of the content blocks."
          nullable: true
          example: "live"
          x-speakeasy-unknown-values: "allow"
        "source_value":
          oneOf:
            - type: "string"
            - type: "number"
            - type: "boolean"
            - type: "object"
            - type: "array"
              items: {}
          description: "The source value of the status."
          nullable: true
          example: "active"
    ContentBlockTypeEnumApiModel:
      type: "object"
      properties:
        "value":
          type: "string"
          enum:
            - "text"
            - "html"
            - "image"
            - "code-snippet"
            - "unmapped_value"
            - null
          description: "The type of the content blocks."
          nullable: true
          example: "html"
          x-speakeasy-unknown-values: "allow"
        "source_value":
          oneOf:
            - type: "string"
            - type: "number"
            - type: "boolean"
            - type: "object"
            - type: "array"
              items: {}
          description: "The source value of the type."
          nullable: true
          example: "text"
    CreateMessage:
      type: "object"
      properties:
        "id":
          type: "string"
          description: "Unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "name":
          type: "string"
          nullable: true
        "message_type":
          allOf:
            - {"$ref": "#/components/schemas/MessageTypeEnum"}
          description: "Stackone enum identifying the type of message associated with the content."
          nullable: true
        "message_content":
          oneOf:
            - {"$ref": "#/components/schemas/SmsMessageContents"}
            - {"$ref": "#/components/schemas/EmailMessageContents"}
            - {"$ref": "#/components/schemas/PushMessageContents"}
          nullable: true
    EmailMessageContents:
      type: "object"
      properties:
        "subject":
          type: "string"
          nullable: true
        "body":
          type: "string"
          nullable: true
        "from":
          type: "string"
          nullable: true
        "reply-to":
          type: "string"
          nullable: true
        "preheader":
          type: "string"
          nullable: true
    EmailMessages:
      type: "object"
      properties:
        "id":
          type: "string"
          description: "Unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "remote_id":
          type: "string"
          description: "Provider's unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "name":
          type: "string"
          nullable: true
        "message_type":
          allOf:
            - {"$ref": "#/components/schemas/MessageTypeEnum"}
          nullable: true
        "message_content":
          allOf:
            - {"$ref": "#/components/schemas/EmailMessageContents"}
          nullable: true
    EmailTemplate:
      type: "object"
      properties:
        "id":
          type: "string"
          description: "Unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "remote_id":
          type: "string"
          description: "Provider's unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "name":
          type: "string"
          nullable: true
        "tags":
          type: "array"
          items:
            type: "string"
          nullable: true
        "created_at":
          type: "string"
          format: "date-time"
          description: "Date of creation"
          nullable: true
          example: "2021-01-01T00:00:00.000Z"
        "updated_at":
          type: "string"
          format: "date-time"
          description: "Date of last update"
          nullable: true
          example: "2021-01-01T00:00:00.000Z"
        "messages":
          type: "array"
          items: {"$ref": "#/components/schemas/EmailMessages"}
          nullable: true
    EmailTemplateResult:
      type: "object"
      properties:
        "data": {"$ref": "#/components/schemas/EmailTemplate"}
        "raw":
          type: "array"
          items: {"$ref": "#/components/schemas/RawResponse"}
          nullable: true
      required:
        - "data"
    EmailTemplatesPaginated:
      type: "object"
      properties:
        "next_page":
          type: "string"
          nullable: true
          deprecated: true
        "next":
          type: "string"
          nullable: true
        "data":
          type: "array"
          items: {"$ref": "#/components/schemas/EmailTemplate"}
        "raw":
          type: "array"
          items: {"$ref": "#/components/schemas/RawResponse"}
          nullable: true
      required:
        - "data"
    InAppMessageContents:
      type: "object"
      properties:
        "body":
          type: "string"
          nullable: true
    InAppMessages:
      type: "object"
      properties:
        "id":
          type: "string"
          description: "Unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "remote_id":
          type: "string"
          description: "Provider's unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "name":
          type: "string"
          nullable: true
        "message_type":
          allOf:
            - {"$ref": "#/components/schemas/MessageTypeEnum"}
          nullable: true
        "message_content":
          allOf:
            - {"$ref": "#/components/schemas/InAppMessageContents"}
          nullable: true
    InAppTemplate:
      type: "object"
      properties:
        "id":
          type: "string"
          description: "Unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "remote_id":
          type: "string"
          description: "Provider's unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "name":
          type: "string"
          nullable: true
        "tags":
          type: "array"
          items:
            type: "string"
          nullable: true
        "created_at":
          type: "string"
          format: "date-time"
          description: "Date of creation"
          nullable: true
          example: "2021-01-01T00:00:00.000Z"
        "updated_at":
          type: "string"
          format: "date-time"
          description: "Date of last update"
          nullable: true
          example: "2021-01-01T00:00:00.000Z"
        "messages":
          type: "array"
          items: {"$ref": "#/components/schemas/InAppMessages"}
          nullable: true
    InAppTemplateResult:
      type: "object"
      properties:
        "data": {"$ref": "#/components/schemas/InAppTemplate"}
        "raw":
          type: "array"
          items: {"$ref": "#/components/schemas/RawResponse"}
          nullable: true
      required:
        - "data"
    InAppTemplatesPaginated:
      type: "object"
      properties:
        "next_page":
          type: "string"
          nullable: true
          deprecated: true
        "next":
          type: "string"
          nullable: true
        "data":
          type: "array"
          items: {"$ref": "#/components/schemas/InAppTemplate"}
        "raw":
          type: "array"
          items: {"$ref": "#/components/schemas/RawResponse"}
          nullable: true
      required:
        - "data"
    MarketingCreateContentBlocksRequestDto:
      type: "object"
      properties:
        "name":
          type: "string"
          nullable: true
        "tags":
          type: "array"
          items:
            type: "string"
          nullable: true
        "content":
          type: "string"
          nullable: true
        "type":
          allOf:
            - {"$ref": "#/components/schemas/ContentBlockTypeEnumApiModel"}
          description: "Stackone enum identifying the type of content block."
          nullable: true
        "passthrough":
          type: "object"
          additionalProperties: true
          description: "Value to pass through to the provider"
          nullable: true
          example: {"other_known_names": "John Doe"}
    MarketingCreateEmailTemplateRequestDto:
      type: "object"
      properties:
        "name":
          type: "string"
          nullable: true
        "tags":
          type: "array"
          items:
            type: "string"
          nullable: true
        "messages":
          type: "array"
          items: {"$ref": "#/components/schemas/EmailMessages"}
          nullable: true
        "passthrough":
          type: "object"
          additionalProperties: true
          description: "Value to pass through to the provider"
          nullable: true
          example: {"other_known_names": "John Doe"}
    MarketingCreateInAppTemplateRequestDto:
      type: "object"
      properties:
        "name":
          type: "string"
          nullable: true
        "tags":
          type: "array"
          items:
            type: "string"
          nullable: true
        "messages":
          type: "array"
          items: {"$ref": "#/components/schemas/InAppMessages"}
          nullable: true
        "passthrough":
          type: "object"
          additionalProperties: true
          description: "Value to pass through to the provider"
          nullable: true
          example: {"other_known_names": "John Doe"}
    MarketingCreatePushTemplateRequestDto:
      type: "object"
      properties:
        "name":
          type: "string"
          nullable: true
        "tags":
          type: "array"
          items:
            type: "string"
          nullable: true
        "messages":
          type: "array"
          items: {"$ref": "#/components/schemas/PushMessages"}
          nullable: true
        "passthrough":
          type: "object"
          additionalProperties: true
          description: "Value to pass through to the provider"
          nullable: true
          example: {"other_known_names": "John Doe"}
    MarketingCreateSmsTemplateRequestDto:
      type: "object"
      properties:
        "name":
          type: "string"
          nullable: true
        "tags":
          type: "array"
          items:
            type: "string"
          nullable: true
        "messages":
          type: "array"
          items: {"$ref": "#/components/schemas/SmsMessages"}
          nullable: true
        "passthrough":
          type: "object"
          additionalProperties: true
          description: "Value to pass through to the provider"
          nullable: true
          example: {"other_known_names": "John Doe"}
    MarketingCreateTemplateRequestDto:
      type: "object"
      properties:
        "messages":
          type: "array"
          items: {"$ref": "#/components/schemas/CreateMessage"}
          nullable: true
        "name":
          type: "string"
          nullable: true
        "tags":
          type: "array"
          items:
            type: "string"
          nullable: true
        "passthrough":
          type: "object"
          additionalProperties: true
          description: "Value to pass through to the provider"
          nullable: true
          example: {"other_known_names": "John Doe"}
    Message:
      type: "object"
      properties:
        "id":
          type: "string"
          description: "Unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "remote_id":
          type: "string"
          description: "Provider's unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "name":
          type: "string"
          nullable: true
        "message_type":
          allOf:
            - {"$ref": "#/components/schemas/MessageTypeEnum"}
          description: "Stackone enum identifying the type of message associated with the content."
          nullable: true
        "message_content":
          oneOf:
            - {"$ref": "#/components/schemas/SmsMessageContents"}
            - {"$ref": "#/components/schemas/EmailMessageContents"}
            - {"$ref": "#/components/schemas/PushMessageContents"}
          nullable: true
    MessageTypeEnum:
      type: "object"
      properties:
        "value":
          type: "string"
          enum:
            - "email"
            - "sms"
            - "push"
            - "web_push"
            - "ios_push"
            - "android_push"
            - "app_push"
            - "omni_channel"
            - "content_block"
            - "in_app"
            - "unknown"
            - "unmapped_value"
            - null
          description: "The unified message type."
          nullable: true
          example: "email"
          x-speakeasy-unknown-values: "allow"
        "source_value":
          oneOf:
            - type: "string"
            - type: "number"
            - type: "boolean"
            - type: "object"
            - type: "array"
              items: {}
          description: "The original value from the provider used to derive the unified message type."
          nullable: true
          example: "Email"
    PushMessageContents:
      type: "object"
      properties:
        "title":
          type: "string"
          nullable: true
        "subtitle":
          type: "string"
          nullable: true
        "body":
          type: "string"
          nullable: true
    PushMessages:
      type: "object"
      properties:
        "id":
          type: "string"
          description: "Unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "remote_id":
          type: "string"
          description: "Provider's unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "name":
          type: "string"
          nullable: true
        "message_type":
          allOf:
            - {"$ref": "#/components/schemas/MessageTypeEnum"}
          nullable: true
        "message_content":
          allOf:
            - {"$ref": "#/components/schemas/PushMessageContents"}
          nullable: true
    PushTemplate:
      type: "object"
      properties:
        "id":
          type: "string"
          description: "Unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "remote_id":
          type: "string"
          description: "Provider's unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "name":
          type: "string"
          nullable: true
        "tags":
          type: "array"
          items:
            type: "string"
          nullable: true
        "created_at":
          type: "string"
          format: "date-time"
          description: "Date of creation"
          nullable: true
          example: "2021-01-01T00:00:00.000Z"
        "updated_at":
          type: "string"
          format: "date-time"
          description: "Date of last update"
          nullable: true
          example: "2021-01-01T00:00:00.000Z"
        "messages":
          type: "array"
          items: {"$ref": "#/components/schemas/PushMessages"}
          nullable: true
    PushTemplateResult:
      type: "object"
      properties:
        "data": {"$ref": "#/components/schemas/PushTemplate"}
        "raw":
          type: "array"
          items: {"$ref": "#/components/schemas/RawResponse"}
          nullable: true
      required:
        - "data"
    PushTemplatesPaginated:
      type: "object"
      properties:
        "next_page":
          type: "string"
          nullable: true
          deprecated: true
        "next":
          type: "string"
          nullable: true
        "data":
          type: "array"
          items: {"$ref": "#/components/schemas/PushTemplate"}
        "raw":
          type: "array"
          items: {"$ref": "#/components/schemas/RawResponse"}
          nullable: true
      required:
        - "data"
    ScheduleTypeEnum:
      type: "object"
      properties:
        "value":
          type: "string"
          enum:
            - "immediate"
            - "scheduled"
            - "recurring"
            - "custom"
            - "triggered"
            - "unmapped_value"
            - null
          description: "The schedule type of the campaign."
          nullable: true
          example: "immediate"
          x-speakeasy-unknown-values: "allow"
        "source_value":
          oneOf:
            - type: "string"
            - type: "number"
            - type: "boolean"
            - type: "object"
            - type: "array"
              items: {}
          description: "The source value of the schedule type."
          nullable: true
          example: "Immediate"
    SmsMessageContents:
      type: "object"
      properties:
        "body":
          type: "string"
          nullable: true
        "from":
          type: "string"
          nullable: true
    SmsMessages:
      type: "object"
      properties:
        "id":
          type: "string"
          description: "Unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "remote_id":
          type: "string"
          description: "Provider's unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "name":
          type: "string"
          nullable: true
        "message_type":
          allOf:
            - {"$ref": "#/components/schemas/MessageTypeEnum"}
          nullable: true
        "message_content":
          allOf:
            - {"$ref": "#/components/schemas/SmsMessageContents"}
          nullable: true
    SmsTemplate:
      type: "object"
      properties:
        "id":
          type: "string"
          description: "Unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "remote_id":
          type: "string"
          description: "Provider's unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "name":
          type: "string"
          nullable: true
        "tags":
          type: "array"
          items:
            type: "string"
          nullable: true
        "created_at":
          type: "string"
          format: "date-time"
          description: "Date of creation"
          nullable: true
          example: "2021-01-01T00:00:00.000Z"
        "updated_at":
          type: "string"
          format: "date-time"
          description: "Date of last update"
          nullable: true
          example: "2021-01-01T00:00:00.000Z"
        "messages":
          type: "array"
          items: {"$ref": "#/components/schemas/SmsMessages"}
          nullable: true
    SmsTemplateResult:
      type: "object"
      properties:
        "data": {"$ref": "#/components/schemas/SmsTemplate"}
        "raw":
          type: "array"
          items: {"$ref": "#/components/schemas/RawResponse"}
          nullable: true
      required:
        - "data"
    SmsTemplatesPaginated:
      type: "object"
      properties:
        "next_page":
          type: "string"
          nullable: true
          deprecated: true
        "next":
          type: "string"
          nullable: true
        "data":
          type: "array"
          items: {"$ref": "#/components/schemas/SmsTemplate"}
        "raw":
          type: "array"
          items: {"$ref": "#/components/schemas/RawResponse"}
          nullable: true
      required:
        - "data"
    StatusEnum:
      type: "object"
      properties:
        "value":
          type: "string"
          enum:
            - "draft"
            - "archived"
            - "live"
            - "unmapped_value"
            - null
          description: "The Status of the campaign."
          nullable: true
          example: "email"
          x-speakeasy-unknown-values: "allow"
        "source_value":
          oneOf:
            - type: "string"
            - type: "number"
            - type: "boolean"
            - type: "object"
            - type: "array"
              items: {}
          description: "The source value of the Status."
          nullable: true
          example: "Email"
    Template:
      type: "object"
      properties:
        "id":
          type: "string"
          description: "Unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "remote_id":
          type: "string"
          description: "Provider's unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "name":
          type: "string"
          nullable: true
        "tags":
          type: "array"
          items:
            type: "string"
          nullable: true
        "created_at":
          type: "string"
          format: "date-time"
          description: "Date of creation"
          nullable: true
          example: "2021-01-01T00:00:00.000Z"
        "updated_at":
          type: "string"
          format: "date-time"
          description: "Date of last update"
          nullable: true
          example: "2021-01-01T00:00:00.000Z"
    TemplateResult:
      type: "object"
      properties:
        "data": {"$ref": "#/components/schemas/Template"}
        "raw":
          type: "array"
          items: {"$ref": "#/components/schemas/RawResponse"}
          nullable: true
      required:
        - "data"
    TemplatesPaginated:
      type: "object"
      properties:
        "next_page":
          type: "string"
          nullable: true
          deprecated: true
        "next":
          type: "string"
          nullable: true
        "data":
          type: "array"
          items: {"$ref": "#/components/schemas/Template"}
        "raw":
          type: "array"
          items: {"$ref": "#/components/schemas/RawResponse"}
          nullable: true
      required:
        - "data"
    AdditionalData:
      type: "object"
      properties:
        "id":
          type: "string"
          description: "The name of the additional data field. Speak to your Solutions Engineer to understand the id for the specific use case"
          nullable: true
          example: "learning_outcomes"
        "remote_id":
          type: "string"
          description: "Provider's unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "value":
          oneOf:
            - type: "string"
            - type: "array"
              items:
                type: "string"
          description: "The value of the additional data"
          nullable: true
          example: "This is additional data"
    Assignment:
      type: "object"
      properties:
        "id":
          type: "string"
          description: "The ID associated with this assignment"
          nullable: true
          example: "123456"
        "remote_id":
          type: "string"
          description: "Provider's unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "unified_custom_fields":
          type: "object"
          additionalProperties: true
          description: "Custom Unified Fields configured in your StackOne project"
          nullable: true
          example: {"my_project_custom_field_1": "REF-1236", "my_project_custom_field_2": "some other value"}
        "external_reference":
          type: "string"
          description: "The external reference associated with this assignment"
          nullable: true
          example: "e3gd34-23tr21-er234-345er56"
          deprecated: true
        "learning_object_id":
          type: "string"
          description: "The learning_object_id associated with this assignment. This is not required unless specified in an integration."
          nullable: true
          example: "e3gd34-23tr21-er234-345er56"
        "remote_learning_object_id":
          type: "string"
          description: "Provider's unique identifier of the learning object related to the assignment"
          nullable: true
          example: "e3cb55bf-aa84-466e-a6c1-b8302b257a49"
        "learning_object_external_reference":
          type: "string"
          description: "The external reference of the learning object associated with this assignment, this is the main identifier for creating assignments."
          nullable: true
          example: "learning-content-123"
        "progress":
          type: "number"
          description: "The progress associated with this assigment"
          nullable: true
          example: "40"
        "updated_at":
          type: "string"
          description: "The date the assignment was last updated"
          nullable: true
          example: "2021-07-21T14:00:00.000Z"
        "created_at":
          type: "string"
          description: "The date the assignment was created"
          nullable: true
          example: "2021-07-21T14:00:00.000Z"
        "due_date":
          type: "string"
          description: "The date the assignment is due to be completed"
          nullable: true
          example: "2021-07-21T14:00:00.000Z"
        "status":
          allOf:
            - {"$ref": "#/components/schemas/AssignmentStatusEnum"}
          description: "The status of the assignment"
          nullable: true
        "learning_object_type":
          allOf:
            - {"$ref": "#/components/schemas/LearningObjectTypeEnum"}
          description: "The learning object type of the assignment"
          nullable: true
        "user_id":
          type: "string"
          description: "The user ID associated with this assignment"
          nullable: true
          example: "c28xyrc55866bvuv"
        "remote_user_id":
          type: "string"
          description: "Provider's unique identifier of the user related to the assignment"
          nullable: true
          example: "e3cb75bf-aa84-466e-a6c1-b8322b257a48"
        "course_id":
          type: "string"
          description: "The course ID associated with this assignment"
          nullable: true
          example: "16873-ENG-1"
          deprecated: true
        "remote_course_id":
          type: "string"
          description: "Provider's unique identifier of the course related to the assignment"
          nullable: true
          example: "e3cb75bf-aa84-466e-a6c1-b8322b257a48"
          deprecated: true
    AssignmentResult:
      type: "object"
      properties:
        "data": {"$ref": "#/components/schemas/Assignment"}
        "raw":
          type: "array"
          items: {"$ref": "#/components/schemas/RawResponse"}
          nullable: true
      required:
        - "data"
    AssignmentsPaginated:
      type: "object"
      properties:
        "next":
          type: "string"
          nullable: true
        "data":
          type: "array"
          items: {"$ref": "#/components/schemas/Assignment"}
        "raw":
          type: "array"
          items: {"$ref": "#/components/schemas/RawResponse"}
          nullable: true
      required:
        - "data"
    AssignmentStatusEnum:
      type: "object"
      properties:
        "value":
          type: "string"
          enum:
            - "pending"
            - "in_progress"
            - "completed"
            - "unmapped_value"
            - null
          nullable: true
          example: "in_progress"
          x-speakeasy-unknown-values: "allow"
        "source_value":
          oneOf:
            - type: "string"
            - type: "number"
            - type: "boolean"
            - type: "object"
            - type: "array"
              items: {}
          nullable: true
    AuthorModel:
      type: "object"
      properties:
        "id":
          type: "string"
          description: "The ID of the author"
          nullable: true
          example: "123"
        "name":
          type: "string"
          description: "The name of the author"
          nullable: true
          example: "John Doe"
    CategoriesPaginated:
      type: "object"
      properties:
        "next":
          type: "string"
          nullable: true
        "data":
          type: "array"
          items: {"$ref": "#/components/schemas/Category"}
        "raw":
          type: "array"
          items: {"$ref": "#/components/schemas/RawResponse"}
          nullable: true
      required:
        - "data"
    Category:
      type: "object"
      properties:
        "id":
          type: "string"
          description: "The ID associated with this category"
          nullable: true
          example: "16873-IT345"
        "remote_id":
          type: "string"
          description: "Provider's unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "unified_custom_fields":
          type: "object"
          additionalProperties: true
          description: "Custom Unified Fields configured in your StackOne project"
          nullable: true
          example: {"my_project_custom_field_1": "REF-1236", "my_project_custom_field_2": "some other value"}
        "name":
          type: "string"
          description: "The name associated with this category"
          nullable: true
          example: "Information-Technology"
        "active":
          oneOf:
            - type: "boolean"
            - type: "string"
              enum:
                - "true"
                - "false"
          description: "Whether the category is active and therefore available for use"
          nullable: true
          example: true
        "hierarchy":
          allOf:
            - {"$ref": "#/components/schemas/CategoryLevelEnumModel"}
          description: "The hierarchal level of the category"
          nullable: true
        "level":
          allOf:
            - {"$ref": "#/components/schemas/CategoryLevelEnumModel"}
          description: "The hierarchal level of the category"
          nullable: true
          deprecated: true
        "language":
          allOf:
            - {"$ref": "#/components/schemas/LanguageEnum"}
          description: "The language associated with this category"
          nullable: true
    CategoryLevelEnumModel:
      type: "object"
      properties:
        "value":
          type: "string"
          enum:
            - "primary"
            - "secondary"
            - "tertiary"
            - "unmapped_value"
            - null
          nullable: true
          x-speakeasy-unknown-values: "allow"
        "source_value":
          oneOf:
            - type: "string"
            - type: "number"
            - type: "boolean"
            - type: "object"
            - type: "array"
              items: {}
          nullable: true
    CategoryResult:
      type: "object"
      properties:
        "data": {"$ref": "#/components/schemas/Category"}
        "raw":
          type: "array"
          items: {"$ref": "#/components/schemas/RawResponse"}
          nullable: true
      required:
        - "data"
    Completion:
      type: "object"
      properties:
        "id":
          type: "string"
          description: "The ID associated with this completion"
          nullable: true
          example: "123456"
        "remote_id":
          type: "string"
          description: "Provider's unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "unified_custom_fields":
          type: "object"
          additionalProperties: true
          description: "Custom Unified Fields configured in your StackOne project"
          nullable: true
          example: {"my_project_custom_field_1": "REF-1236", "my_project_custom_field_2": "some other value"}
        "external_reference":
          type: "string"
          description: "The external reference associated with this completion"
          nullable: true
          example: "e3gd34-23tr21-er234-345er56"
          deprecated: true
        "result":
          allOf:
            - {"$ref": "#/components/schemas/ResultStatusEnum"}
          description: "The result of the completion"
          nullable: true
        "completed_at":
          type: "string"
          description: "The date the content was completed"
          nullable: true
          example: "2021-07-21T14:00:00.000Z"
        "created_at":
          type: "string"
          description: "The created date of the completion"
          nullable: true
          example: "2021-07-21T14:00:00.000Z"
        "updated_at":
          type: "string"
          description: "The updated date of the completion"
          nullable: true
          example: "2021-07-21T14:00:00.000Z"
        "learning_object_type":
          allOf:
            - {"$ref": "#/components/schemas/LearningObjectTypeEnum"}
          description: "The learning object type of the completion"
          nullable: true
        "learning_object_id":
          type: "string"
          description: "The id of the learning object associated with this completion. This is not required unless specified in an integration."
          nullable: true
          example: "e3gd34-23tr21-er234-345er56"
        "remote_learning_object_id":
          type: "string"
          description: "Provider's unique identifier of the learning object related to the completion"
          nullable: true
          example: "e3cb55bf-aa84-466e-a6c1-b8302b257a49"
        "learning_object_external_reference":
          type: "string"
          description: "The external reference of the learning object associated with this completion, this is the main identifier for creating completions."
          nullable: true
          example: "learning-content-123"
        "user_id":
          type: "string"
          description: "The user ID associated with this completion"
          nullable: true
          example: "c28xyrc55866bvuv"
        "remote_user_id":
          type: "string"
          description: "Provider's unique identifier of the user related to the completion"
          nullable: true
          example: "e3cb75bf-aa84-466e-a6c1-b8322b257a48"
        "time_spent":
          type: "string"
          format: "string"
          description: "ISO 8601 duration format representing the time spent on completing the learning object"
          nullable: true
          example: "PT1H30M45S"
        "external_id":
          type: "string"
          description: "The external ID associated with this completion"
          nullable: true
          example: "SOFTWARE-ENG-LV1-TRAINING-VIDEO-1-COMPLETION"
          deprecated: true
        "content_external_reference":
          type: "string"
          description: "The external reference associated with this content"
          nullable: true
          example: "SOFTWARE-ENG-LV1-TRAINING-VIDEO-1-CONTENT"
          deprecated: true
        "remote_external_id":
          type: "string"
          description: "Provider's unique identifier of the content external reference"
          nullable: true
          example: "e3cb75bf-aa84-466e-a6c1-b8322b257a48"
          deprecated: true
        "content_id":
          type: "string"
          description: "The content ID associated with this completion"
          nullable: true
          example: "16873-ENG-VIDEO-1"
          deprecated: true
        "remote_content_id":
          type: "string"
          description: "Provider's unique identifier of the content associated with the completion"
          nullable: true
          example: "e3cb75bf-aa84-466e-a6c1-b8322b257a48"
          deprecated: true
        "course_id":
          type: "string"
          description: "The course ID associated with this completion"
          nullable: true
          example: "16873-ENG-COURSE-1"
          deprecated: true
        "remote_course_id":
          type: "string"
          description: "Provider's unique identifier of the course associated with the completion"
          nullable: true
          example: "e3cb75bf-aa84-466e-a6c1-b8322b257a48"
          deprecated: true
    CompletionResult:
      type: "object"
      properties:
        "data": {"$ref": "#/components/schemas/Completion"}
        "raw":
          type: "array"
          items: {"$ref": "#/components/schemas/RawResponse"}
          nullable: true
      required:
        - "data"
    CompletionsPaginated:
      type: "object"
      properties:
        "next":
          type: "string"
          nullable: true
        "data":
          type: "array"
          items: {"$ref": "#/components/schemas/Completion"}
        "raw":
          type: "array"
          items: {"$ref": "#/components/schemas/RawResponse"}
          nullable: true
      required:
        - "data"
    ContentPaginated:
      type: "object"
      properties:
        "next_page":
          type: "string"
          nullable: true
          deprecated: true
        "next":
          type: "string"
          nullable: true
        "data":
          type: "array"
          items: {"$ref": "#/components/schemas/Content"}
        "raw":
          type: "array"
          items: {"$ref": "#/components/schemas/RawResponse"}
          nullable: true
      required:
        - "data"
    ContentResult:
      type: "object"
      properties:
        "data": {"$ref": "#/components/schemas/Content"}
        "raw":
          type: "array"
          items: {"$ref": "#/components/schemas/RawResponse"}
          nullable: true
      required:
        - "data"
    ContentTypeEnum:
      type: "object"
      properties:
        "value":
          type: "string"
          enum:
            - "video"
            - "quiz"
            - "document"
            - "audio"
            - "article"
            - "unmapped_value"
            - null
          nullable: true
          x-speakeasy-unknown-values: "allow"
        "source_value":
          oneOf:
            - type: "string"
            - type: "number"
            - type: "boolean"
            - type: "object"
            - type: "array"
              items: {}
          nullable: true
    Course:
      type: "object"
      properties:
        "id":
          type: "string"
          description: "Unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "remote_id":
          type: "string"
          description: "Provider's unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "unified_custom_fields":
          type: "object"
          additionalProperties: true
          description: "Custom Unified Fields configured in your StackOne project"
          nullable: true
          example: {"my_project_custom_field_1": "REF-1236", "my_project_custom_field_2": "some other value"}
        "external_reference":
          type: "string"
          description: "The external ID associated with this course"
          nullable: true
          example: "SOFTWARE-ENG-LV1-TRAINING-VIDEO-1"
        "content_ids":
          type: "array"
          items:
            type: "string"
          description: "The child ID/IDs associated with this course"
          nullable: true
          example: ["16873-SOFTWARE-ENG-COURSE", "16874-SOFTWARE-ENG-COURSE"]
        "remote_content_ids":
          type: "array"
          items:
            type: "string"
          description: "Provider's unique identifier of the child content IDs associated with this course"
          nullable: true
          example: ["e3cb75bf-aa84-466e-a6c1-b8322b257a48", "e3cb75bf-aa84-466e-a6c1-b8322b257a49"]
        "title":
          type: "string"
          description: "The title of the course"
          nullable: true
          example: "Software Engineer Lv 1"
        "description":
          type: "string"
          description: "The description of the course"
          nullable: true
          example: "This course acts as learning content for software engineers."
        "languages":
          type: "array"
          items: {"$ref": "#/components/schemas/LanguageEnum"}
          description: "The languages associated with this course"
          nullable: true
        "cover_url":
          type: "string"
          description: "The URL of the thumbnail image associated with the course."
          nullable: true
          example: "https://www.googledrive.com/?v=16873"
        "url":
          type: "string"
          description: "The redirect URL of the course."
          nullable: true
          example: "https://www.linkedinlearning.com/?v=16873"
        "active":
          oneOf:
            - type: "boolean"
            - type: "string"
              enum:
                - "true"
                - "false"
          description: "Whether the course is active and available for users."
          nullable: true
          example: true
        "duration":
          type: "string"
          format: "string"
          description: "The duration of the course following the ISO8601 standard. If duration_unit is applicable we will derive this from the smallest unit given in the duration string"
          nullable: true
          example: "P3Y6M4DT12H30M5S"
        "categories":
          type: "array"
          items: {"$ref": "#/components/schemas/Category"}
          description: "The categories associated with this course"
          nullable: true
          example: [{"id": "12345", "name": "Technology"}]
        "skills":
          type: "array"
          items: {"$ref": "#/components/schemas/Skills"}
          description: "The skills associated with this course"
          nullable: true
          example: [{"id": "12345", "name": "Sales Techniques"}]
        "provider":
          type: "string"
          format: "string"
          description: "The name of the course provider"
          nullable: true
          example: "Course Provider"
        "authors":
          type: "array"
          items: {"$ref": "#/components/schemas/AuthorModel"}
          description: "The authors of the course"
          nullable: true
          example: [{"id": "123", "name": "John Doe"}]
        "updated_at":
          type: "string"
          description: "The date on which the course was last updated."
          nullable: true
          example: "2021-07-21T14:00:00.000Z"
        "created_at":
          type: "string"
          description: "The date on which the course was created."
          nullable: true
          example: "2021-07-21T14:00:00.000Z"
    CoursePaginated:
      type: "object"
      properties:
        "next_page":
          type: "string"
          nullable: true
          deprecated: true
        "next":
          type: "string"
          nullable: true
        "data":
          type: "array"
          items: {"$ref": "#/components/schemas/Course"}
        "raw":
          type: "array"
          items: {"$ref": "#/components/schemas/RawResponse"}
          nullable: true
      required:
        - "data"
    CourseResult:
      type: "object"
      properties:
        "data": {"$ref": "#/components/schemas/Course"}
        "raw":
          type: "array"
          items: {"$ref": "#/components/schemas/RawResponse"}
          nullable: true
      required:
        - "data"
    CreateCategoriesApiModel:
      type: "object"
      properties:
        "id":
          type: "string"
          description: "The ID associated with this category"
          nullable: true
          example: "16873-IT345"
        "unified_custom_fields":
          type: "object"
          additionalProperties: true
          description: "Custom Unified Fields configured in your StackOne project"
          nullable: true
          example: {"my_project_custom_field_1": "REF-1236", "my_project_custom_field_2": "some other value"}
        "name":
          type: "string"
          description: "The name associated with this category"
          nullable: true
          example: "Information-Technology"
        "hierarchy":
          allOf:
            - {"$ref": "#/components/schemas/CategoryLevelEnumModel"}
          description: "The hierarchal level of the category"
          nullable: true
        "level":
          allOf:
            - {"$ref": "#/components/schemas/CategoryLevelEnumModel"}
          description: "The hierarchal level of the category"
          nullable: true
          deprecated: true
        "language":
          allOf:
            - {"$ref": "#/components/schemas/LanguageEnum"}
          description: "The language associated with this category"
          nullable: true
    CreateSkillsApiModel:
      type: "object"
      properties:
        "id":
          type: "string"
          description: "The ID associated with this skill"
          nullable: true
          example: "16873-IT345"
        "name":
          type: "string"
          description: "The name associated with this skill"
          nullable: true
          example: "Information-Technology"
        "hierarchy":
          allOf:
            - {"$ref": "#/components/schemas/SkillLevelEnum"}
          description: "The hierarchal level of the skill"
          nullable: true
        "language":
          allOf:
            - {"$ref": "#/components/schemas/LanguageEnum"}
          description: "The language associated with this skill"
          nullable: true
        "level":
          allOf:
            - {"$ref": "#/components/schemas/SkillLevelEnum"}
          description: "The hierarchal level of the skill"
          nullable: true
          deprecated: true
    LearningObjectTypeEnum:
      type: "object"
      properties:
        "value":
          type: "string"
          enum:
            - "content"
            - "course"
            - "collection"
            - "unmapped_value"
            - null
          nullable: true
          x-speakeasy-unknown-values: "allow"
        "source_value":
          oneOf:
            - type: "string"
            - type: "number"
            - type: "boolean"
            - type: "object"
            - type: "array"
              items: {}
          nullable: true
    LmsBatchUpsertContentRequestDto:
      type: "object"
      properties:
        "items":
          type: "array"
          items: {"$ref": "#/components/schemas/LmsUpsertContentRequestDto"}
          description: "The batch of items to upsert"
      required:
        - "items"
    LmsCreateAssignmentRequestDto:
      type: "object"
      properties:
        "passthrough":
          type: "object"
          additionalProperties: true
          description: "Value to pass through to the provider"
          nullable: true
          example: {"other_known_names": "John Doe"}
        "external_reference":
          type: "string"
          description: "The external reference associated with this assignment"
          nullable: true
          example: "e3gd34-23tr21-er234-345er56"
          deprecated: true
        "learning_object_id":
          type: "string"
          description: "The learning_object_id associated with this assignment. This is not required unless specified in an integration."
          nullable: true
          example: "e3gd34-23tr21-er234-345er56"
        "learning_object_external_reference":
          type: "string"
          description: "The external reference of the learning object associated with this assignment, this is the main identifier for creating assignments."
          nullable: true
          example: "learning-content-123"
        "progress":
          type: "number"
          description: "The progress associated with this assigment"
          nullable: true
          example: "40"
        "created_at":
          type: "string"
          description: "The date the assignment was created"
          nullable: true
          example: "2021-07-21T14:00:00.000Z"
        "due_date":
          type: "string"
          description: "The date the assignment is due to be completed"
          nullable: true
          example: "2021-07-21T14:00:00.000Z"
        "status":
          allOf:
            - {"$ref": "#/components/schemas/AssignmentStatusEnum"}
          description: "The status of the assignment"
          nullable: true
    LmsCreateCompletionRequestDto:
      type: "object"
      properties:
        "passthrough":
          type: "object"
          additionalProperties: true
          description: "Value to pass through to the provider"
          nullable: true
          example: {"other_known_names": "John Doe"}
        "result":
          allOf:
            - {"$ref": "#/components/schemas/ResultStatusEnum"}
          description: "The result of the completion"
          nullable: true
        "completed_at":
          type: "string"
          description: "The date the content was completed"
          nullable: true
          example: "2021-07-21T14:00:00.000Z"
        "learning_object_id":
          type: "string"
          description: "The id of the learning object associated with this completion. This is not required unless specified in an integration."
          nullable: true
          example: "e3gd34-23tr21-er234-345er56"
        "learning_object_external_reference":
          type: "string"
          description: "The external reference of the learning object associated with this completion, this is the main identifier for creating completions."
          nullable: true
          example: "learning-content-123"
        "time_spent":
          type: "string"
          format: "string"
          description: "ISO 8601 duration format representing the time spent on completing the learning object"
          nullable: true
          example: "PT1H30M45S"
        "content_external_reference":
          type: "string"
          description: "The external reference associated with this content"
          nullable: true
          example: "SOFTWARE-ENG-LV1-TRAINING-VIDEO-1-CONTENT"
          deprecated: true
        "content_id":
          type: "string"
          description: "The content ID associated with this completion"
          nullable: true
          example: "16873-ENG-VIDEO-1"
          deprecated: true
    LmsCreateContentRequestDto:
      type: "object"
      properties:
        "unified_custom_fields":
          type: "object"
          additionalProperties: true
          description: "Custom Unified Fields configured in your StackOne project"
          nullable: true
          example: {"my_project_custom_field_1": "REF-1236", "my_project_custom_field_2": "some other value"}
        "external_reference":
          type: "string"
          description: "The external ID associated with this content"
          nullable: true
          example: "SOFTWARE-ENG-LV1-TRAINING-VIDEO-1"
        "title":
          type: "string"
          description: "The title of the content"
          nullable: true
          example: "Software Engineer Lv 1"
        "description":
          type: "string"
          description: "The description of the content"
          nullable: true
          example: "This video acts as learning content for software engineers."
        "languages":
          type: "array"
          items: {"$ref": "#/components/schemas/LanguageEnum"}
          description: "The languages associated with this content"
          nullable: true
        "content_url":
          type: "string"
          description: "The external URL of the content"
          nullable: true
          example: "https://www.youtube.com/watch?v=16873"
        "mobile_launch_content_url":
          type: "string"
          description: "The mobile friendly URL of the content"
          nullable: true
          example: "https://www.mobile.youtube.com/watch?v=16873"
        "content_type":
          allOf:
            - {"$ref": "#/components/schemas/ContentTypeEnum"}
          description: "The type of content"
          nullable: true
        "cover_url":
          type: "string"
          description: "The URL of the thumbnail image associated with the content."
          nullable: true
          example: "https://www.googledrive.com/?v=16873"
        "active":
          oneOf:
            - type: "boolean"
            - type: "string"
              enum:
                - "true"
                - "false"
          description: "Whether the content is active and available for users."
          nullable: true
          example: true
        "duration":
          type: "string"
          format: "string"
          description: "The duration of the content following the ISO8601 standard. If duration_unit is applicable we will derive this from the smallest unit given in the duration string or the minimum unit accepted by the provider."
          nullable: true
          example: "P3Y6M4DT12H30M5S"
        "skills":
          type: "array"
          items: {"$ref": "#/components/schemas/CreateSkillsApiModel"}
          description: "The skills associated with this content"
          nullable: true
          example: [{"id": "12345", "name": "Sales Techniques"}]
        "order":
          type: "number"
          format: "number"
          description: "The order of the individual content within a content grouping. This is not applicable for pushing individual content."
          nullable: true
          example: 1
        "short_description":
          type: "string"
          description: "A short description or summary for the content"
          nullable: true
          example: "This course is a valuable resource and acts as learning content for..."
          deprecated: true
        "localizations":
          type: "array"
          items: {"$ref": "#/components/schemas/LocalizationModel"}
          description: "The localization data for this content"
          nullable: true
          example: [{"title": "Software Engineer Lv 1", "description": "This course acts as learning resource for software engineers.", "languages": {"value": "en-GB", "source_value": "string"}}, {"title": "Software Engineer Lv 1", "description": "This video acts as learning content for software engineers.", "languages": {"value": "en-US", "source_value": "string"}}]
        "tags":
          type: "array"
          items:
            type: "string"
          description: "A list of tags associated with the content"
          nullable: true
          example: ["Sales Techniques", "Customer Service"]
        "authors":
          type: "array"
          items: {"$ref": "#/components/schemas/AuthorModel"}
          description: "The authors of the content"
          nullable: true
          example: [{"id": "123", "name": "John Doe"}]
        "updated_at":
          type: "string"
          format: "date-time"
          description: "The date on which the content was last updated."
          nullable: true
          example: "2021-07-21T14:00:00.000Z"
        "created_at":
          type: "string"
          format: "date-time"
          description: "The date on which the content was created."
          nullable: true
          example: "2021-07-21T14:00:00.000Z"
        "categories":
          type: "array"
          items: {"$ref": "#/components/schemas/CreateCategoriesApiModel"}
          description: "The categories associated with this content"
          nullable: true
          example: [{"name": "Technology"}]
        "additional_data":
          type: "array"
          items: {"$ref": "#/components/schemas/AdditionalData"}
          description: "The additional_data associated with this content"
          nullable: true
    LmsUpsertContentRequestDto:
      type: "object"
      properties:
        "unified_custom_fields":
          type: "object"
          additionalProperties: true
          description: "Custom Unified Fields configured in your StackOne project"
          nullable: true
          example: {"my_project_custom_field_1": "REF-1236", "my_project_custom_field_2": "some other value"}
        "external_reference":
          type: "string"
          description: "The external ID associated with this content"
          nullable: true
          example: "SOFTWARE-ENG-LV1-TRAINING-VIDEO-1"
        "title":
          type: "string"
          description: "The title of the content"
          nullable: true
          example: "Software Engineer Lv 1"
        "description":
          type: "string"
          description: "The description of the content"
          nullable: true
          example: "This video acts as learning content for software engineers."
        "languages":
          type: "array"
          items: {"$ref": "#/components/schemas/LanguageEnum"}
          description: "The languages associated with this content"
          nullable: true
        "content_url":
          type: "string"
          description: "The external URL of the content"
          nullable: true
          example: "https://www.youtube.com/watch?v=16873"
        "mobile_launch_content_url":
          type: "string"
          description: "The mobile friendly URL of the content"
          nullable: true
          example: "https://www.mobile.youtube.com/watch?v=16873"
        "content_type":
          allOf:
            - {"$ref": "#/components/schemas/ContentTypeEnum"}
          description: "The type of content"
          nullable: true
        "cover_url":
          type: "string"
          description: "The URL of the thumbnail image associated with the content."
          nullable: true
          example: "https://www.googledrive.com/?v=16873"
        "active":
          oneOf:
            - type: "boolean"
            - type: "string"
              enum:
                - "true"
                - "false"
          description: "Whether the content is active and available for users."
          nullable: true
          example: true
        "duration":
          type: "string"
          format: "string"
          description: "The duration of the content following the ISO8601 standard. If duration_unit is applicable we will derive this from the smallest unit given in the duration string or the minimum unit accepted by the provider."
          nullable: true
          example: "P3Y6M4DT12H30M5S"
        "skills":
          type: "array"
          items: {"$ref": "#/components/schemas/CreateSkillsApiModel"}
          description: "The skills associated with this content"
          nullable: true
          example: [{"id": "12345", "name": "Sales Techniques"}]
        "order":
          type: "number"
          format: "number"
          description: "The order of the individual content within a content grouping. This is not applicable for pushing individual content."
          nullable: true
          example: 1
        "short_description":
          type: "string"
          description: "A short description or summary for the content"
          nullable: true
          example: "This course is a valuable resource and acts as learning content for..."
          deprecated: true
        "localizations":
          type: "array"
          items: {"$ref": "#/components/schemas/LocalizationModel"}
          description: "The localization data for this course"
          nullable: true
          example: [{"title": "Software Engineer Lv 1", "description": "This course acts as learning resource for software engineers.", "languages": {"value": "en-GB", "source_value": "string"}}, {"title": "Software Engineer: A comprehensive guide", "description": "This course acts as learning resource for software engineers.", "languages": {"value": "en-US", "source_value": "string"}}]
        "tags":
          type: "array"
          items:
            type: "string"
          description: "A list of tags associated with the content"
          nullable: true
          example: ["Sales Techniques", "Customer Service"]
        "authors":
          type: "array"
          items: {"$ref": "#/components/schemas/AuthorModel"}
          description: "The authors of the content"
          nullable: true
          example: [{"id": "123", "name": "John Doe"}]
        "updated_at":
          type: "string"
          format: "date-time"
          description: "The date on which the content was last updated."
          nullable: true
          example: "2021-07-21T14:00:00.000Z"
        "created_at":
          type: "string"
          format: "date-time"
          description: "The date on which the content was created."
          nullable: true
          example: "2021-07-21T14:00:00.000Z"
        "categories":
          type: "array"
          items: {"$ref": "#/components/schemas/CreateCategoriesApiModel"}
          description: "The categories associated with this content"
          nullable: true
        "additional_data":
          type: "array"
          items: {"$ref": "#/components/schemas/AdditionalData"}
          description: "The additional_data associated with this content"
          nullable: true
    LmsUser:
      type: "object"
      properties:
        "id":
          type: "string"
          description: "Unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "remote_id":
          type: "string"
          description: "Provider's unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "unified_custom_fields":
          type: "object"
          additionalProperties: true
          description: "Custom Unified Fields configured in your StackOne project"
          nullable: true
          example: {"my_project_custom_field_1": "REF-1236", "my_project_custom_field_2": "some other value"}
        "external_reference":
          type: "string"
          description: "The external ID associated with this user"
          nullable: true
          example: "al60043"
        "name":
          type: "string"
          description: "The user name"
          nullable: true
          example: "John Dew"
        "email":
          type: "string"
          description: "The user email"
          nullable: true
          example: "john@dew.com"
        "phone_number":
          type: "string"
          description: "The user phone number"
          nullable: true
          example: "+1234567890"
        "active":
          oneOf:
            - type: "boolean"
            - type: "string"
              enum:
                - "true"
                - "false"
          description: "The user active status"
          nullable: true
          example: true
        "created_at":
          type: "string"
          format: "date-time"
          description: "The created_at date"
          nullable: true
          example: "2021-01-01T01:01:01.000Z"
        "updated_at":
          type: "string"
          format: "date-time"
          description: "The updated_at date"
          nullable: true
          example: "2021-01-01T01:01:01.000Z"
    LocalizationModel:
      type: "object"
      properties:
        "title":
          type: "string"
          description: "The title of the content"
          nullable: true
          example: "Software Engineer Lv 1"
        "description":
          type: "string"
          description: "The description of the content"
          nullable: true
          example: "This video acts as learning content for software engineers."
        "language":
          allOf:
            - {"$ref": "#/components/schemas/LanguageEnum"}
          description: "The language associated with the localization details"
          nullable: true
        "tags":
          type: "array"
          items:
            type: "string"
          description: "The tags associated with the localization details"
          nullable: true
          example: ["Sales Techniques", "Customer Service"]
    ResultStatusEnum:
      type: "object"
      properties:
        "value":
          type: "string"
          enum:
            - "Pass"
            - "Fail"
            - "unmapped_value"
            - null
          nullable: true
          x-speakeasy-unknown-values: "allow"
        "source_value":
          oneOf:
            - type: "string"
            - type: "number"
            - type: "boolean"
            - type: "object"
            - type: "array"
              items: {}
          nullable: true
    SkillLevelEnum:
      type: "object"
      properties:
        "value":
          type: "string"
          enum:
            - "primary"
            - "secondary"
            - "tertiary"
            - "unmapped_value"
            - null
          nullable: true
          x-speakeasy-unknown-values: "allow"
        "source_value":
          oneOf:
            - type: "string"
            - type: "number"
            - type: "boolean"
            - type: "object"
            - type: "array"
              items: {}
          nullable: true
    SkillResult:
      type: "object"
      properties:
        "data": {"$ref": "#/components/schemas/Skills"}
        "raw":
          type: "array"
          items: {"$ref": "#/components/schemas/RawResponse"}
          nullable: true
      required:
        - "data"
    Skills:
      type: "object"
      properties:
        "id":
          type: "string"
          description: "The ID associated with this skill"
          nullable: true
          example: "16873-IT345"
        "remote_id":
          type: "string"
          description: "Provider's unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "name":
          type: "string"
          description: "The name associated with this skill"
          nullable: true
          example: "Information-Technology"
        "active":
          oneOf:
            - type: "boolean"
            - type: "string"
              enum:
                - "true"
                - "false"
          description: "Whether the skill is active and therefore available for use"
          nullable: true
          example: true
        "hierarchy":
          allOf:
            - {"$ref": "#/components/schemas/SkillLevelEnum"}
          description: "The hierarchal level of the skill"
          nullable: true
        "language":
          allOf:
            - {"$ref": "#/components/schemas/LanguageEnum"}
          description: "The language associated with this skill"
          nullable: true
        "level":
          allOf:
            - {"$ref": "#/components/schemas/SkillLevelEnum"}
          description: "The hierarchal level of the skill"
          nullable: true
          deprecated: true
    SkillsPaginated:
      type: "object"
      properties:
        "next":
          type: "string"
          nullable: true
        "data":
          type: "array"
          items: {"$ref": "#/components/schemas/Skills"}
        "raw":
          type: "array"
          items: {"$ref": "#/components/schemas/RawResponse"}
          nullable: true
      required:
        - "data"
    UpsertResult:
      type: "object"
      properties:
        "statusCode":
          type: "number"
          example: 201
        "message":
          type: "string"
          example: "Record created successfully."
        "timestamp":
          type: "string"
          format: "date-time"
          example: "2021-01-01T01:01:01.000Z"
        "data": {"$ref": "#/components/schemas/UpsertResultDataExternalReferenceModel"}
      required:
        - "statusCode"
        - "message"
        - "timestamp"
        - "data"
    UpsertResultDataExternalReferenceModel:
      type: "object"
      properties:
        "id":
          type: "string"
          description: "Unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "remote_id":
          type: "string"
          description: "Provider's unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "external_reference":
          type: "string"
          description: "The external identifier"
          nullable: true
          example: "SOFTWARE-ENG-LV1-TRAINING-VIDEO-1"
    TicketingAttachment:
      type: "object"
      properties:
        "id":
          type: "string"
          description: "Unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "remote_id":
          type: "string"
          description: "Provider's unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "ticket_id":
          type: "string"
          description: "The reference ticket ID the attachment belongs to"
          nullable: true
          example: "ticket-001"
        "user_id":
          type: "string"
          description: "The user who uploaded the file"
          nullable: true
          example: "user-001"
        "file_name":
          type: "string"
          description: "The name of the file"
          nullable: true
          example: "file.pdf"
        "file_format":
          allOf:
            - {"$ref": "#/components/schemas/FileFormatEnum"}
          description: "The type of the file"
          nullable: true
        "file_url":
          type: "string"
          description: "The resource URL of the file"
          nullable: true
          example: "https://example.com/files/screenshot.png"
        "size":
          type: "number"
          description: "The size of the file"
          nullable: true
          example: 1024
        "created_at":
          type: "string"
          format: "date-time"
          description: "The timestamp when the record was created"
          nullable: true
          example: "2021-01-01T01:01:01.000Z"
        "updated_at":
          type: "string"
          format: "date-time"
          description: "The timestamp when the record was last updated"
          nullable: true
          example: "2021-01-01T01:01:01.000Z"
    TicketingAttachmentResult:
      type: "object"
      properties:
        "data":
          allOf:
            - {"$ref": "#/components/schemas/TicketingAttachment"}
          nullable: true
        "raw":
          type: "array"
          items: {"$ref": "#/components/schemas/RawResponse"}
          nullable: true
    TicketingAttachmentsPaginated:
      type: "object"
      properties:
        "next":
          type: "string"
          nullable: true
        "data":
          type: "array"
          items: {"$ref": "#/components/schemas/TicketingAttachment"}
          nullable: true
        "raw":
          type: "array"
          items: {"$ref": "#/components/schemas/RawResponse"}
          nullable: true
    TicketingCollection:
      type: "object"
      properties:
        "id":
          type: "string"
          description: "Unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "remote_id":
          type: "string"
          description: "Provider's unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "parent_id":
          type: "string"
          description: "The parent collection of the collection"
          nullable: true
          example: "collection-001"
        "name":
          type: "string"
          description: "The name of the collection"
          nullable: true
          example: "Project Falcon"
        "description":
          type: "string"
          description: "The description of the collection"
          nullable: true
          example: "Description of the project"
        "key":
          type: "string"
          description: "The user-friendly key of the collection"
          nullable: true
          example: "project-falcon"
        "type":
          type: "string"
          enum:
            - "project"
            - "component"
            - "unmapped_value"
            - null
          description: "The type of the collection."
          nullable: true
          example: "project"
          x-speakeasy-unknown-values: "allow"
        "organization_id":
          type: "string"
          description: "The organization id related to the collection"
          nullable: true
          example: "organization-001"
        "created_at":
          type: "string"
          format: "date-time"
          description: "The timestamp when the record was created"
          nullable: true
          example: "2021-01-01T01:01:01.000Z"
        "updated_at":
          type: "string"
          format: "date-time"
          description: "The timestamp when the record was last updated"
          nullable: true
          example: "2021-01-01T01:01:01.000Z"
    TicketingCollectionResult:
      type: "object"
      properties:
        "data":
          allOf:
            - {"$ref": "#/components/schemas/TicketingCollection"}
          nullable: true
        "raw":
          type: "array"
          items: {"$ref": "#/components/schemas/RawResponse"}
          nullable: true
    TicketingCollectionsPaginated:
      type: "object"
      properties:
        "next":
          type: "string"
          nullable: true
        "data":
          type: "array"
          items: {"$ref": "#/components/schemas/TicketingCollection"}
          nullable: true
        "raw":
          type: "array"
          items: {"$ref": "#/components/schemas/RawResponse"}
          nullable: true
    TicketingComment:
      type: "object"
      properties:
        "id":
          type: "string"
          description: "Unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "remote_id":
          type: "string"
          description: "Provider's unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "ticket_id":
          type: "string"
          description: "The ticket ID associated with the comment"
          example: "ticket-001"
        "user_id":
          type: "string"
          description: "The user who created the comment"
          nullable: true
          example: "user-001"
        "internal":
          type: "boolean"
          description: "Whether the comment is internal"
          nullable: true
          example: false
        "content":
          type: "array"
          items: {"$ref": "#/components/schemas/TicketingContent"}
          description: "Array of content associated with the comment"
          nullable: true
        "created_at":
          type: "string"
          format: "date-time"
          description: "The timestamp when the record was created"
          nullable: true
          example: "2021-01-01T01:01:01.000Z"
        "updated_at":
          type: "string"
          format: "date-time"
          description: "The timestamp when the record was last updated"
          nullable: true
          example: "2021-01-01T01:01:01.000Z"
      required:
        - "ticket_id"
    TicketingCommentResult:
      type: "object"
      properties:
        "data":
          allOf:
            - {"$ref": "#/components/schemas/TicketingComment"}
          nullable: true
        "raw":
          type: "array"
          items: {"$ref": "#/components/schemas/RawResponse"}
          nullable: true
    TicketingCommentsPaginated:
      type: "object"
      properties:
        "next":
          type: "string"
          nullable: true
        "data":
          type: "array"
          items: {"$ref": "#/components/schemas/TicketingComment"}
          nullable: true
        "raw":
          type: "array"
          items: {"$ref": "#/components/schemas/RawResponse"}
          nullable: true
    TicketingContent:
      type: "object"
      properties:
        "plain":
          type: "string"
          description: "The content of the ticket"
          nullable: true
          example: "This is some content"
        "html":
          type: "string"
          description: "The HTML content of the ticket"
          nullable: true
          example: "<p>This is some content</p>"
    TicketingOrganization:
      type: "object"
      properties:
        "id":
          type: "string"
          description: "Unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "remote_id":
          type: "string"
          description: "Provider's unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "domain":
          type: "string"
          description: "The domain of the organization"
          nullable: true
          example: "company.com"
        "name":
          type: "string"
          description: "The name of the organization"
          nullable: true
          example: "Company"
    TicketingReadTicket:
      type: "object"
      properties:
        "id":
          type: "string"
          description: "Unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "remote_id":
          type: "string"
          description: "Provider's unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "unified_custom_fields":
          type: "object"
          additionalProperties: true
          description: "Custom Unified Fields configured in your StackOne project"
          nullable: true
          example: {"my_project_custom_field_1": "REF-1236", "my_project_custom_field_2": "some other value"}
        "title":
          type: "string"
          description: "The title or subject of the ticket"
          nullable: true
          example: "System outage in production environment"
        "creator_id":
          type: "string"
          description: "The creator of the ticket"
          nullable: true
          example: "user-001"
        "reporters":
          type: "array"
          items:
            type: "string"
          description: "Users who reported the ticket"
          nullable: true
          example: ["user-001", "user-002"]
        "assignees":
          type: "array"
          items:
            type: "string"
          description: "Agents assigned to the ticket"
          nullable: true
          example: ["user-001", "user-002"]
        "content":
          type: "array"
          items: {"$ref": "#/components/schemas/TicketingContent"}
          description: "Array of content associated with the ticket"
          nullable: true
        "parent_id":
          type: "string"
          description: "ID of the parent ticket if this is a sub-ticket"
          nullable: true
          example: "ticket-002"
        "priority":
          allOf:
            - {"$ref": "#/components/schemas/TicketingTicketPriorityTypeEnum"}
          description: "Priority of the ticket"
          nullable: true
        "tags":
          type: "array"
          items:
            type: "string"
          description: "The tags of the ticket"
          nullable: true
          example: ["tag-001", "tag-002"]
        "collections":
          type: "array"
          items: {"$ref": "#/components/schemas/TicketingCollection"}
          description: "Collections the ticket belongs to"
          nullable: true
        "ticket_number":
          type: "string"
          description: "The unique ticket number or reference ID"
          nullable: true
          example: "ticket-001"
        "type":
          allOf:
            - {"$ref": "#/components/schemas/TicketingTicketType"}
          description: "The type of the ticket"
          nullable: true
        "closed_at":
          type: "string"
          format: "date-time"
          description: "The date the ticket was closed"
          nullable: true
          example: "2021-01-01T01:01:01.000Z"
        "ticket_url":
          type: "string"
          description: "URL to view the ticket in the source system"
          nullable: true
          example: "https://help.company.com/tickets/SUP-5689"
        "status":
          allOf:
            - {"$ref": "#/components/schemas/TicketingTicketStatus"}
          description: "Current status of the ticket"
          nullable: true
        "organization":
          allOf:
            - {"$ref": "#/components/schemas/TicketingOrganization"}
          description: "Organization associated with the ticket"
          nullable: true
        "created_at":
          type: "string"
          format: "date-time"
          description: "The timestamp when the record was created"
          nullable: true
          example: "2021-01-01T01:01:01.000Z"
        "updated_at":
          type: "string"
          format: "date-time"
          description: "The timestamp when the record was last updated"
          nullable: true
          example: "2021-01-01T01:01:01.000Z"
    TicketingTicketCreateRequestDto:
      type: "object"
      properties:
        "unified_custom_fields":
          type: "object"
          additionalProperties: true
          description: "Custom Unified Fields configured in your StackOne project"
          nullable: true
          example: {"my_project_custom_field_1": "REF-1236", "my_project_custom_field_2": "some other value"}
        "title":
          type: "string"
          description: "The title or subject of the ticket"
          nullable: true
          example: "System outage in production environment"
        "creator_id":
          type: "string"
          description: "The creator of the ticket"
          nullable: true
          example: "user-001"
        "reporters":
          type: "array"
          items:
            type: "string"
          description: "Users who reported the ticket"
          nullable: true
          example: ["user-001", "user-002"]
        "assignees":
          type: "array"
          items:
            type: "string"
          description: "Agents assigned to the ticket"
          nullable: true
          example: ["user-001", "user-002"]
        "content":
          type: "array"
          items: {"$ref": "#/components/schemas/TicketingContent"}
          description: "Array of content associated with the ticket"
          nullable: true
        "parent_id":
          type: "string"
          description: "ID of the parent ticket if this is a sub-ticket"
          nullable: true
          example: "ticket-002"
        "priority":
          allOf:
            - {"$ref": "#/components/schemas/TicketingTicketPriorityTypeEnum"}
          description: "Priority of the ticket"
          nullable: true
        "tags":
          type: "array"
          items:
            type: "string"
          description: "The tags of the ticket"
          nullable: true
          example: ["tag-001", "tag-002"]
        "collection_ids":
          type: "array"
          items:
            type: "string"
          description: "Collections the ticket belongs to"
          nullable: true
          example: ["collection-001", "collection-002"]
        "type":
          type: "string"
          description: "The type of the ticket"
          nullable: true
          example: "ticket-type-001"
        "organization_id":
          type: "string"
          description: "Organization associated with the ticket"
          nullable: true
          example: "organization-001"
    TicketingTicketPriorityTypeEnum:
      type: "object"
      properties:
        "id":
          type: "string"
          description: "The id of the ticket priority."
          nullable: true
          example: "001"
        "value":
          type: "string"
          enum:
            - "lowest"
            - "low"
            - "medium"
            - "high"
            - "highest"
            - "unmapped_value"
            - null
          description: "The priority of the ticket."
          nullable: true
          example: "medium"
          x-speakeasy-unknown-values: "allow"
        "source_value":
          oneOf:
            - type: "string"
            - type: "number"
            - type: "boolean"
            - type: "object"
            - type: "array"
              items: {}
          description: "The source value of the ticket priority."
          nullable: true
          example: "Normal"
    TicketingTicketResult:
      type: "object"
      properties:
        "data":
          allOf:
            - {"$ref": "#/components/schemas/TicketingReadTicket"}
          nullable: true
        "raw":
          type: "array"
          items: {"$ref": "#/components/schemas/RawResponse"}
          nullable: true
    TicketingTicketsPaginated:
      type: "object"
      properties:
        "next":
          type: "string"
          nullable: true
        "data":
          type: "array"
          items: {"$ref": "#/components/schemas/TicketingReadTicket"}
          nullable: true
        "raw":
          type: "array"
          items: {"$ref": "#/components/schemas/RawResponse"}
          nullable: true
    TicketingTicketStatus:
      type: "object"
      properties:
        "id":
          type: "string"
          description: "The id of the ticket status."
          nullable: true
          example: "001"
        "type":
          allOf:
            - {"$ref": "#/components/schemas/TicketingTicketStatusTypeEnum"}
          description: "The type of this status"
          nullable: true
        "name":
          type: "string"
          description: "The name of the ticket status."
          nullable: true
          example: "Backlog"
    TicketingTicketStatusesPaginated:
      type: "object"
      properties:
        "next":
          type: "string"
          nullable: true
        "data":
          type: "array"
          items: {"$ref": "#/components/schemas/TicketingTicketStatus"}
          nullable: true
        "raw":
          type: "array"
          items: {"$ref": "#/components/schemas/RawResponse"}
          nullable: true
    TicketingTicketStatusTypeEnum:
      type: "object"
      properties:
        "value":
          type: "string"
          enum:
            - "to-do"
            - "in-progress"
            - "closed"
            - "unmapped_value"
            - null
          description: "The type of this status"
          nullable: true
          example: "to-do"
          x-speakeasy-unknown-values: "allow"
        "source_value":
          oneOf:
            - type: "string"
            - type: "number"
            - type: "boolean"
            - type: "object"
            - type: "array"
              items: {}
          description: "The source value of this status type"
          nullable: true
          example: "New"
    TicketingTicketType:
      type: "object"
      properties:
        "id":
          type: "string"
          description: "The id of the ticket type."
          nullable: true
          example: "001"
        "name":
          type: "string"
          description: "The name of the ticket type."
          nullable: true
          example: "Task"
        "parent_collection_id":
          type: "string"
          description: "The collection the ticket type belongs to."
          nullable: true
          example: "collection-001"
    TicketingTicketTypePaginated:
      type: "object"
      properties:
        "next":
          type: "string"
          nullable: true
        "data":
          type: "array"
          items: {"$ref": "#/components/schemas/TicketingTicketType"}
          nullable: true
        "raw":
          type: "array"
          items: {"$ref": "#/components/schemas/RawResponse"}
          nullable: true
    TicketingTicketTypeResult:
      type: "object"
      properties:
        "data":
          allOf:
            - {"$ref": "#/components/schemas/TicketingTicketType"}
          nullable: true
        "raw":
          type: "array"
          items: {"$ref": "#/components/schemas/RawResponse"}
          nullable: true
    TicketingTicketUpdateRequestDto:
      type: "object"
      properties:
        "unified_custom_fields":
          type: "object"
          additionalProperties: true
          description: "Custom Unified Fields configured in your StackOne project"
          nullable: true
          example: {"my_project_custom_field_1": "REF-1236", "my_project_custom_field_2": "some other value"}
        "title":
          type: "string"
          description: "The title or subject of the ticket"
          nullable: true
          example: "System outage in production environment"
        "reporters":
          type: "array"
          items:
            type: "string"
          description: "Users who reported the ticket"
          nullable: true
          example: ["user-001", "user-002"]
        "assignees":
          type: "array"
          items:
            type: "string"
          description: "Agents assigned to the ticket"
          nullable: true
          example: ["user-001", "user-002"]
        "content":
          type: "array"
          items: {"$ref": "#/components/schemas/TicketingContent"}
          description: "Array of content associated with the ticket"
          nullable: true
        "parent_id":
          type: "string"
          description: "ID of the parent ticket if this is a sub-ticket"
          nullable: true
          example: "ticket-002"
        "priority":
          allOf:
            - {"$ref": "#/components/schemas/TicketingTicketPriorityTypeEnum"}
          description: "Priority of the ticket"
          nullable: true
        "tags":
          type: "array"
          items:
            type: "string"
          description: "The tags of the ticket"
          nullable: true
          example: ["tag-001", "tag-002"]
        "collection_ids":
          type: "array"
          items:
            type: "string"
          description: "Collections the ticket belongs to"
          nullable: true
          example: ["collection-001", "collection-002"]
        "status":
          allOf:
            - {"$ref": "#/components/schemas/TicketingTicketStatus"}
          description: "Current status of the ticket"
          nullable: true
    TicketingUser:
      type: "object"
      properties:
        "id":
          type: "string"
          description: "Unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "remote_id":
          type: "string"
          description: "Provider's unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "type":
          allOf:
            - {"$ref": "#/components/schemas/TicketingUserTypeEnum"}
          nullable: true
        "name":
          type: "string"
          description: "John Doe"
          nullable: true
          example: "John Doe"
        "primary_email":
          type: "string"
          description: "The user's primary email address"
          nullable: true
          example: "john.doe@example.com"
        "primary_phone":
          type: "string"
          description: "The user's primary phone number"
          nullable: true
          example: "555-5555-5555"
        "username":
          type: "string"
          description: "The username of the user in the provider system"
          nullable: true
          example: "johndoe"
        "active":
          type: "boolean"
          description: "If the user is active"
          nullable: true
          example: true
        "first_name":
          type: "string"
          description: "The first name of the user"
          nullable: true
          example: "John"
        "last_name":
          type: "string"
          description: "The last name of the user"
          nullable: true
          example: "Doe"
        "customer_account_reference":
          type: "string"
          description: "The unique account reference assigned as an external user (e.g. the customer account identifier registered on the customer-facing site or portal)"
          nullable: true
          example: "JohnDoe123"
        "created_at":
          type: "string"
          format: "date-time"
          description: "The timestamp when the record was created"
          nullable: true
          example: "2021-01-01T01:01:01.000Z"
        "updated_at":
          type: "string"
          format: "date-time"
          description: "The timestamp when the record was last updated"
          nullable: true
          example: "2021-01-01T01:01:01.000Z"
    TicketingUserResult:
      type: "object"
      properties:
        "data":
          allOf:
            - {"$ref": "#/components/schemas/TicketingUser"}
          nullable: true
        "raw":
          type: "array"
          items: {"$ref": "#/components/schemas/RawResponse"}
          nullable: true
    TicketingUsersPaginated:
      type: "object"
      properties:
        "next":
          type: "string"
          nullable: true
        "data":
          type: "array"
          items: {"$ref": "#/components/schemas/TicketingUser"}
          nullable: true
        "raw":
          type: "array"
          items: {"$ref": "#/components/schemas/RawResponse"}
          nullable: true
    TicketingUserTypeEnum:
      type: "object"
      properties:
        "value":
          type: "string"
          enum:
            - "agent"
            - "contact"
            - "bot"
            - "unmapped_value"
            - null
          description: "The type of the user."
          nullable: true
          example: "agent"
          x-speakeasy-unknown-values: "allow"
        "source_value":
          oneOf:
            - type: "string"
            - type: "number"
            - type: "boolean"
            - type: "object"
            - type: "array"
              items: {}
          description: "The source value of the user type."
          nullable: true
          example: "Live"
    DriveResult:
      type: "object"
      properties:
        "data": {"$ref": "#/components/schemas/Drives"}
        "raw":
          type: "array"
          items: {"$ref": "#/components/schemas/RawResponse"}
          nullable: true
      required:
        - "data"
    Drives:
      type: "object"
      properties:
        "id":
          type: "string"
          description: "The ID associated with this drive"
          nullable: true
          example: "16873-IT345"
        "remote_id":
          type: "string"
          description: "Provider's unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "name":
          type: "string"
          description: "The name associated with this drive"
          nullable: true
          example: "USA Development Drive"
        "description":
          type: "string"
          description: "The description associated with this drive"
          nullable: true
          example: "Drive with USA Development documents"
        "url":
          type: "string"
          description: "The url of the drive"
          nullable: true
          example: "https://test.sharepoint.com/Document%20Library"
        "created_at":
          type: "string"
          format: "date-time"
          description: "The created date of the drive"
          nullable: true
          example: "2023-02-23T00:00:00.000Z"
        "updated_at":
          type: "string"
          format: "date-time"
          description: "The last updated date of the drive"
          nullable: true
          example: "2024-02-23T00:00:00.000Z"
    DrivesPaginated:
      type: "object"
      properties:
        "next":
          type: "string"
          nullable: true
        "data":
          type: "array"
          items: {"$ref": "#/components/schemas/Drives"}
        "raw":
          type: "array"
          items: {"$ref": "#/components/schemas/RawResponse"}
          nullable: true
      required:
        - "data"
    FileResult:
      type: "object"
      properties:
        "data": {"$ref": "#/components/schemas/Files"}
        "raw":
          type: "array"
          items: {"$ref": "#/components/schemas/RawResponse"}
          nullable: true
      required:
        - "data"
    Files:
      type: "object"
      properties:
        "id":
          type: "string"
          description: "Unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "remote_id":
          type: "string"
          description: "Provider's unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "name":
          type: "string"
          description: "The name associated with this file"
          nullable: true
          example: "Information-Technology"
        "description":
          type: "string"
          description: "The description of the file"
          nullable: true
          example: "This is the description associated to the file."
        "size":
          type: "number"
          description: "The size of this file"
          nullable: true
          example: 1024
        "url":
          type: "string"
          description: "The url of the file"
          nullable: true
          example: "https://drive.google.com/file/d/nd8932h9d/view"
        "file_format":
          allOf:
            - {"$ref": "#/components/schemas/FileFormatEnum"}
          description: "The file format of the file"
          nullable: true
        "path":
          type: "string"
          description: "The path where the file is stored"
          nullable: true
          example: "/path/to/file"
        "owner_id":
          type: "string"
          description: "The user ID of owner of this file"
          nullable: true
          example: "c28xyrc55866bvuv"
        "export_formats":
          type: "array"
          items:
            type: "string"
          description: "List of supported export formats"
          nullable: true
          example: ["application/pdf"]
        "default_download_format":
          type: "string"
          description: "Default download format"
          nullable: true
          example: "application/pdf"
        "remote_owner_id":
          type: "string"
          description: "Provider's unique identifier of the owner of this file"
          nullable: true
          example: "e3cb75bf-aa84-466e-a6c1-b8322b257a48"
        "folder_id":
          type: "string"
          description: "The parent folder ID associated with this file"
          nullable: true
          example: "c28xyrc55866bvuv"
        "remote_folder_id":
          type: "string"
          description: "Provider's unique identifier of the parent folder associated with this file"
          nullable: true
          example: "e3cb75bf-aa84-466e-a6c1-b8322b257a48"
        "drive_id":
          type: "string"
          description: "The parent drive ID associated with this file"
          nullable: true
          example: "c28xyrc55866bvuv"
        "remote_drive_id":
          type: "string"
          description: "Provider's unique identifier of the parent drive associated with this file"
          nullable: true
          example: "e3cb75bf-aa84-466e-a6c1-b8322b257a48"
        "created_at":
          type: "string"
          format: "date-time"
          description: "The created date of the file"
          nullable: true
          example: "2023-02-23T00:00:00.000Z"
        "updated_at":
          type: "string"
          format: "date-time"
          description: "The last updated date of the file"
          nullable: true
          example: "2024-02-23T00:00:00.000Z"
        "has_content":
          oneOf:
            - type: "boolean"
            - type: "string"
              enum:
                - "true"
                - "false"
          description: "Whether the file has content"
          nullable: true
          example: true
        "has_children":
          oneOf:
            - type: "boolean"
            - type: "string"
              enum:
                - "true"
                - "false"
          description: "Whether the file has children"
          nullable: true
          example: true
    FilesPaginated:
      type: "object"
      properties:
        "next":
          type: "string"
          nullable: true
        "data":
          type: "array"
          items: {"$ref": "#/components/schemas/Files"}
        "raw":
          type: "array"
          items: {"$ref": "#/components/schemas/RawResponse"}
          nullable: true
      required:
        - "data"
    FolderResult:
      type: "object"
      properties:
        "data": {"$ref": "#/components/schemas/Folders"}
        "raw":
          type: "array"
          items: {"$ref": "#/components/schemas/RawResponse"}
          nullable: true
      required:
        - "data"
    Folders:
      type: "object"
      properties:
        "id":
          type: "string"
          description: "Unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "remote_id":
          type: "string"
          description: "Provider's unique identifier"
          nullable: true
          example: "8187e5da-dc77-475e-9949-af0f1fa4e4e3"
        "name":
          type: "string"
          description: "The name associated with this folder"
          nullable: true
          example: "Information-Technology"
        "description":
          type: "string"
          description: "The description of the folder"
          nullable: true
          example: "This is the description associated to the folder."
        "size":
          type: "number"
          description: "The size of this folder in bytes"
          nullable: true
          example: 1024
        "url":
          type: "string"
          description: "The url of the folder"
          nullable: true
          example: "https://drive.google.com/folder/d/nd8932h9d/view"
        "path":
          type: "string"
          description: "The path where the folder is stored"
          nullable: true
          example: "/path/to/folder"
        "owner_id":
          type: "string"
          description: "The user ID of owner of this folder"
          nullable: true
          example: "c28xyrc55866bvuv"
        "remote_owner_id":
          type: "string"
          description: "Provider's unique identifier of the owner of this folder"
          nullable: true
          example: "e3cb75bf-aa84-466e-a6c1-b8322b257a48"
        "parent_folder_id":
          type: "string"
          description: "The parent folder ID associated with this folder"
          nullable: true
          example: "c28xyrc55866bvuv"
        "remote_parent_folder_id":
          type: "string"
          description: "Provider's unique identifier of the parent folder associated with this folder"
          nullable: true
          example: "e3cb75bf-aa84-466e-a6c1-b8322b257a48"
        "drive_id":
          type: "string"
          description: "The parent drive ID associated with this folder"
          nullable: true
          example: "c28xyrc55866bvuv"
        "remote_drive_id":
          type: "string"
          description: "Provider's unique identifier of the parent drive associated with this folder"
          nullable: true
          example: "e3cb75bf-aa84-466e-a6c1-b8322b257a48"
        "created_at":
          type: "string"
          format: "date-time"
          description: "The created date of the folder"
          nullable: true
          example: "2023-02-23T00:00:00.000Z"
        "updated_at":
          type: "string"
          format: "date-time"
          description: "The last updated date of the folder"
          nullable: true
          example: "2024-02-23T00:00:00.000Z"
        "has_content":
          oneOf:
            - type: "boolean"
            - type: "string"
              enum:
                - "true"
                - "false"
          description: "Whether the folder has content"
          nullable: true
          example: true
        "has_children":
          oneOf:
            - type: "boolean"
            - type: "string"
              enum:
                - "true"
                - "false"
          description: "Whether the folder has children"
          nullable: true
          example: true
        "is_root":
          oneOf:
            - type: "boolean"
            - type: "string"
              enum:
                - "true"
                - "false"
          description: "Whether the folder is at the root level of the drive"
          nullable: true
          example: true
    FoldersPaginated:
      type: "object"
      properties:
        "next":
          type: "string"
          nullable: true
        "data":
          type: "array"
          items: {"$ref": "#/components/schemas/Folders"}
        "raw":
          type: "array"
          items: {"$ref": "#/components/schemas/RawResponse"}
          nullable: true
      required:
        - "data"
  securitySchemes:
    "basic":
      type: "http"
      scheme: "basic"
tags:
  - name: "Accounts"
    description: "Customer or business accounts."
  - name: "AI"
    description: "AI-powered features."
  - name: "Connect Sessions"
    description: "Generate connection session tokens or auth URLs to allow your customers to connect their accounts."
  - name: "Connectors"
    description: "Retrieve metadata for connectors."
  - name: "Proxy"
    description: "Routing API requests through StackOne directly to the underlying provider."
  - name: "Request Logs"
    description: "API requests and response logs."
  - name: "Webhooks"
    description: "Configure and manage webhooks."
  - name: "Benefits"
    description: "Employee benefits and entitlements."
  - name: "Companies"
    description: "Organizations or legal entities."
  - name: "Custom Field Definitions"
    description: "Definitions for custom fields on CRM resources."
  - name: "Documents"
    description: "Files and documents related to candidates or jobs."
  - name: "Employees"
    description: "People employed by the company."
  - name: "Employments"
    description: "Details of an employee's employment."
  - name: "Groups"
    description: "Groups for organizing users."
  - name: "Jobs"
    description: "Open job positions."
  - name: "Locations"
    description: "Job or office locations."
  - name: "Positions"
    description: "Job positions available for hiring."
  - name: "Shifts"
    description: "Employee work shifts and schedules."
  - name: "Skills"
    description: "Skills or competencies taught or tracked."
  - name: "Tasks"
    description: "Tasks or assignments for employees."
  - name: "Time Entries"
    description: "Records of hours worked or activities performed."
  - name: "Time Off"
    description: "Employee leave and time off records."
  - name: "Time Off Balances"
    description: "Available leave balances for employees."
  - name: "Time Off Policies"
    description: "Rules and policies for employee leave."
  - name: "Work Eligibility"
    description: "Eligibility status for employment."
  - name: "Application Changes"
    description: "Chronological record of changes made to the application (this will only track changes for specific properties of the Application model)."
  - name: "Application Notes"
    description: "Notes or comments on applications."
  - name: "Applications"
    description: "Job applications submitted by candidates."
  - name: "Assessments"
    description: "Candidate assessments or tests."
  - name: "Background Checks"
    description: "Background screening checks."
  - name: "Candidates"
    description: "People applying for jobs."
  - name: "Departments"
    description: "Departments within an organization."
  - name: "Interview Stages"
    description: "Stages in the interview process."
  - name: "Interviews"
    description: "Scheduled interviews with candidates."
  - name: "Job Postings"
    description: "Public job advertisements."
  - name: "Lists"
    description: "Lists for organizing contacts or accounts."
  - name: "Notes"
    description: "General notes or comments."
  - name: "Offers"
    description: "Job offers extended to candidates."
  - name: "Orders"
    description: "Orders for background checks or assessments."
  - name: "Packages"
    description: "Assessment or offer packages."
  - name: "Rejected Reasons"
    description: "Reasons for candidate rejection."
  - name: "Results"
    description: "Results of assessments or background checks."
  - name: "Scheduled Interviews"
    description: "Planned interview sessions."
  - name: "Scorecards"
    description: "Evaluation scorecards for candidates."
  - name: "Users"
    description: "Accounts that can create or work on tickets."
  - name: "Contacts"
    description: "People or organizations that can be contacted."
  - name: "Roles"
    description: "Roles assigned to users for access control."
  - name: "Policies"
    description: "Security and access policies."
  - name: "Permissions"
    description: "Specific permissions granted to users or roles."
  - name: "Resources"
    description: "Resources that can be accessed or managed."
  - name: "Campaigns"
    description: "Marketing campaigns and initiatives."
  - name: "Content Blocks"
    description: "Reusable content blocks for marketing."
  - name: "Email"
    description: "Email marketing messages."
  - name: "In App"
    description: "In-app marketing messages."
  - name: "Omni-Channel"
    description: "Omni-channel marketing communications."
  - name: "Push"
    description: "Push notifications for marketing."
  - name: "SMS"
    description: "SMS marketing messages."
  - name: "Templates"
    description: "Templates for marketing content or campaigns."
  - name: "Courses"
    description: "Collections of learning materials or modules."
  - name: "Content"
    description: "Learning content or materials."
  - name: "Categories"
    description: "Categories for organizing learning content."
  - name: "Assignments"
    description: "Tasks or assignments for learners."
  - name: "Completions"
    description: "Records of completed assignments or courses."
  - name: "Collections"
    description: "Groupings in which related tickets can be classified under."
  - name: "Tickets"
    description: "Requests for support, assistance, or resolution."
  - name: "Comments"
    description: "Notes or messages added to tickets."
  - name: "Attachments"
    description: "Files attached to tickets."
  - name: "Ticket Types"
    description: "Types or categories of tickets."
  - name: "Ticket Statuses"
    description: "Statuses representing ticket progress."
  - name: "Files"
    description: "Files that can be uploaded or managed."
  - name: "Folders"
    description: "Folders for organizing files."
  - name: "Drives"
    description: "Drives for storing and managing files."
