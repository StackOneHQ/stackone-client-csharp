//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace StackOne.Models.Components
{
    using Newtonsoft.Json;
    using StackOne.Utils;
    using System;
    using System.Collections.Concurrent;
    using System.Collections.Generic;
    using System.Linq;

    [JsonConverter(typeof(OpenEnumConverter))]
    public class LinkedAccountMetaCategory : IEquatable<LinkedAccountMetaCategory>
    {
        public static readonly LinkedAccountMetaCategory Ats = new LinkedAccountMetaCategory("ats");
        public static readonly LinkedAccountMetaCategory Hris = new LinkedAccountMetaCategory("hris");
        public static readonly LinkedAccountMetaCategory HrisLegacy = new LinkedAccountMetaCategory("hris-legacy");
        public static readonly LinkedAccountMetaCategory Crm = new LinkedAccountMetaCategory("crm");
        public static readonly LinkedAccountMetaCategory Iam = new LinkedAccountMetaCategory("iam");
        public static readonly LinkedAccountMetaCategory Marketing = new LinkedAccountMetaCategory("marketing");
        public static readonly LinkedAccountMetaCategory Lms = new LinkedAccountMetaCategory("lms");
        public static readonly LinkedAccountMetaCategory Stackone = new LinkedAccountMetaCategory("stackone");
        public static readonly LinkedAccountMetaCategory Documents = new LinkedAccountMetaCategory("documents");
        public static readonly LinkedAccountMetaCategory Ticketing = new LinkedAccountMetaCategory("ticketing");
        public static readonly LinkedAccountMetaCategory Screening = new LinkedAccountMetaCategory("screening");
        public static readonly LinkedAccountMetaCategory Messaging = new LinkedAccountMetaCategory("messaging");
        public static readonly LinkedAccountMetaCategory Accounting = new LinkedAccountMetaCategory("accounting");

        private static readonly Dictionary <string, LinkedAccountMetaCategory> _knownValues =
            new Dictionary <string, LinkedAccountMetaCategory> ()
            {
                ["ats"] = Ats,
                ["hris"] = Hris,
                ["hris-legacy"] = HrisLegacy,
                ["crm"] = Crm,
                ["iam"] = Iam,
                ["marketing"] = Marketing,
                ["lms"] = Lms,
                ["stackone"] = Stackone,
                ["documents"] = Documents,
                ["ticketing"] = Ticketing,
                ["screening"] = Screening,
                ["messaging"] = Messaging,
                ["accounting"] = Accounting
            };

        private static readonly ConcurrentDictionary<string, LinkedAccountMetaCategory> _values =
            new ConcurrentDictionary<string, LinkedAccountMetaCategory>(_knownValues);

        private LinkedAccountMetaCategory(string value)
        {
            if (value == null) throw new ArgumentNullException(nameof(value));
            Value = value;
        }

        public string Value { get; }

        public static LinkedAccountMetaCategory Of(string value)
        {
            return _values.GetOrAdd(value, _ => new LinkedAccountMetaCategory(value));
        }

        public static implicit operator LinkedAccountMetaCategory(string value) => Of(value);
        public static implicit operator string(LinkedAccountMetaCategory linkedaccountmetacategory) => linkedaccountmetacategory.Value;

        public static LinkedAccountMetaCategory[] Values()
        {
            return _values.Values.ToArray();
        }

        public override string ToString() => Value.ToString();

        public bool IsKnown()
        {
            return _knownValues.ContainsKey(Value);
        }

        public override bool Equals(object? obj) => Equals(obj as LinkedAccountMetaCategory);

        public bool Equals(LinkedAccountMetaCategory? other)
        {
            if (ReferenceEquals(this, other)) return true;
            if (other is null) return false;
            return string.Equals(Value, other.Value);
        }

        public override int GetHashCode() => Value.GetHashCode();
    }

}