//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace StackOne.Client
{
    using Newtonsoft.Json;
    using StackOne.Client.Hooks;
    using StackOne.Client.Models.Components;
    using StackOne.Client.Models.Errors;
    using StackOne.Client.Utils;
    using StackOne.Client.Utils.Retries;
    using System;
    using System.Collections.Generic;
    using System.Net.Http;
    using System.Threading.Tasks;

    /// <summary>
    /// StackOne: The documentation for the StackOne API
    /// </summary>
    public interface IStackOne
    {
        public IConnectSessions ConnectSessions { get; }

        /// <summary>
        /// View and manage linked accounts.
        /// </summary>
        public IAccounts Accounts { get; }
        public IRequestLogs RequestLogs { get; }

        /// <summary>
        /// Retrieve metadata for connectors.
        /// </summary>
        public IConnectors Connectors { get; }

        /// <summary>
        /// Routing API requests through StackOne directly to the underlying provider.
        /// </summary>
        public IProxy Proxy { get; }
    }


    /// <summary>
    /// StackOne: The documentation for the StackOne API
    /// </summary>
    public class StackOne: IStackOne
    {
        public SDKConfig SDKConfiguration { get; private set; }

        private const string _language = "csharp";
        private const string _sdkVersion = "0.1.1";
        private const string _sdkGenVersion = "2.657.1";
        private const string _openapiDocVersion = "1.0.0";
        public IConnectSessions ConnectSessions { get; private set; }
        public IAccounts Accounts { get; private set; }
        public IRequestLogs RequestLogs { get; private set; }
        public IConnectors Connectors { get; private set; }
        public IProxy Proxy { get; private set; }

        public StackOne(SDKConfig config)
        {
            SDKConfiguration = config;
            InitHooks();

            ConnectSessions = new ConnectSessions(SDKConfiguration);

            Accounts = new Accounts(SDKConfiguration);

            RequestLogs = new RequestLogs(SDKConfiguration);

            Connectors = new Connectors(SDKConfiguration);

            Proxy = new Proxy(SDKConfiguration);
        }

        public StackOne(StackOne.Client.Models.Components.Security? security = null, Func<StackOne.Client.Models.Components.Security>? securitySource = null, int? serverIndex = null, string? serverUrl = null, Dictionary<string, string>? urlParams = null, ISpeakeasyHttpClient? client = null, RetryConfig? retryConfig = null)
        {
            if (serverIndex != null)
            {
                if (serverIndex.Value < 0 || serverIndex.Value >= SDKConfig.ServerList.Length)
                {
                    throw new Exception($"Invalid server index {serverIndex.Value}");
                }
            }

            if (serverUrl != null)
            {
                if (urlParams != null)
                {
                    serverUrl = Utilities.TemplateUrl(serverUrl, urlParams);
                }
            }
            Func<StackOne.Client.Models.Components.Security>? _securitySource = null;

            if(securitySource != null)
            {
                _securitySource = securitySource;
            }
            else if(security != null)
            {
                _securitySource = () => security;
            }
            else
            {
                throw new Exception("security and securitySource cannot both be null");
            }

            SDKConfiguration = new SDKConfig(client)
            {
                ServerIndex = serverIndex == null ? 0 : serverIndex.Value,
                ServerUrl = serverUrl == null ? "" : serverUrl,
                SecuritySource = _securitySource,
                RetryConfig = retryConfig
            };

            InitHooks();

            ConnectSessions = new ConnectSessions(SDKConfiguration);

            Accounts = new Accounts(SDKConfiguration);

            RequestLogs = new RequestLogs(SDKConfiguration);

            Connectors = new Connectors(SDKConfiguration);

            Proxy = new Proxy(SDKConfiguration);
        }

        private void InitHooks()
        {
            SDKConfiguration = SDKConfiguration.Hooks.SDKInit(SDKConfiguration);
        }

        public class SDKBuilder
        {
            private SDKConfig _sdkConfig = new SDKConfig(client: new SpeakeasyHttpClient());

            public SDKBuilder() { }

            public SDKBuilder WithServerIndex(int serverIndex)
            {
                if (serverIndex < 0 || serverIndex >= SDKConfig.ServerList.Length)
                {
                    throw new Exception($"Invalid server index {serverIndex}");
                }
                _sdkConfig.ServerIndex = serverIndex;
                return this;
            }

            public SDKBuilder WithServerUrl(string serverUrl, Dictionary<string, string>? serverVariables = null)
            {
                if (serverVariables != null)
                {
                    serverUrl = Utilities.TemplateUrl(serverUrl, serverVariables);
                }
                _sdkConfig.ServerUrl = serverUrl;
                return this;
            }

            public SDKBuilder WithSecuritySource(Func<StackOne.Client.Models.Components.Security> securitySource)
            {
                _sdkConfig.SecuritySource = securitySource;
                return this;
            }

            public SDKBuilder WithSecurity(StackOne.Client.Models.Components.Security security)
            {
                _sdkConfig.SecuritySource = () => security;
                return this;
            }

            public SDKBuilder WithClient(ISpeakeasyHttpClient client)
            {
                _sdkConfig.Client = client;
                return this;
            }

            public SDKBuilder WithRetryConfig(RetryConfig retryConfig)
            {
                _sdkConfig.RetryConfig = retryConfig;
                return this;
            }

            public StackOne Build()
            {
              if (_sdkConfig.SecuritySource == null) {
                  throw new Exception("securitySource cannot be null. One of `Security` or `securitySource` needs to be defined.");
              }
              return new StackOne(_sdkConfig);
            }

        }

        public static SDKBuilder Builder() => new SDKBuilder();
    }
}