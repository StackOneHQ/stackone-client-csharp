//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace StackOne.Client.Models.Components
{
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;
    using StackOne.Client.Models.Components;
    using StackOne.Client.Utils;
    using System;
    using System.Collections.Generic;
    using System.Numerics;
    using System.Reflection;
    

    public class FieldRequiredUnionType
    {
        private FieldRequiredUnionType(string value) { Value = value; }

        public string Value { get; private set; }
        public static FieldRequiredUnionType Boolean { get { return new FieldRequiredUnionType("boolean"); } }
        
        public static FieldRequiredUnionType FieldRequiredEnum { get { return new FieldRequiredUnionType("Field_required_enum"); } }
        
        public static FieldRequiredUnionType Null { get { return new FieldRequiredUnionType("null"); } }

        public override string ToString() { return Value; }
        public static implicit operator String(FieldRequiredUnionType v) { return v.Value; }
        public static FieldRequiredUnionType FromString(string v) {
            switch(v) {
                case "boolean": return Boolean;
                case "Field_required_enum": return FieldRequiredEnum;
                case "null": return Null;
                default: throw new ArgumentException("Invalid value for FieldRequiredUnionType");
            }
        }
        public override bool Equals(object? obj)
        {
            if (obj == null || GetType() != obj.GetType())
            {
                return false;
            }
            return Value.Equals(((FieldRequiredUnionType)obj).Value);
        }

        public override int GetHashCode()
        {
            return Value.GetHashCode();
        }
    }


    /// <summary>
    /// Indicates if the field is required
    /// </summary>
    [JsonConverter(typeof(FieldRequiredUnion.FieldRequiredUnionConverter))]
    public class FieldRequiredUnion {
        public FieldRequiredUnion(FieldRequiredUnionType type) {
            Type = type;
        }

        [SpeakeasyMetadata("form:explode=true")]
        public bool? Boolean { get; set; }

        [SpeakeasyMetadata("form:explode=true")]
        public FieldRequiredEnum? FieldRequiredEnum { get; set; }

        public FieldRequiredUnionType Type { get; set; }


        public static FieldRequiredUnion CreateBoolean(bool boolean) {
            FieldRequiredUnionType typ = FieldRequiredUnionType.Boolean;

            FieldRequiredUnion res = new FieldRequiredUnion(typ);
            res.Boolean = boolean;
            return res;
        }

        public static FieldRequiredUnion CreateFieldRequiredEnum(FieldRequiredEnum fieldRequiredEnum) {
            FieldRequiredUnionType typ = FieldRequiredUnionType.FieldRequiredEnum;

            FieldRequiredUnion res = new FieldRequiredUnion(typ);
            res.FieldRequiredEnum = fieldRequiredEnum;
            return res;
        }

        public static FieldRequiredUnion CreateNull() {
            FieldRequiredUnionType typ = FieldRequiredUnionType.Null;
            return new FieldRequiredUnion(typ);
        }

        public class FieldRequiredUnionConverter : JsonConverter
        {

            public override bool CanConvert(System.Type objectType) => objectType == typeof(FieldRequiredUnion);

            public override bool CanRead => true;

            public override object? ReadJson(JsonReader reader, System.Type objectType, object? existingValue, JsonSerializer serializer)
            {
                var json = JRaw.Create(reader).ToString();
                if (json == "null")
                {
                    return null;
                }

                var fallbackCandidates = new List<(System.Type, object, string)>();

                try
                {
                    var converted = Convert.ToBoolean(json);
                    return new FieldRequiredUnion(FieldRequiredUnionType.Boolean)
                    {
                        Boolean = converted
                    };
                }
                catch (System.FormatException)
                {
                    // try next option
                }

                try
                {
                    return new FieldRequiredUnion(FieldRequiredUnionType.FieldRequiredEnum)
                    {
                        FieldRequiredEnum = ResponseBodyDeserializer.DeserializeUndiscriminatedUnionMember<FieldRequiredEnum>(json)
                    };
                }
                catch (ResponseBodyDeserializer.MissingMemberException)
                {
                    fallbackCandidates.Add((typeof(FieldRequiredEnum), new FieldRequiredUnion(FieldRequiredUnionType.FieldRequiredEnum), "FieldRequiredEnum"));
                }
                catch (ResponseBodyDeserializer.DeserializationException)
                {
                    // try next option
                }
                catch (Exception)
                {
                    throw;
                }

                if (fallbackCandidates.Count > 0)
                {
                    fallbackCandidates.Sort((a, b) => ResponseBodyDeserializer.CompareFallbackCandidates(a.Item1, b.Item1, json));
                    foreach(var (deserializationType, returnObject, propertyName) in fallbackCandidates)
                    {
                        try
                        {
                            return ResponseBodyDeserializer.DeserializeUndiscriminatedUnionFallback(deserializationType, returnObject, propertyName, json);
                        }
                        catch (ResponseBodyDeserializer.DeserializationException)
                        {
                            // try next fallback option
                        }
                        catch (Exception)
                        {
                            throw;
                        }
                    }
                }

                throw new InvalidOperationException("Could not deserialize into any supported types.");
            }

            public override void WriteJson(JsonWriter writer, object? value, JsonSerializer serializer)
            {
                if (value == null) {
                    writer.WriteRawValue("null");
                    return;
                }
                FieldRequiredUnion res = (FieldRequiredUnion)value;
                if (FieldRequiredUnionType.FromString(res.Type).Equals(FieldRequiredUnionType.Null))
                {
                    writer.WriteRawValue("null");
                    return;
                }
                if (res.Boolean != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.Boolean));
                    return;
                }
                if (res.FieldRequiredEnum != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.FieldRequiredEnum));
                    return;
                }

            }

        }

    }
}