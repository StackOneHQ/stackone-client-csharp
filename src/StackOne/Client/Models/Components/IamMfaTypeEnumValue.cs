//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace StackOne.Client.Models.Components
{
    using Newtonsoft.Json;
    using StackOne.Client.Utils;
    using System;
    using System.Collections.Concurrent;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The unified value for the type of multi-factor authentication. If the provider does not send back a type but does specify that MFA is set-up for this user, the value will be set to &apos;unknown&apos;.&apos;
    /// </summary>
    [JsonConverter(typeof(OpenEnumConverter))]
    public class IamMfaTypeEnumValue : IEquatable<IamMfaTypeEnumValue>
    {
        public static readonly IamMfaTypeEnumValue Sms = new IamMfaTypeEnumValue("sms");
        public static readonly IamMfaTypeEnumValue Email = new IamMfaTypeEnumValue("email");
        public static readonly IamMfaTypeEnumValue Push = new IamMfaTypeEnumValue("push");
        public static readonly IamMfaTypeEnumValue Totp = new IamMfaTypeEnumValue("totp");
        public static readonly IamMfaTypeEnumValue PhoneCall = new IamMfaTypeEnumValue("phone_call");
        public static readonly IamMfaTypeEnumValue Question = new IamMfaTypeEnumValue("question");
        public static readonly IamMfaTypeEnumValue SoftwareToken = new IamMfaTypeEnumValue("software_token");
        public static readonly IamMfaTypeEnumValue HardwareToken = new IamMfaTypeEnumValue("hardware_token");
        public static readonly IamMfaTypeEnumValue Web = new IamMfaTypeEnumValue("web");
        public static readonly IamMfaTypeEnumValue Unknown = new IamMfaTypeEnumValue("unknown");
        public static readonly IamMfaTypeEnumValue UnmappedValue = new IamMfaTypeEnumValue("unmapped_value");

        private static readonly Dictionary <string, IamMfaTypeEnumValue> _knownValues =
            new Dictionary <string, IamMfaTypeEnumValue> ()
            {
                ["sms"] = Sms,
                ["email"] = Email,
                ["push"] = Push,
                ["totp"] = Totp,
                ["phone_call"] = PhoneCall,
                ["question"] = Question,
                ["software_token"] = SoftwareToken,
                ["hardware_token"] = HardwareToken,
                ["web"] = Web,
                ["unknown"] = Unknown,
                ["unmapped_value"] = UnmappedValue
            };

        private static readonly ConcurrentDictionary<string, IamMfaTypeEnumValue> _values =
            new ConcurrentDictionary<string, IamMfaTypeEnumValue>(_knownValues);

        private IamMfaTypeEnumValue(string value)
        {
            if (value == null) throw new ArgumentNullException(nameof(value));
            Value = value;
        }

        public string Value { get; }

        public static IamMfaTypeEnumValue Of(string value)
        {
            return _values.GetOrAdd(value, _ => new IamMfaTypeEnumValue(value));
        }

        public static implicit operator IamMfaTypeEnumValue(string value) => Of(value);
        public static implicit operator string(IamMfaTypeEnumValue iammfatypeenumvalue) => iammfatypeenumvalue.Value;

        public static IamMfaTypeEnumValue[] Values()
        {
            return _values.Values.ToArray();
        }

        public override string ToString() => Value.ToString();

        public bool IsKnown()
        {
            return _knownValues.ContainsKey(Value);
        }

        public override bool Equals(object? obj) => Equals(obj as IamMfaTypeEnumValue);

        public bool Equals(IamMfaTypeEnumValue? other)
        {
            if (ReferenceEquals(this, other)) return true;
            if (other is null) return false;
            return string.Equals(Value, other.Value);
        }

        public override int GetHashCode() => Value.GetHashCode();
    }

}