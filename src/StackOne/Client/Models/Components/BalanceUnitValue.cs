//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace StackOne.Client.Models.Components
{
    using Newtonsoft.Json;
    using StackOne.Client.Utils;
    using System;
    using System.Collections.Concurrent;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The unified value for the duration unit. If the provider does not specify this unit, the value will be set to unknown
    /// </summary>
    [JsonConverter(typeof(OpenEnumConverter))]
    public class BalanceUnitValue : IEquatable<BalanceUnitValue>
    {
        public static readonly BalanceUnitValue Minutes = new BalanceUnitValue("minutes");
        public static readonly BalanceUnitValue Hours = new BalanceUnitValue("hours");
        public static readonly BalanceUnitValue Days = new BalanceUnitValue("days");
        public static readonly BalanceUnitValue Weeks = new BalanceUnitValue("weeks");
        public static readonly BalanceUnitValue Months = new BalanceUnitValue("months");
        public static readonly BalanceUnitValue Years = new BalanceUnitValue("years");
        public static readonly BalanceUnitValue Unknown = new BalanceUnitValue("unknown");
        public static readonly BalanceUnitValue UnmappedValue = new BalanceUnitValue("unmapped_value");

        private static readonly Dictionary <string, BalanceUnitValue> _knownValues =
            new Dictionary <string, BalanceUnitValue> ()
            {
                ["minutes"] = Minutes,
                ["hours"] = Hours,
                ["days"] = Days,
                ["weeks"] = Weeks,
                ["months"] = Months,
                ["years"] = Years,
                ["unknown"] = Unknown,
                ["unmapped_value"] = UnmappedValue
            };

        private static readonly ConcurrentDictionary<string, BalanceUnitValue> _values =
            new ConcurrentDictionary<string, BalanceUnitValue>(_knownValues);

        private BalanceUnitValue(string value)
        {
            if (value == null) throw new ArgumentNullException(nameof(value));
            Value = value;
        }

        public string Value { get; }

        public static BalanceUnitValue Of(string value)
        {
            return _values.GetOrAdd(value, _ => new BalanceUnitValue(value));
        }

        public static implicit operator BalanceUnitValue(string value) => Of(value);
        public static implicit operator string(BalanceUnitValue balanceunitvalue) => balanceunitvalue.Value;

        public static BalanceUnitValue[] Values()
        {
            return _values.Values.ToArray();
        }

        public override string ToString() => Value.ToString();

        public bool IsKnown()
        {
            return _knownValues.ContainsKey(Value);
        }

        public override bool Equals(object? obj) => Equals(obj as BalanceUnitValue);

        public bool Equals(BalanceUnitValue? other)
        {
            if (ReferenceEquals(this, other)) return true;
            if (other is null) return false;
            return string.Equals(Value, other.Value);
        }

        public override int GetHashCode() => Value.GetHashCode();
    }

}