//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace StackOne.Client.Models.Components
{
    using Newtonsoft.Json;
    using StackOne.Client.Utils;
    using System;
    using System.Collections.Concurrent;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The status of the application.
    /// </summary>
    [JsonConverter(typeof(OpenEnumConverter))]
    public class AtsCreateApplicationRequestDtoValue : IEquatable<AtsCreateApplicationRequestDtoValue>
    {
        public static readonly AtsCreateApplicationRequestDtoValue Active = new AtsCreateApplicationRequestDtoValue("active");
        public static readonly AtsCreateApplicationRequestDtoValue Assessment = new AtsCreateApplicationRequestDtoValue("assessment");
        public static readonly AtsCreateApplicationRequestDtoValue BackgroundCheck = new AtsCreateApplicationRequestDtoValue("background_check");
        public static readonly AtsCreateApplicationRequestDtoValue Converted = new AtsCreateApplicationRequestDtoValue("converted");
        public static readonly AtsCreateApplicationRequestDtoValue DeclinedByCandidate = new AtsCreateApplicationRequestDtoValue("declined_by_candidate");
        public static readonly AtsCreateApplicationRequestDtoValue Hired = new AtsCreateApplicationRequestDtoValue("hired");
        public static readonly AtsCreateApplicationRequestDtoValue Interview = new AtsCreateApplicationRequestDtoValue("interview");
        public static readonly AtsCreateApplicationRequestDtoValue Lead = new AtsCreateApplicationRequestDtoValue("lead");
        public static readonly AtsCreateApplicationRequestDtoValue Offer = new AtsCreateApplicationRequestDtoValue("offer");
        public static readonly AtsCreateApplicationRequestDtoValue ReferenceCheck = new AtsCreateApplicationRequestDtoValue("reference_check");
        public static readonly AtsCreateApplicationRequestDtoValue Rejected = new AtsCreateApplicationRequestDtoValue("rejected");
        public static readonly AtsCreateApplicationRequestDtoValue Review = new AtsCreateApplicationRequestDtoValue("review");
        public static readonly AtsCreateApplicationRequestDtoValue Screen = new AtsCreateApplicationRequestDtoValue("screen");
        public static readonly AtsCreateApplicationRequestDtoValue New = new AtsCreateApplicationRequestDtoValue("new");
        public static readonly AtsCreateApplicationRequestDtoValue Onboarding = new AtsCreateApplicationRequestDtoValue("onboarding");
        public static readonly AtsCreateApplicationRequestDtoValue Created = new AtsCreateApplicationRequestDtoValue("created");
        public static readonly AtsCreateApplicationRequestDtoValue Accepted = new AtsCreateApplicationRequestDtoValue("accepted");
        public static readonly AtsCreateApplicationRequestDtoValue ShortList = new AtsCreateApplicationRequestDtoValue("short_list");
        public static readonly AtsCreateApplicationRequestDtoValue Approved = new AtsCreateApplicationRequestDtoValue("approved");
        public static readonly AtsCreateApplicationRequestDtoValue UnmappedValue = new AtsCreateApplicationRequestDtoValue("unmapped_value");

        private static readonly Dictionary <string, AtsCreateApplicationRequestDtoValue> _knownValues =
            new Dictionary <string, AtsCreateApplicationRequestDtoValue> ()
            {
                ["active"] = Active,
                ["assessment"] = Assessment,
                ["background_check"] = BackgroundCheck,
                ["converted"] = Converted,
                ["declined_by_candidate"] = DeclinedByCandidate,
                ["hired"] = Hired,
                ["interview"] = Interview,
                ["lead"] = Lead,
                ["offer"] = Offer,
                ["reference_check"] = ReferenceCheck,
                ["rejected"] = Rejected,
                ["review"] = Review,
                ["screen"] = Screen,
                ["new"] = New,
                ["onboarding"] = Onboarding,
                ["created"] = Created,
                ["accepted"] = Accepted,
                ["short_list"] = ShortList,
                ["approved"] = Approved,
                ["unmapped_value"] = UnmappedValue
            };

        private static readonly ConcurrentDictionary<string, AtsCreateApplicationRequestDtoValue> _values =
            new ConcurrentDictionary<string, AtsCreateApplicationRequestDtoValue>(_knownValues);

        private AtsCreateApplicationRequestDtoValue(string value)
        {
            if (value == null) throw new ArgumentNullException(nameof(value));
            Value = value;
        }

        public string Value { get; }

        public static AtsCreateApplicationRequestDtoValue Of(string value)
        {
            return _values.GetOrAdd(value, _ => new AtsCreateApplicationRequestDtoValue(value));
        }

        public static implicit operator AtsCreateApplicationRequestDtoValue(string value) => Of(value);
        public static implicit operator string(AtsCreateApplicationRequestDtoValue atscreateapplicationrequestdtovalue) => atscreateapplicationrequestdtovalue.Value;

        public static AtsCreateApplicationRequestDtoValue[] Values()
        {
            return _values.Values.ToArray();
        }

        public override string ToString() => Value.ToString();

        public bool IsKnown()
        {
            return _knownValues.ContainsKey(Value);
        }

        public override bool Equals(object? obj) => Equals(obj as AtsCreateApplicationRequestDtoValue);

        public bool Equals(AtsCreateApplicationRequestDtoValue? other)
        {
            if (ReferenceEquals(this, other)) return true;
            if (other is null) return false;
            return string.Equals(Value, other.Value);
        }

        public override int GetHashCode() => Value.GetHashCode();
    }

}