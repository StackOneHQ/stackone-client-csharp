//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace StackOne.Client.Models.Components
{
    using Newtonsoft.Json;
    using StackOne.Client.Utils;
    using System;
    using System.Collections.Concurrent;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The unified value for the type of the time off policy. If the provider does not specify this unit, the value will be set to unmapped_value
    /// </summary>
    [JsonConverter(typeof(OpenEnumConverter))]
    public class TimeOffBalancesTypeValue : IEquatable<TimeOffBalancesTypeValue>
    {
        public static readonly TimeOffBalancesTypeValue Sick = new TimeOffBalancesTypeValue("sick");
        public static readonly TimeOffBalancesTypeValue UnmappedValue = new TimeOffBalancesTypeValue("unmapped_value");
        public static readonly TimeOffBalancesTypeValue Vacation = new TimeOffBalancesTypeValue("vacation");
        public static readonly TimeOffBalancesTypeValue LongTermDisability = new TimeOffBalancesTypeValue("long_term_disability");
        public static readonly TimeOffBalancesTypeValue ShortTermDisability = new TimeOffBalancesTypeValue("short_term_disability");
        public static readonly TimeOffBalancesTypeValue Absent = new TimeOffBalancesTypeValue("absent");
        public static readonly TimeOffBalancesTypeValue CompTime = new TimeOffBalancesTypeValue("comp_time");
        public static readonly TimeOffBalancesTypeValue Training = new TimeOffBalancesTypeValue("training");
        public static readonly TimeOffBalancesTypeValue AnnualLeave = new TimeOffBalancesTypeValue("annual_leave");
        public static readonly TimeOffBalancesTypeValue LeaveOfAbsence = new TimeOffBalancesTypeValue("leave_of_absence");
        public static readonly TimeOffBalancesTypeValue Break = new TimeOffBalancesTypeValue("break");
        public static readonly TimeOffBalancesTypeValue ChildCareLeave = new TimeOffBalancesTypeValue("child_care_leave");
        public static readonly TimeOffBalancesTypeValue MaternityLeave = new TimeOffBalancesTypeValue("maternity_leave");
        public static readonly TimeOffBalancesTypeValue JuryDuty = new TimeOffBalancesTypeValue("jury_duty");
        public static readonly TimeOffBalancesTypeValue Sabbatical = new TimeOffBalancesTypeValue("sabbatical");
        public static readonly TimeOffBalancesTypeValue Accident = new TimeOffBalancesTypeValue("accident");
        public static readonly TimeOffBalancesTypeValue Paid = new TimeOffBalancesTypeValue("paid");
        public static readonly TimeOffBalancesTypeValue Unpaid = new TimeOffBalancesTypeValue("unpaid");
        public static readonly TimeOffBalancesTypeValue Holiday = new TimeOffBalancesTypeValue("holiday");
        public static readonly TimeOffBalancesTypeValue Personal = new TimeOffBalancesTypeValue("personal");
        public static readonly TimeOffBalancesTypeValue InLieu = new TimeOffBalancesTypeValue("in_lieu");
        public static readonly TimeOffBalancesTypeValue Bereavement = new TimeOffBalancesTypeValue("bereavement");

        private static readonly Dictionary <string, TimeOffBalancesTypeValue> _knownValues =
            new Dictionary <string, TimeOffBalancesTypeValue> ()
            {
                ["sick"] = Sick,
                ["unmapped_value"] = UnmappedValue,
                ["vacation"] = Vacation,
                ["long_term_disability"] = LongTermDisability,
                ["short_term_disability"] = ShortTermDisability,
                ["absent"] = Absent,
                ["comp_time"] = CompTime,
                ["training"] = Training,
                ["annual_leave"] = AnnualLeave,
                ["leave_of_absence"] = LeaveOfAbsence,
                ["break"] = Break,
                ["child_care_leave"] = ChildCareLeave,
                ["maternity_leave"] = MaternityLeave,
                ["jury_duty"] = JuryDuty,
                ["sabbatical"] = Sabbatical,
                ["accident"] = Accident,
                ["paid"] = Paid,
                ["unpaid"] = Unpaid,
                ["holiday"] = Holiday,
                ["personal"] = Personal,
                ["in_lieu"] = InLieu,
                ["bereavement"] = Bereavement
            };

        private static readonly ConcurrentDictionary<string, TimeOffBalancesTypeValue> _values =
            new ConcurrentDictionary<string, TimeOffBalancesTypeValue>(_knownValues);

        private TimeOffBalancesTypeValue(string value)
        {
            if (value == null) throw new ArgumentNullException(nameof(value));
            Value = value;
        }

        public string Value { get; }

        public static TimeOffBalancesTypeValue Of(string value)
        {
            return _values.GetOrAdd(value, _ => new TimeOffBalancesTypeValue(value));
        }

        public static implicit operator TimeOffBalancesTypeValue(string value) => Of(value);
        public static implicit operator string(TimeOffBalancesTypeValue timeoffbalancestypevalue) => timeoffbalancestypevalue.Value;

        public static TimeOffBalancesTypeValue[] Values()
        {
            return _values.Values.ToArray();
        }

        public override string ToString() => Value.ToString();

        public bool IsKnown()
        {
            return _knownValues.ContainsKey(Value);
        }

        public override bool Equals(object? obj) => Equals(obj as TimeOffBalancesTypeValue);

        public bool Equals(TimeOffBalancesTypeValue? other)
        {
            if (ReferenceEquals(this, other)) return true;
            if (other is null) return false;
            return string.Equals(Value, other.Value);
        }

        public override int GetHashCode() => Value.GetHashCode();
    }

}