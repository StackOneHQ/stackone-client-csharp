//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace StackOne.Client.Models.Components
{
    using Newtonsoft.Json;
    using StackOne.Client.Utils;
    using System;
    using System.Collections.Concurrent;
    using System.Collections.Generic;
    using System.Linq;

    [JsonConverter(typeof(OpenEnumConverter))]
    public class WorkEligibilityTypeValue : IEquatable<WorkEligibilityTypeValue>
    {
        public static readonly WorkEligibilityTypeValue Visa = new WorkEligibilityTypeValue("visa");
        public static readonly WorkEligibilityTypeValue Passport = new WorkEligibilityTypeValue("passport");
        public static readonly WorkEligibilityTypeValue DriverLicense = new WorkEligibilityTypeValue("driver_license");
        public static readonly WorkEligibilityTypeValue BirthCertificate = new WorkEligibilityTypeValue("birth_certificate");
        public static readonly WorkEligibilityTypeValue Other = new WorkEligibilityTypeValue("other");
        public static readonly WorkEligibilityTypeValue UnmappedValue = new WorkEligibilityTypeValue("unmapped_value");

        private static readonly Dictionary <string, WorkEligibilityTypeValue> _knownValues =
            new Dictionary <string, WorkEligibilityTypeValue> ()
            {
                ["visa"] = Visa,
                ["passport"] = Passport,
                ["driver_license"] = DriverLicense,
                ["birth_certificate"] = BirthCertificate,
                ["other"] = Other,
                ["unmapped_value"] = UnmappedValue
            };

        private static readonly ConcurrentDictionary<string, WorkEligibilityTypeValue> _values =
            new ConcurrentDictionary<string, WorkEligibilityTypeValue>(_knownValues);

        private WorkEligibilityTypeValue(string value)
        {
            if (value == null) throw new ArgumentNullException(nameof(value));
            Value = value;
        }

        public string Value { get; }

        public static WorkEligibilityTypeValue Of(string value)
        {
            return _values.GetOrAdd(value, _ => new WorkEligibilityTypeValue(value));
        }

        public static implicit operator WorkEligibilityTypeValue(string value) => Of(value);
        public static implicit operator string(WorkEligibilityTypeValue workeligibilitytypevalue) => workeligibilitytypevalue.Value;

        public static WorkEligibilityTypeValue[] Values()
        {
            return _values.Values.ToArray();
        }

        public override string ToString() => Value.ToString();

        public bool IsKnown()
        {
            return _knownValues.ContainsKey(Value);
        }

        public override bool Equals(object? obj) => Equals(obj as WorkEligibilityTypeValue);

        public bool Equals(WorkEligibilityTypeValue? other)
        {
            if (ReferenceEquals(this, other)) return true;
            if (other is null) return false;
            return string.Equals(Value, other.Value);
        }

        public override int GetHashCode() => Value.GetHashCode();
    }

}