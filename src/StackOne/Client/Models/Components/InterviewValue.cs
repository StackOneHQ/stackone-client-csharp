//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace StackOne.Client.Models.Components
{
    using Newtonsoft.Json;
    using StackOne.Client.Utils;
    using System;
    using System.Collections.Concurrent;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The status of the interview.
    /// </summary>
    [JsonConverter(typeof(OpenEnumConverter))]
    public class InterviewValue : IEquatable<InterviewValue>
    {
        public static readonly InterviewValue Unscheduled = new InterviewValue("unscheduled");
        public static readonly InterviewValue Scheduled = new InterviewValue("scheduled");
        public static readonly InterviewValue Completed = new InterviewValue("completed");
        public static readonly InterviewValue Cancelled = new InterviewValue("cancelled");
        public static readonly InterviewValue PendingFeedback = new InterviewValue("pending_feedback");
        public static readonly InterviewValue UnmappedValue = new InterviewValue("unmapped_value");

        private static readonly Dictionary <string, InterviewValue> _knownValues =
            new Dictionary <string, InterviewValue> ()
            {
                ["unscheduled"] = Unscheduled,
                ["scheduled"] = Scheduled,
                ["completed"] = Completed,
                ["cancelled"] = Cancelled,
                ["pending_feedback"] = PendingFeedback,
                ["unmapped_value"] = UnmappedValue
            };

        private static readonly ConcurrentDictionary<string, InterviewValue> _values =
            new ConcurrentDictionary<string, InterviewValue>(_knownValues);

        private InterviewValue(string value)
        {
            if (value == null) throw new ArgumentNullException(nameof(value));
            Value = value;
        }

        public string Value { get; }

        public static InterviewValue Of(string value)
        {
            return _values.GetOrAdd(value, _ => new InterviewValue(value));
        }

        public static implicit operator InterviewValue(string value) => Of(value);
        public static implicit operator string(InterviewValue interviewvalue) => interviewvalue.Value;

        public static InterviewValue[] Values()
        {
            return _values.Values.ToArray();
        }

        public override string ToString() => Value.ToString();

        public bool IsKnown()
        {
            return _knownValues.ContainsKey(Value);
        }

        public override bool Equals(object? obj) => Equals(obj as InterviewValue);

        public bool Equals(InterviewValue? other)
        {
            if (ReferenceEquals(this, other)) return true;
            if (other is null) return false;
            return string.Equals(Value, other.Value);
        }

        public override int GetHashCode() => Value.GetHashCode();
    }

}