//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace StackOne.Client.Models.Components
{
    using Newtonsoft.Json;
    using StackOne.Client.Utils;
    using System;
    using System.Collections.Concurrent;
    using System.Collections.Generic;
    using System.Linq;

    [JsonConverter(typeof(OpenEnumConverter))]
    public class HrisCreateEmployeeRequestDtoEmploymentStatusValue : IEquatable<HrisCreateEmployeeRequestDtoEmploymentStatusValue>
    {
        public static readonly HrisCreateEmployeeRequestDtoEmploymentStatusValue Active = new HrisCreateEmployeeRequestDtoEmploymentStatusValue("active");
        public static readonly HrisCreateEmployeeRequestDtoEmploymentStatusValue Pending = new HrisCreateEmployeeRequestDtoEmploymentStatusValue("pending");
        public static readonly HrisCreateEmployeeRequestDtoEmploymentStatusValue Terminated = new HrisCreateEmployeeRequestDtoEmploymentStatusValue("terminated");
        public static readonly HrisCreateEmployeeRequestDtoEmploymentStatusValue Leave = new HrisCreateEmployeeRequestDtoEmploymentStatusValue("leave");
        public static readonly HrisCreateEmployeeRequestDtoEmploymentStatusValue Inactive = new HrisCreateEmployeeRequestDtoEmploymentStatusValue("inactive");
        public static readonly HrisCreateEmployeeRequestDtoEmploymentStatusValue Unknown = new HrisCreateEmployeeRequestDtoEmploymentStatusValue("unknown");
        public static readonly HrisCreateEmployeeRequestDtoEmploymentStatusValue UnmappedValue = new HrisCreateEmployeeRequestDtoEmploymentStatusValue("unmapped_value");

        private static readonly Dictionary <string, HrisCreateEmployeeRequestDtoEmploymentStatusValue> _knownValues =
            new Dictionary <string, HrisCreateEmployeeRequestDtoEmploymentStatusValue> ()
            {
                ["active"] = Active,
                ["pending"] = Pending,
                ["terminated"] = Terminated,
                ["leave"] = Leave,
                ["inactive"] = Inactive,
                ["unknown"] = Unknown,
                ["unmapped_value"] = UnmappedValue
            };

        private static readonly ConcurrentDictionary<string, HrisCreateEmployeeRequestDtoEmploymentStatusValue> _values =
            new ConcurrentDictionary<string, HrisCreateEmployeeRequestDtoEmploymentStatusValue>(_knownValues);

        private HrisCreateEmployeeRequestDtoEmploymentStatusValue(string value)
        {
            if (value == null) throw new ArgumentNullException(nameof(value));
            Value = value;
        }

        public string Value { get; }

        public static HrisCreateEmployeeRequestDtoEmploymentStatusValue Of(string value)
        {
            return _values.GetOrAdd(value, _ => new HrisCreateEmployeeRequestDtoEmploymentStatusValue(value));
        }

        public static implicit operator HrisCreateEmployeeRequestDtoEmploymentStatusValue(string value) => Of(value);
        public static implicit operator string(HrisCreateEmployeeRequestDtoEmploymentStatusValue hriscreateemployeerequestdtoemploymentstatusvalue) => hriscreateemployeerequestdtoemploymentstatusvalue.Value;

        public static HrisCreateEmployeeRequestDtoEmploymentStatusValue[] Values()
        {
            return _values.Values.ToArray();
        }

        public override string ToString() => Value.ToString();

        public bool IsKnown()
        {
            return _knownValues.ContainsKey(Value);
        }

        public override bool Equals(object? obj) => Equals(obj as HrisCreateEmployeeRequestDtoEmploymentStatusValue);

        public bool Equals(HrisCreateEmployeeRequestDtoEmploymentStatusValue? other)
        {
            if (ReferenceEquals(this, other)) return true;
            if (other is null) return false;
            return string.Equals(Value, other.Value);
        }

        public override int GetHashCode() => Value.GetHashCode();
    }

}