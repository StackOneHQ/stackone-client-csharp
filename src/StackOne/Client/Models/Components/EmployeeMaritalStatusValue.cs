//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace StackOne.Client.Models.Components
{
    using Newtonsoft.Json;
    using StackOne.Client.Utils;
    using System;
    using System.Collections.Concurrent;
    using System.Collections.Generic;
    using System.Linq;

    [JsonConverter(typeof(OpenEnumConverter))]
    public class EmployeeMaritalStatusValue : IEquatable<EmployeeMaritalStatusValue>
    {
        public static readonly EmployeeMaritalStatusValue Single = new EmployeeMaritalStatusValue("single");
        public static readonly EmployeeMaritalStatusValue Married = new EmployeeMaritalStatusValue("married");
        public static readonly EmployeeMaritalStatusValue CommonLaw = new EmployeeMaritalStatusValue("common_law");
        public static readonly EmployeeMaritalStatusValue Divorced = new EmployeeMaritalStatusValue("divorced");
        public static readonly EmployeeMaritalStatusValue Widowed = new EmployeeMaritalStatusValue("widowed");
        public static readonly EmployeeMaritalStatusValue DomesticPartnership = new EmployeeMaritalStatusValue("domestic_partnership");
        public static readonly EmployeeMaritalStatusValue Separated = new EmployeeMaritalStatusValue("separated");
        public static readonly EmployeeMaritalStatusValue Other = new EmployeeMaritalStatusValue("other");
        public static readonly EmployeeMaritalStatusValue NotDisclosed = new EmployeeMaritalStatusValue("not_disclosed");
        public static readonly EmployeeMaritalStatusValue UnmappedValue = new EmployeeMaritalStatusValue("unmapped_value");

        private static readonly Dictionary <string, EmployeeMaritalStatusValue> _knownValues =
            new Dictionary <string, EmployeeMaritalStatusValue> ()
            {
                ["single"] = Single,
                ["married"] = Married,
                ["common_law"] = CommonLaw,
                ["divorced"] = Divorced,
                ["widowed"] = Widowed,
                ["domestic_partnership"] = DomesticPartnership,
                ["separated"] = Separated,
                ["other"] = Other,
                ["not_disclosed"] = NotDisclosed,
                ["unmapped_value"] = UnmappedValue
            };

        private static readonly ConcurrentDictionary<string, EmployeeMaritalStatusValue> _values =
            new ConcurrentDictionary<string, EmployeeMaritalStatusValue>(_knownValues);

        private EmployeeMaritalStatusValue(string value)
        {
            if (value == null) throw new ArgumentNullException(nameof(value));
            Value = value;
        }

        public string Value { get; }

        public static EmployeeMaritalStatusValue Of(string value)
        {
            return _values.GetOrAdd(value, _ => new EmployeeMaritalStatusValue(value));
        }

        public static implicit operator EmployeeMaritalStatusValue(string value) => Of(value);
        public static implicit operator string(EmployeeMaritalStatusValue employeemaritalstatusvalue) => employeemaritalstatusvalue.Value;

        public static EmployeeMaritalStatusValue[] Values()
        {
            return _values.Values.ToArray();
        }

        public override string ToString() => Value.ToString();

        public bool IsKnown()
        {
            return _knownValues.ContainsKey(Value);
        }

        public override bool Equals(object? obj) => Equals(obj as EmployeeMaritalStatusValue);

        public bool Equals(EmployeeMaritalStatusValue? other)
        {
            if (ReferenceEquals(this, other)) return true;
            if (other is null) return false;
            return string.Equals(Value, other.Value);
        }

        public override int GetHashCode() => Value.GetHashCode();
    }

}