//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace StackOne.Client.Models.Components
{
    using Newtonsoft.Json;
    using StackOne.Client.Utils;
    using System;
    using System.Collections.Concurrent;
    using System.Collections.Generic;
    using System.Linq;

    [JsonConverter(typeof(OpenEnumConverter))]
    public class DepartmentValue : IEquatable<DepartmentValue>
    {
        public static readonly DepartmentValue Workspace = new DepartmentValue("workspace");
        public static readonly DepartmentValue Team = new DepartmentValue("team");
        public static readonly DepartmentValue Department = new DepartmentValue("department");
        public static readonly DepartmentValue Group = new DepartmentValue("group");
        public static readonly DepartmentValue Organization = new DepartmentValue("organization");
        public static readonly DepartmentValue UnmappedValue = new DepartmentValue("unmapped_value");
        public static readonly DepartmentValue CostCenter = new DepartmentValue("cost_center");

        private static readonly Dictionary <string, DepartmentValue> _knownValues =
            new Dictionary <string, DepartmentValue> ()
            {
                ["workspace"] = Workspace,
                ["team"] = Team,
                ["department"] = Department,
                ["group"] = Group,
                ["organization"] = Organization,
                ["unmapped_value"] = UnmappedValue,
                ["cost_center"] = CostCenter
            };

        private static readonly ConcurrentDictionary<string, DepartmentValue> _values =
            new ConcurrentDictionary<string, DepartmentValue>(_knownValues);

        private DepartmentValue(string value)
        {
            if (value == null) throw new ArgumentNullException(nameof(value));
            Value = value;
        }

        public string Value { get; }

        public static DepartmentValue Of(string value)
        {
            return _values.GetOrAdd(value, _ => new DepartmentValue(value));
        }

        public static implicit operator DepartmentValue(string value) => Of(value);
        public static implicit operator string(DepartmentValue departmentvalue) => departmentvalue.Value;

        public static DepartmentValue[] Values()
        {
            return _values.Values.ToArray();
        }

        public override string ToString() => Value.ToString();

        public bool IsKnown()
        {
            return _knownValues.ContainsKey(Value);
        }

        public override bool Equals(object? obj) => Equals(obj as DepartmentValue);

        public bool Equals(DepartmentValue? other)
        {
            if (ReferenceEquals(this, other)) return true;
            if (other is null) return false;
            return string.Equals(Value, other.Value);
        }

        public override int GetHashCode() => Value.GetHashCode();
    }

}