//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace StackOne.Client.Models.Components
{
    using Newtonsoft.Json;
    using StackOne.Client.Utils;
    using System;
    using System.Collections.Concurrent;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The type of the answer.
    /// </summary>
    [JsonConverter(typeof(OpenEnumConverter))]
    public class AnswerValue : IEquatable<AnswerValue>
    {
        public static readonly AnswerValue ShortText = new AnswerValue("short_text");
        public static readonly AnswerValue LongText = new AnswerValue("long_text");
        public static readonly AnswerValue Attachment = new AnswerValue("attachment");
        public static readonly AnswerValue MultiSelect = new AnswerValue("multi_select");
        public static readonly AnswerValue SingleSelect = new AnswerValue("single_select");
        public static readonly AnswerValue Boolean = new AnswerValue("boolean");
        public static readonly AnswerValue Number = new AnswerValue("number");
        public static readonly AnswerValue Date = new AnswerValue("date");
        public static readonly AnswerValue Video = new AnswerValue("video");
        public static readonly AnswerValue ReferenceCheck = new AnswerValue("reference_check");
        public static readonly AnswerValue Url = new AnswerValue("url");
        public static readonly AnswerValue UnmappedValue = new AnswerValue("unmapped_value");

        private static readonly Dictionary <string, AnswerValue> _knownValues =
            new Dictionary <string, AnswerValue> ()
            {
                ["short_text"] = ShortText,
                ["long_text"] = LongText,
                ["attachment"] = Attachment,
                ["multi_select"] = MultiSelect,
                ["single_select"] = SingleSelect,
                ["boolean"] = Boolean,
                ["number"] = Number,
                ["date"] = Date,
                ["video"] = Video,
                ["reference_check"] = ReferenceCheck,
                ["url"] = Url,
                ["unmapped_value"] = UnmappedValue
            };

        private static readonly ConcurrentDictionary<string, AnswerValue> _values =
            new ConcurrentDictionary<string, AnswerValue>(_knownValues);

        private AnswerValue(string value)
        {
            if (value == null) throw new ArgumentNullException(nameof(value));
            Value = value;
        }

        public string Value { get; }

        public static AnswerValue Of(string value)
        {
            return _values.GetOrAdd(value, _ => new AnswerValue(value));
        }

        public static implicit operator AnswerValue(string value) => Of(value);
        public static implicit operator string(AnswerValue answervalue) => answervalue.Value;

        public static AnswerValue[] Values()
        {
            return _values.Values.ToArray();
        }

        public override string ToString() => Value.ToString();

        public bool IsKnown()
        {
            return _knownValues.ContainsKey(Value);
        }

        public override bool Equals(object? obj) => Equals(obj as AnswerValue);

        public bool Equals(AnswerValue? other)
        {
            if (ReferenceEquals(this, other)) return true;
            if (other is null) return false;
            return string.Equals(Value, other.Value);
        }

        public override int GetHashCode() => Value.GetHashCode();
    }

}