//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace StackOneHQ.Client
{
    using Newtonsoft.Json;
    using StackOneHQ.Client.Hooks;
    using StackOneHQ.Client.Models.Components;
    using StackOneHQ.Client.Models.Errors;
    using StackOneHQ.Client.Utils;
    using StackOneHQ.Client.Utils.Retries;
    using System;
    using System.Collections.Generic;
    using System.Net.Http;
    using System.Threading.Tasks;

    /// <summary>
    /// Accounting: The documentation for the StackOne Unified API - ACCOUNTING
    /// </summary>
    public interface IStackOneHQClient
    {
        public IConnectSessions ConnectSessions { get; }

        /// <summary>
        /// Chart of accounts.
        /// </summary>
        public IAccounts Accounts { get; }

        /// <summary>
        /// API requests and response logs.
        /// </summary>
        public IRequestLogs RequestLogs { get; }

        /// <summary>
        /// Retrieve metadata for connectors.
        /// </summary>
        public IConnectors Connectors { get; }

        /// <summary>
        /// Model Context Protocol endpoint.
        /// </summary>
        public IMcp Mcp { get; }

        /// <summary>
        /// Routing API requests through StackOne directly to the underlying provider.
        /// </summary>
        public IProxy Proxy { get; }

        /// <summary>
        /// Retrieve Actions metadata and definitions.
        /// </summary>
        public IActions Actions { get; }
        public IHris Hris { get; }
        public IAts Ats { get; }
        public IApplications Applications { get; }
        public IInterviews Interviews { get; }
        public IBackgroundChecks BackgroundChecks { get; }
        public IDocuments Documents { get; }
        public ICrm Crm { get; }
        public IIam Iam { get; }
        public IMarketing Marketing { get; }
        public ICourses Courses { get; }
        public ILms Lms { get; }
        public ITicketing Ticketing { get; }
        public IDrives Drives { get; }
        public IMessaging Messaging { get; }
        public IAccounting Accounting { get; }
    }


    /// <summary>
    /// Accounting: The documentation for the StackOne Unified API - ACCOUNTING
    /// </summary>
    public class StackOneHQClient: IStackOneHQClient
    {
        public SDKConfig SDKConfiguration { get; private set; }

        private const string _language = "csharp";
        private const string _sdkVersion = "0.7.0";
        private const string _sdkGenVersion = "2.727.4";
        private const string _openapiDocVersion = "1.0.0";
        public IConnectSessions ConnectSessions { get; private set; }
        public IAccounts Accounts { get; private set; }
        public IRequestLogs RequestLogs { get; private set; }
        public IConnectors Connectors { get; private set; }
        public IMcp Mcp { get; private set; }
        public IProxy Proxy { get; private set; }
        public IActions Actions { get; private set; }
        public IHris Hris { get; private set; }
        public IAts Ats { get; private set; }
        public IApplications Applications { get; private set; }
        public IInterviews Interviews { get; private set; }
        public IBackgroundChecks BackgroundChecks { get; private set; }
        public IDocuments Documents { get; private set; }
        public ICrm Crm { get; private set; }
        public IIam Iam { get; private set; }
        public IMarketing Marketing { get; private set; }
        public ICourses Courses { get; private set; }
        public ILms Lms { get; private set; }
        public ITicketing Ticketing { get; private set; }
        public IDrives Drives { get; private set; }
        public IMessaging Messaging { get; private set; }
        public IAccounting Accounting { get; private set; }

        public StackOneHQClient(SDKConfig config)
        {
            SDKConfiguration = config;
            InitHooks();

            ConnectSessions = new ConnectSessions(SDKConfiguration);

            Accounts = new Accounts(SDKConfiguration);

            RequestLogs = new RequestLogs(SDKConfiguration);

            Connectors = new Connectors(SDKConfiguration);

            Mcp = new Mcp(SDKConfiguration);

            Proxy = new Proxy(SDKConfiguration);

            Actions = new Actions(SDKConfiguration);

            Hris = new Hris(SDKConfiguration);

            Ats = new Ats(SDKConfiguration);

            Applications = new Applications(SDKConfiguration);

            Interviews = new Interviews(SDKConfiguration);

            BackgroundChecks = new BackgroundChecks(SDKConfiguration);

            Documents = new Documents(SDKConfiguration);

            Crm = new Crm(SDKConfiguration);

            Iam = new Iam(SDKConfiguration);

            Marketing = new Marketing(SDKConfiguration);

            Courses = new Courses(SDKConfiguration);

            Lms = new Lms(SDKConfiguration);

            Ticketing = new Ticketing(SDKConfiguration);

            Drives = new Drives(SDKConfiguration);

            Messaging = new Messaging(SDKConfiguration);

            Accounting = new Accounting(SDKConfiguration);
        }

        public StackOneHQClient(StackOneHQ.Client.Models.Components.Security? security = null, Func<StackOneHQ.Client.Models.Components.Security>? securitySource = null, int? serverIndex = null, string? serverUrl = null, Dictionary<string, string>? urlParams = null, ISpeakeasyHttpClient? client = null, RetryConfig? retryConfig = null)
        {
            if (serverIndex != null)
            {
                if (serverIndex.Value < 0 || serverIndex.Value >= SDKConfig.ServerList.Length)
                {
                    throw new Exception($"Invalid server index {serverIndex.Value}");
                }
            }

            if (serverUrl != null)
            {
                if (urlParams != null)
                {
                    serverUrl = Utilities.TemplateUrl(serverUrl, urlParams);
                }
            }
            Func<StackOneHQ.Client.Models.Components.Security>? _securitySource = null;

            if(securitySource != null)
            {
                _securitySource = securitySource;
            }
            else if(security != null)
            {
                _securitySource = () => security;
            }

            SDKConfiguration = new SDKConfig(client)
            {
                ServerIndex = serverIndex == null ? 0 : serverIndex.Value,
                ServerUrl = serverUrl == null ? "" : serverUrl,
                SecuritySource = _securitySource,
                RetryConfig = retryConfig
            };

            InitHooks();

            ConnectSessions = new ConnectSessions(SDKConfiguration);

            Accounts = new Accounts(SDKConfiguration);

            RequestLogs = new RequestLogs(SDKConfiguration);

            Connectors = new Connectors(SDKConfiguration);

            Mcp = new Mcp(SDKConfiguration);

            Proxy = new Proxy(SDKConfiguration);

            Actions = new Actions(SDKConfiguration);

            Hris = new Hris(SDKConfiguration);

            Ats = new Ats(SDKConfiguration);

            Applications = new Applications(SDKConfiguration);

            Interviews = new Interviews(SDKConfiguration);

            BackgroundChecks = new BackgroundChecks(SDKConfiguration);

            Documents = new Documents(SDKConfiguration);

            Crm = new Crm(SDKConfiguration);

            Iam = new Iam(SDKConfiguration);

            Marketing = new Marketing(SDKConfiguration);

            Courses = new Courses(SDKConfiguration);

            Lms = new Lms(SDKConfiguration);

            Ticketing = new Ticketing(SDKConfiguration);

            Drives = new Drives(SDKConfiguration);

            Messaging = new Messaging(SDKConfiguration);

            Accounting = new Accounting(SDKConfiguration);
        }

        private void InitHooks()
        {
            SDKConfiguration = SDKConfiguration.Hooks.SDKInit(SDKConfiguration);
        }

        public class SDKBuilder
        {
            private SDKConfig _sdkConfig = new SDKConfig(client: new SpeakeasyHttpClient());

            public SDKBuilder() { }

            public SDKBuilder WithServerIndex(int serverIndex)
            {
                if (serverIndex < 0 || serverIndex >= SDKConfig.ServerList.Length)
                {
                    throw new Exception($"Invalid server index {serverIndex}");
                }
                _sdkConfig.ServerIndex = serverIndex;
                return this;
            }

            public SDKBuilder WithServerUrl(string serverUrl, Dictionary<string, string>? serverVariables = null)
            {
                if (serverVariables != null)
                {
                    serverUrl = Utilities.TemplateUrl(serverUrl, serverVariables);
                }
                _sdkConfig.ServerUrl = serverUrl;
                return this;
            }

            public SDKBuilder WithSecuritySource(Func<StackOneHQ.Client.Models.Components.Security> securitySource)
            {
                _sdkConfig.SecuritySource = securitySource;
                return this;
            }

            public SDKBuilder WithSecurity(StackOneHQ.Client.Models.Components.Security security)
            {
                _sdkConfig.SecuritySource = () => security;
                return this;
            }

            public SDKBuilder WithClient(ISpeakeasyHttpClient client)
            {
                _sdkConfig.Client = client;
                return this;
            }

            public SDKBuilder WithRetryConfig(RetryConfig retryConfig)
            {
                _sdkConfig.RetryConfig = retryConfig;
                return this;
            }

            public StackOneHQClient Build()
            {
              return new StackOneHQClient(_sdkConfig);
            }

        }

        public static SDKBuilder Builder() => new SDKBuilder();
    }
}