//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace StackOneHQ.Client.Models.Components
{
    using Newtonsoft.Json;
    using StackOneHQ.Client.Utils;
    using System;
    using System.Collections.Concurrent;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The type of the employment.
    /// </summary>
    [JsonConverter(typeof(OpenEnumConverter))]
    public class JobPostingEmploymentTypeValue : IEquatable<JobPostingEmploymentTypeValue>
    {
        public static readonly JobPostingEmploymentTypeValue Contractor = new JobPostingEmploymentTypeValue("contractor");
        public static readonly JobPostingEmploymentTypeValue Intern = new JobPostingEmploymentTypeValue("intern");
        public static readonly JobPostingEmploymentTypeValue Permanent = new JobPostingEmploymentTypeValue("permanent");
        public static readonly JobPostingEmploymentTypeValue Apprentice = new JobPostingEmploymentTypeValue("apprentice");
        public static readonly JobPostingEmploymentTypeValue Freelance = new JobPostingEmploymentTypeValue("freelance");
        public static readonly JobPostingEmploymentTypeValue Terminated = new JobPostingEmploymentTypeValue("terminated");
        public static readonly JobPostingEmploymentTypeValue Temporary = new JobPostingEmploymentTypeValue("temporary");
        public static readonly JobPostingEmploymentTypeValue Seasonal = new JobPostingEmploymentTypeValue("seasonal");
        public static readonly JobPostingEmploymentTypeValue Volunteer = new JobPostingEmploymentTypeValue("volunteer");
        public static readonly JobPostingEmploymentTypeValue Probation = new JobPostingEmploymentTypeValue("probation");
        public static readonly JobPostingEmploymentTypeValue Internal = new JobPostingEmploymentTypeValue("internal");
        public static readonly JobPostingEmploymentTypeValue External = new JobPostingEmploymentTypeValue("external");
        public static readonly JobPostingEmploymentTypeValue Expatriate = new JobPostingEmploymentTypeValue("expatriate");
        public static readonly JobPostingEmploymentTypeValue EmployerOfRecord = new JobPostingEmploymentTypeValue("employer_of_record");
        public static readonly JobPostingEmploymentTypeValue Casual = new JobPostingEmploymentTypeValue("casual");
        public static readonly JobPostingEmploymentTypeValue Programme = new JobPostingEmploymentTypeValue("Programme");
        public static readonly JobPostingEmploymentTypeValue UnmappedValue = new JobPostingEmploymentTypeValue("unmapped_value");

        private static readonly Dictionary <string, JobPostingEmploymentTypeValue> _knownValues =
            new Dictionary <string, JobPostingEmploymentTypeValue> ()
            {
                ["contractor"] = Contractor,
                ["intern"] = Intern,
                ["permanent"] = Permanent,
                ["apprentice"] = Apprentice,
                ["freelance"] = Freelance,
                ["terminated"] = Terminated,
                ["temporary"] = Temporary,
                ["seasonal"] = Seasonal,
                ["volunteer"] = Volunteer,
                ["probation"] = Probation,
                ["internal"] = Internal,
                ["external"] = External,
                ["expatriate"] = Expatriate,
                ["employer_of_record"] = EmployerOfRecord,
                ["casual"] = Casual,
                ["Programme"] = Programme,
                ["unmapped_value"] = UnmappedValue
            };

        private static readonly ConcurrentDictionary<string, JobPostingEmploymentTypeValue> _values =
            new ConcurrentDictionary<string, JobPostingEmploymentTypeValue>(_knownValues);

        private JobPostingEmploymentTypeValue(string value)
        {
            if (value == null) throw new ArgumentNullException(nameof(value));
            Value = value;
        }

        public string Value { get; }

        public static JobPostingEmploymentTypeValue Of(string value)
        {
            return _values.GetOrAdd(value, _ => new JobPostingEmploymentTypeValue(value));
        }

        public static implicit operator JobPostingEmploymentTypeValue(string value) => Of(value);
        public static implicit operator string(JobPostingEmploymentTypeValue jobpostingemploymenttypevalue) => jobpostingemploymenttypevalue.Value;

        public static JobPostingEmploymentTypeValue[] Values()
        {
            return _values.Values.ToArray();
        }

        public override string ToString() => Value.ToString();

        public bool IsKnown()
        {
            return _knownValues.ContainsKey(Value);
        }

        public override bool Equals(object? obj) => Equals(obj as JobPostingEmploymentTypeValue);

        public bool Equals(JobPostingEmploymentTypeValue? other)
        {
            if (ReferenceEquals(this, other)) return true;
            if (other is null) return false;
            return string.Equals(Value, other.Value);
        }

        public override int GetHashCode() => Value.GetHashCode();
    }

}