//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace StackOneHQ.Client.Models.Components
{
    using Newtonsoft.Json;
    using StackOneHQ.Client.Utils;
    using System;
    using System.Collections.Concurrent;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The type of the answer.
    /// </summary>
    [JsonConverter(typeof(OpenEnumConverter))]
    public class CreateAnswerValue : IEquatable<CreateAnswerValue>
    {
        public static readonly CreateAnswerValue ShortText = new CreateAnswerValue("short_text");
        public static readonly CreateAnswerValue LongText = new CreateAnswerValue("long_text");
        public static readonly CreateAnswerValue Attachment = new CreateAnswerValue("attachment");
        public static readonly CreateAnswerValue MultiSelect = new CreateAnswerValue("multi_select");
        public static readonly CreateAnswerValue SingleSelect = new CreateAnswerValue("single_select");
        public static readonly CreateAnswerValue Boolean = new CreateAnswerValue("boolean");
        public static readonly CreateAnswerValue Number = new CreateAnswerValue("number");
        public static readonly CreateAnswerValue Date = new CreateAnswerValue("date");
        public static readonly CreateAnswerValue Video = new CreateAnswerValue("video");
        public static readonly CreateAnswerValue ReferenceCheck = new CreateAnswerValue("reference_check");
        public static readonly CreateAnswerValue Url = new CreateAnswerValue("url");
        public static readonly CreateAnswerValue UnmappedValue = new CreateAnswerValue("unmapped_value");

        private static readonly Dictionary <string, CreateAnswerValue> _knownValues =
            new Dictionary <string, CreateAnswerValue> ()
            {
                ["short_text"] = ShortText,
                ["long_text"] = LongText,
                ["attachment"] = Attachment,
                ["multi_select"] = MultiSelect,
                ["single_select"] = SingleSelect,
                ["boolean"] = Boolean,
                ["number"] = Number,
                ["date"] = Date,
                ["video"] = Video,
                ["reference_check"] = ReferenceCheck,
                ["url"] = Url,
                ["unmapped_value"] = UnmappedValue
            };

        private static readonly ConcurrentDictionary<string, CreateAnswerValue> _values =
            new ConcurrentDictionary<string, CreateAnswerValue>(_knownValues);

        private CreateAnswerValue(string value)
        {
            if (value == null) throw new ArgumentNullException(nameof(value));
            Value = value;
        }

        public string Value { get; }

        public static CreateAnswerValue Of(string value)
        {
            return _values.GetOrAdd(value, _ => new CreateAnswerValue(value));
        }

        public static implicit operator CreateAnswerValue(string value) => Of(value);
        public static implicit operator string(CreateAnswerValue createanswervalue) => createanswervalue.Value;

        public static CreateAnswerValue[] Values()
        {
            return _values.Values.ToArray();
        }

        public override string ToString() => Value.ToString();

        public bool IsKnown()
        {
            return _knownValues.ContainsKey(Value);
        }

        public override bool Equals(object? obj) => Equals(obj as CreateAnswerValue);

        public bool Equals(CreateAnswerValue? other)
        {
            if (ReferenceEquals(this, other)) return true;
            if (other is null) return false;
            return string.Equals(Value, other.Value);
        }

        public override int GetHashCode() => Value.GetHashCode();
    }

}