//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace StackOneHQ.Client.Models.Components
{
    using Newtonsoft.Json;
    using StackOneHQ.Client.Utils;
    using System;
    using System.Collections.Concurrent;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The unified message type.
    /// </summary>
    [JsonConverter(typeof(OpenEnumConverter))]
    public class EmailMessagesValue : IEquatable<EmailMessagesValue>
    {
        public static readonly EmailMessagesValue Email = new EmailMessagesValue("email");
        public static readonly EmailMessagesValue Sms = new EmailMessagesValue("sms");
        public static readonly EmailMessagesValue Push = new EmailMessagesValue("push");
        public static readonly EmailMessagesValue WebPush = new EmailMessagesValue("web_push");
        public static readonly EmailMessagesValue IosPush = new EmailMessagesValue("ios_push");
        public static readonly EmailMessagesValue AndroidPush = new EmailMessagesValue("android_push");
        public static readonly EmailMessagesValue AppPush = new EmailMessagesValue("app_push");
        public static readonly EmailMessagesValue OmniChannel = new EmailMessagesValue("omni_channel");
        public static readonly EmailMessagesValue ContentBlock = new EmailMessagesValue("content_block");
        public static readonly EmailMessagesValue InApp = new EmailMessagesValue("in_app");
        public static readonly EmailMessagesValue Unknown = new EmailMessagesValue("unknown");
        public static readonly EmailMessagesValue UnmappedValue = new EmailMessagesValue("unmapped_value");

        private static readonly Dictionary <string, EmailMessagesValue> _knownValues =
            new Dictionary <string, EmailMessagesValue> ()
            {
                ["email"] = Email,
                ["sms"] = Sms,
                ["push"] = Push,
                ["web_push"] = WebPush,
                ["ios_push"] = IosPush,
                ["android_push"] = AndroidPush,
                ["app_push"] = AppPush,
                ["omni_channel"] = OmniChannel,
                ["content_block"] = ContentBlock,
                ["in_app"] = InApp,
                ["unknown"] = Unknown,
                ["unmapped_value"] = UnmappedValue
            };

        private static readonly ConcurrentDictionary<string, EmailMessagesValue> _values =
            new ConcurrentDictionary<string, EmailMessagesValue>(_knownValues);

        private EmailMessagesValue(string value)
        {
            if (value == null) throw new ArgumentNullException(nameof(value));
            Value = value;
        }

        public string Value { get; }

        public static EmailMessagesValue Of(string value)
        {
            return _values.GetOrAdd(value, _ => new EmailMessagesValue(value));
        }

        public static implicit operator EmailMessagesValue(string value) => Of(value);
        public static implicit operator string(EmailMessagesValue emailmessagesvalue) => emailmessagesvalue.Value;

        public static EmailMessagesValue[] Values()
        {
            return _values.Values.ToArray();
        }

        public override string ToString() => Value.ToString();

        public bool IsKnown()
        {
            return _knownValues.ContainsKey(Value);
        }

        public override bool Equals(object? obj) => Equals(obj as EmailMessagesValue);

        public bool Equals(EmailMessagesValue? other)
        {
            if (ReferenceEquals(this, other)) return true;
            if (other is null) return false;
            return string.Equals(Value, other.Value);
        }

        public override int GetHashCode() => Value.GetHashCode();
    }

}