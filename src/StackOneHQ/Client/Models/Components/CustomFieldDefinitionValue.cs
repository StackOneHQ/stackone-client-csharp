//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace StackOneHQ.Client.Models.Components
{
    using Newtonsoft.Json;
    using StackOneHQ.Client.Utils;
    using System;
    using System.Collections.Concurrent;
    using System.Collections.Generic;
    using System.Linq;

    [JsonConverter(typeof(OpenEnumConverter))]
    public class CustomFieldDefinitionValue : IEquatable<CustomFieldDefinitionValue>
    {
        public static readonly CustomFieldDefinitionValue Date = new CustomFieldDefinitionValue("date");
        public static readonly CustomFieldDefinitionValue Float = new CustomFieldDefinitionValue("float");
        public static readonly CustomFieldDefinitionValue Integer = new CustomFieldDefinitionValue("integer");
        public static readonly CustomFieldDefinitionValue List = new CustomFieldDefinitionValue("list");
        public static readonly CustomFieldDefinitionValue Checkbox = new CustomFieldDefinitionValue("checkbox");
        public static readonly CustomFieldDefinitionValue Text = new CustomFieldDefinitionValue("text");
        public static readonly CustomFieldDefinitionValue Boolean = new CustomFieldDefinitionValue("boolean");
        public static readonly CustomFieldDefinitionValue SingleSelect = new CustomFieldDefinitionValue("single_select");
        public static readonly CustomFieldDefinitionValue MultiSelect = new CustomFieldDefinitionValue("multi_select");
        public static readonly CustomFieldDefinitionValue Url = new CustomFieldDefinitionValue("url");
        public static readonly CustomFieldDefinitionValue Other = new CustomFieldDefinitionValue("other");
        public static readonly CustomFieldDefinitionValue UnmappedValue = new CustomFieldDefinitionValue("unmapped_value");

        private static readonly Dictionary <string, CustomFieldDefinitionValue> _knownValues =
            new Dictionary <string, CustomFieldDefinitionValue> ()
            {
                ["date"] = Date,
                ["float"] = Float,
                ["integer"] = Integer,
                ["list"] = List,
                ["checkbox"] = Checkbox,
                ["text"] = Text,
                ["boolean"] = Boolean,
                ["single_select"] = SingleSelect,
                ["multi_select"] = MultiSelect,
                ["url"] = Url,
                ["other"] = Other,
                ["unmapped_value"] = UnmappedValue
            };

        private static readonly ConcurrentDictionary<string, CustomFieldDefinitionValue> _values =
            new ConcurrentDictionary<string, CustomFieldDefinitionValue>(_knownValues);

        private CustomFieldDefinitionValue(string value)
        {
            if (value == null) throw new ArgumentNullException(nameof(value));
            Value = value;
        }

        public string Value { get; }

        public static CustomFieldDefinitionValue Of(string value)
        {
            return _values.GetOrAdd(value, _ => new CustomFieldDefinitionValue(value));
        }

        public static implicit operator CustomFieldDefinitionValue(string value) => Of(value);
        public static implicit operator string(CustomFieldDefinitionValue customfielddefinitionvalue) => customfielddefinitionvalue.Value;

        public static CustomFieldDefinitionValue[] Values()
        {
            return _values.Values.ToArray();
        }

        public override string ToString() => Value.ToString();

        public bool IsKnown()
        {
            return _knownValues.ContainsKey(Value);
        }

        public override bool Equals(object? obj) => Equals(obj as CustomFieldDefinitionValue);

        public bool Equals(CustomFieldDefinitionValue? other)
        {
            if (ReferenceEquals(this, other)) return true;
            if (other is null) return false;
            return string.Equals(Value, other.Value);
        }

        public override int GetHashCode() => Value.GetHashCode();
    }

}