//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace StackOneHQ.Client.Models.Components
{
    using Newtonsoft.Json;
    using StackOneHQ.Client.Utils;
    using System;
    using System.Collections.Concurrent;
    using System.Collections.Generic;
    using System.Linq;
    
    /// <summary>
    /// The type of the interview.
    /// </summary>
    [JsonConverter(typeof(OpenEnumConverter))]
    public class InterviewPartValue : IEquatable<InterviewPartValue>
    {
        public static readonly InterviewPartValue Screening = new InterviewPartValue("screening");
        public static readonly InterviewPartValue Lunch = new InterviewPartValue("lunch");
        public static readonly InterviewPartValue OnSite = new InterviewPartValue("on_site");
        public static readonly InterviewPartValue Presentation = new InterviewPartValue("presentation");
        public static readonly InterviewPartValue Sell = new InterviewPartValue("sell");
        public static readonly InterviewPartValue Culture = new InterviewPartValue("culture");
        public static readonly InterviewPartValue Informal = new InterviewPartValue("informal");
        public static readonly InterviewPartValue Test = new InterviewPartValue("test");
        public static readonly InterviewPartValue Phone = new InterviewPartValue("phone");
        public static readonly InterviewPartValue Video = new InterviewPartValue("video");
        public static readonly InterviewPartValue UnmappedValue = new InterviewPartValue("unmapped_value");

        private static readonly Dictionary <string, InterviewPartValue> _knownValues =
            new Dictionary <string, InterviewPartValue> ()
            {
                ["screening"] = Screening,
                ["lunch"] = Lunch,
                ["on_site"] = OnSite,
                ["presentation"] = Presentation,
                ["sell"] = Sell,
                ["culture"] = Culture,
                ["informal"] = Informal,
                ["test"] = Test,
                ["phone"] = Phone,
                ["video"] = Video,
                ["unmapped_value"] = UnmappedValue
            };

        private static readonly ConcurrentDictionary<string, InterviewPartValue> _values =
            new ConcurrentDictionary<string, InterviewPartValue>(_knownValues);

        private InterviewPartValue(string value)
        {
            if (value == null) throw new ArgumentNullException(nameof(value));
            Value = value;
        }

        public string Value { get; }

        public static InterviewPartValue Of(string value)
        {
            return _values.GetOrAdd(value, _ => new InterviewPartValue(value));
        }

        public static implicit operator InterviewPartValue(string value) => Of(value);
        public static implicit operator string(InterviewPartValue interviewpartvalue) => interviewpartvalue.Value;

        public static InterviewPartValue[] Values()
        {
            return _values.Values.ToArray();
        }

        public override string ToString() => Value.ToString();

        public bool IsKnown()
        {
            return _knownValues.ContainsKey(Value);
        }

        public override bool Equals(object? obj) => Equals(obj as InterviewPartValue);

        public bool Equals(InterviewPartValue? other)
        {
            if (ReferenceEquals(this, other)) return true;
            if (other is null) return false;
            return string.Equals(Value, other.Value);
        }

        public override int GetHashCode() => Value.GetHashCode();
    }

}