//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace StackOneHQ.Client.Models.Components
{
    using Newtonsoft.Json;
    using StackOneHQ.Client.Utils;
    using System;
    using System.Collections.Concurrent;
    using System.Collections.Generic;
    using System.Linq;
    
    /// <summary>
    /// The type of the employment.
    /// </summary>
    [JsonConverter(typeof(OpenEnumConverter))]
    public class HrisUpdateEmployeeRequestDtoEmploymentTypeValue1 : IEquatable<HrisUpdateEmployeeRequestDtoEmploymentTypeValue1>
    {
        public static readonly HrisUpdateEmployeeRequestDtoEmploymentTypeValue1 Contractor = new HrisUpdateEmployeeRequestDtoEmploymentTypeValue1("contractor");
        public static readonly HrisUpdateEmployeeRequestDtoEmploymentTypeValue1 Intern = new HrisUpdateEmployeeRequestDtoEmploymentTypeValue1("intern");
        public static readonly HrisUpdateEmployeeRequestDtoEmploymentTypeValue1 Permanent = new HrisUpdateEmployeeRequestDtoEmploymentTypeValue1("permanent");
        public static readonly HrisUpdateEmployeeRequestDtoEmploymentTypeValue1 Apprentice = new HrisUpdateEmployeeRequestDtoEmploymentTypeValue1("apprentice");
        public static readonly HrisUpdateEmployeeRequestDtoEmploymentTypeValue1 Freelance = new HrisUpdateEmployeeRequestDtoEmploymentTypeValue1("freelance");
        public static readonly HrisUpdateEmployeeRequestDtoEmploymentTypeValue1 Terminated = new HrisUpdateEmployeeRequestDtoEmploymentTypeValue1("terminated");
        public static readonly HrisUpdateEmployeeRequestDtoEmploymentTypeValue1 Temporary = new HrisUpdateEmployeeRequestDtoEmploymentTypeValue1("temporary");
        public static readonly HrisUpdateEmployeeRequestDtoEmploymentTypeValue1 Seasonal = new HrisUpdateEmployeeRequestDtoEmploymentTypeValue1("seasonal");
        public static readonly HrisUpdateEmployeeRequestDtoEmploymentTypeValue1 Volunteer = new HrisUpdateEmployeeRequestDtoEmploymentTypeValue1("volunteer");
        public static readonly HrisUpdateEmployeeRequestDtoEmploymentTypeValue1 Probation = new HrisUpdateEmployeeRequestDtoEmploymentTypeValue1("probation");
        public static readonly HrisUpdateEmployeeRequestDtoEmploymentTypeValue1 Internal = new HrisUpdateEmployeeRequestDtoEmploymentTypeValue1("internal");
        public static readonly HrisUpdateEmployeeRequestDtoEmploymentTypeValue1 External = new HrisUpdateEmployeeRequestDtoEmploymentTypeValue1("external");
        public static readonly HrisUpdateEmployeeRequestDtoEmploymentTypeValue1 Expatriate = new HrisUpdateEmployeeRequestDtoEmploymentTypeValue1("expatriate");
        public static readonly HrisUpdateEmployeeRequestDtoEmploymentTypeValue1 EmployerOfRecord = new HrisUpdateEmployeeRequestDtoEmploymentTypeValue1("employer_of_record");
        public static readonly HrisUpdateEmployeeRequestDtoEmploymentTypeValue1 Casual = new HrisUpdateEmployeeRequestDtoEmploymentTypeValue1("casual");
        public static readonly HrisUpdateEmployeeRequestDtoEmploymentTypeValue1 Programme = new HrisUpdateEmployeeRequestDtoEmploymentTypeValue1("Programme");
        public static readonly HrisUpdateEmployeeRequestDtoEmploymentTypeValue1 UnmappedValue = new HrisUpdateEmployeeRequestDtoEmploymentTypeValue1("unmapped_value");

        private static readonly Dictionary <string, HrisUpdateEmployeeRequestDtoEmploymentTypeValue1> _knownValues =
            new Dictionary <string, HrisUpdateEmployeeRequestDtoEmploymentTypeValue1> ()
            {
                ["contractor"] = Contractor,
                ["intern"] = Intern,
                ["permanent"] = Permanent,
                ["apprentice"] = Apprentice,
                ["freelance"] = Freelance,
                ["terminated"] = Terminated,
                ["temporary"] = Temporary,
                ["seasonal"] = Seasonal,
                ["volunteer"] = Volunteer,
                ["probation"] = Probation,
                ["internal"] = Internal,
                ["external"] = External,
                ["expatriate"] = Expatriate,
                ["employer_of_record"] = EmployerOfRecord,
                ["casual"] = Casual,
                ["Programme"] = Programme,
                ["unmapped_value"] = UnmappedValue
            };

        private static readonly ConcurrentDictionary<string, HrisUpdateEmployeeRequestDtoEmploymentTypeValue1> _values =
            new ConcurrentDictionary<string, HrisUpdateEmployeeRequestDtoEmploymentTypeValue1>(_knownValues);

        private HrisUpdateEmployeeRequestDtoEmploymentTypeValue1(string value)
        {
            if (value == null) throw new ArgumentNullException(nameof(value));
            Value = value;
        }

        public string Value { get; }

        public static HrisUpdateEmployeeRequestDtoEmploymentTypeValue1 Of(string value)
        {
            return _values.GetOrAdd(value, _ => new HrisUpdateEmployeeRequestDtoEmploymentTypeValue1(value));
        }

        public static implicit operator HrisUpdateEmployeeRequestDtoEmploymentTypeValue1(string value) => Of(value);
        public static implicit operator string(HrisUpdateEmployeeRequestDtoEmploymentTypeValue1 hrisupdateemployeerequestdtoemploymenttypevalue1) => hrisupdateemployeerequestdtoemploymenttypevalue1.Value;

        public static HrisUpdateEmployeeRequestDtoEmploymentTypeValue1[] Values()
        {
            return _values.Values.ToArray();
        }

        public override string ToString() => Value.ToString();

        public bool IsKnown()
        {
            return _knownValues.ContainsKey(Value);
        }

        public override bool Equals(object? obj) => Equals(obj as HrisUpdateEmployeeRequestDtoEmploymentTypeValue1);

        public bool Equals(HrisUpdateEmployeeRequestDtoEmploymentTypeValue1? other)
        {
            if (ReferenceEquals(this, other)) return true;
            if (other is null) return false;
            return string.Equals(Value, other.Value);
        }

        public override int GetHashCode() => Value.GetHashCode();
    }

}