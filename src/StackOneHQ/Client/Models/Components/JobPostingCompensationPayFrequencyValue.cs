//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace StackOneHQ.Client.Models.Components
{
    using Newtonsoft.Json;
    using StackOneHQ.Client.Utils;
    using System;
    using System.Collections.Concurrent;
    using System.Collections.Generic;
    using System.Linq;
    
    /// <summary>
    /// The pay frequency of the job postings.
    /// </summary>
    [JsonConverter(typeof(OpenEnumConverter))]
    public class JobPostingCompensationPayFrequencyValue : IEquatable<JobPostingCompensationPayFrequencyValue>
    {
        public static readonly JobPostingCompensationPayFrequencyValue Hourly = new JobPostingCompensationPayFrequencyValue("hourly");
        public static readonly JobPostingCompensationPayFrequencyValue Weekly = new JobPostingCompensationPayFrequencyValue("weekly");
        public static readonly JobPostingCompensationPayFrequencyValue BiWeekly = new JobPostingCompensationPayFrequencyValue("bi_weekly");
        public static readonly JobPostingCompensationPayFrequencyValue FourWeekly = new JobPostingCompensationPayFrequencyValue("four_weekly");
        public static readonly JobPostingCompensationPayFrequencyValue SemiMonthly = new JobPostingCompensationPayFrequencyValue("semi_monthly");
        public static readonly JobPostingCompensationPayFrequencyValue Monthly = new JobPostingCompensationPayFrequencyValue("monthly");
        public static readonly JobPostingCompensationPayFrequencyValue BiMonthly = new JobPostingCompensationPayFrequencyValue("bi_monthly");
        public static readonly JobPostingCompensationPayFrequencyValue Quarterly = new JobPostingCompensationPayFrequencyValue("quarterly");
        public static readonly JobPostingCompensationPayFrequencyValue SemiAnnually = new JobPostingCompensationPayFrequencyValue("semi_annually");
        public static readonly JobPostingCompensationPayFrequencyValue Yearly = new JobPostingCompensationPayFrequencyValue("yearly");
        public static readonly JobPostingCompensationPayFrequencyValue ThirteenMonthly = new JobPostingCompensationPayFrequencyValue("thirteen_monthly");
        public static readonly JobPostingCompensationPayFrequencyValue ProRata = new JobPostingCompensationPayFrequencyValue("pro_rata");
        public static readonly JobPostingCompensationPayFrequencyValue UnmappedValue = new JobPostingCompensationPayFrequencyValue("unmapped_value");
        public static readonly JobPostingCompensationPayFrequencyValue HalfYearly = new JobPostingCompensationPayFrequencyValue("half_yearly");
        public static readonly JobPostingCompensationPayFrequencyValue Daily = new JobPostingCompensationPayFrequencyValue("daily");

        private static readonly Dictionary <string, JobPostingCompensationPayFrequencyValue> _knownValues =
            new Dictionary <string, JobPostingCompensationPayFrequencyValue> ()
            {
                ["hourly"] = Hourly,
                ["weekly"] = Weekly,
                ["bi_weekly"] = BiWeekly,
                ["four_weekly"] = FourWeekly,
                ["semi_monthly"] = SemiMonthly,
                ["monthly"] = Monthly,
                ["bi_monthly"] = BiMonthly,
                ["quarterly"] = Quarterly,
                ["semi_annually"] = SemiAnnually,
                ["yearly"] = Yearly,
                ["thirteen_monthly"] = ThirteenMonthly,
                ["pro_rata"] = ProRata,
                ["unmapped_value"] = UnmappedValue,
                ["half_yearly"] = HalfYearly,
                ["daily"] = Daily
            };

        private static readonly ConcurrentDictionary<string, JobPostingCompensationPayFrequencyValue> _values =
            new ConcurrentDictionary<string, JobPostingCompensationPayFrequencyValue>(_knownValues);

        private JobPostingCompensationPayFrequencyValue(string value)
        {
            if (value == null) throw new ArgumentNullException(nameof(value));
            Value = value;
        }

        public string Value { get; }

        public static JobPostingCompensationPayFrequencyValue Of(string value)
        {
            return _values.GetOrAdd(value, _ => new JobPostingCompensationPayFrequencyValue(value));
        }

        public static implicit operator JobPostingCompensationPayFrequencyValue(string value) => Of(value);
        public static implicit operator string(JobPostingCompensationPayFrequencyValue jobpostingcompensationpayfrequencyvalue) => jobpostingcompensationpayfrequencyvalue.Value;

        public static JobPostingCompensationPayFrequencyValue[] Values()
        {
            return _values.Values.ToArray();
        }

        public override string ToString() => Value.ToString();

        public bool IsKnown()
        {
            return _knownValues.ContainsKey(Value);
        }

        public override bool Equals(object? obj) => Equals(obj as JobPostingCompensationPayFrequencyValue);

        public bool Equals(JobPostingCompensationPayFrequencyValue? other)
        {
            if (ReferenceEquals(this, other)) return true;
            if (other is null) return false;
            return string.Equals(Value, other.Value);
        }

        public override int GetHashCode() => Value.GetHashCode();
    }

}