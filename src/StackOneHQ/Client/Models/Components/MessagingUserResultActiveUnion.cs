//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace StackOneHQ.Client.Models.Components
{
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;
    using StackOneHQ.Client.Models.Components;
    using StackOneHQ.Client.Utils;
    using System;
    using System.Collections.Generic;
    using System.Numerics;
    using System.Reflection;

    public class MessagingUserResultActiveUnionType
    {
        private MessagingUserResultActiveUnionType(string value) { Value = value; }

        public string Value { get; private set; }

        public static MessagingUserResultActiveUnionType Boolean { get { return new MessagingUserResultActiveUnionType("boolean"); } }

        public static MessagingUserResultActiveUnionType MessagingUserResultActiveEnum { get { return new MessagingUserResultActiveUnionType("MessagingUserResult_active_enum"); } }

        public static MessagingUserResultActiveUnionType Null { get { return new MessagingUserResultActiveUnionType("null"); } }

        public override string ToString() { return Value; }
        public static implicit operator String(MessagingUserResultActiveUnionType v) { return v.Value; }
        public static MessagingUserResultActiveUnionType FromString(string v) {
            switch(v) {
                case "boolean": return Boolean;
                case "MessagingUserResult_active_enum": return MessagingUserResultActiveEnum;
                case "null": return Null;
                default: throw new ArgumentException("Invalid value for MessagingUserResultActiveUnionType");
            }
        }
        public override bool Equals(object? obj)
        {
            if (obj == null || GetType() != obj.GetType())
            {
                return false;
            }
            return Value.Equals(((MessagingUserResultActiveUnionType)obj).Value);
        }

        public override int GetHashCode()
        {
            return Value.GetHashCode();
        }
    }


    /// <summary>
    /// Whether the user is active
    /// </summary>
    [JsonConverter(typeof(MessagingUserResultActiveUnion.MessagingUserResultActiveUnionConverter))]
    public class MessagingUserResultActiveUnion
    {
        public MessagingUserResultActiveUnion(MessagingUserResultActiveUnionType type)
        {
            Type = type;
        }

        [SpeakeasyMetadata("form:explode=true")]
        public bool? Boolean { get; set; }

        [SpeakeasyMetadata("form:explode=true")]
        public MessagingUserResultActiveEnum? MessagingUserResultActiveEnum { get; set; }

        public MessagingUserResultActiveUnionType Type { get; set; }
        public static MessagingUserResultActiveUnion CreateBoolean(bool boolean)
        {
            MessagingUserResultActiveUnionType typ = MessagingUserResultActiveUnionType.Boolean;

            MessagingUserResultActiveUnion res = new MessagingUserResultActiveUnion(typ);
            res.Boolean = boolean;
            return res;
        }
        public static MessagingUserResultActiveUnion CreateMessagingUserResultActiveEnum(MessagingUserResultActiveEnum messagingUserResultActiveEnum)
        {
            MessagingUserResultActiveUnionType typ = MessagingUserResultActiveUnionType.MessagingUserResultActiveEnum;

            MessagingUserResultActiveUnion res = new MessagingUserResultActiveUnion(typ);
            res.MessagingUserResultActiveEnum = messagingUserResultActiveEnum;
            return res;
        }

        public static MessagingUserResultActiveUnion CreateNull()
        {
            MessagingUserResultActiveUnionType typ = MessagingUserResultActiveUnionType.Null;
            return new MessagingUserResultActiveUnion(typ);
        }

        public class MessagingUserResultActiveUnionConverter : JsonConverter
        {
            public override bool CanConvert(System.Type objectType) => objectType == typeof(MessagingUserResultActiveUnion);

            public override bool CanRead => true;

            public override object? ReadJson(JsonReader reader, System.Type objectType, object? existingValue, JsonSerializer serializer)
            {
                if (reader.TokenType == JsonToken.Null)
                {
                    return null;
                }

                var json = JRaw.Create(reader).ToString();
                var fallbackCandidates = new List<(System.Type, object, string)>();

                try
                {
                    var converted = Convert.ToBoolean(json);
                    return new MessagingUserResultActiveUnion(MessagingUserResultActiveUnionType.Boolean)
                    {
                        Boolean = converted
                    };
                }
                catch (System.FormatException)
                {
                    // try next option
                }

                try
                {
                    return new MessagingUserResultActiveUnion(MessagingUserResultActiveUnionType.MessagingUserResultActiveEnum)
                    {
                        MessagingUserResultActiveEnum = ResponseBodyDeserializer.DeserializeUndiscriminatedUnionMember<MessagingUserResultActiveEnum>(json)
                    };
                }
                catch (ResponseBodyDeserializer.MissingMemberException)
                {
                    fallbackCandidates.Add((typeof(MessagingUserResultActiveEnum), new MessagingUserResultActiveUnion(MessagingUserResultActiveUnionType.MessagingUserResultActiveEnum), "MessagingUserResultActiveEnum"));
                }
                catch (ResponseBodyDeserializer.DeserializationException)
                {
                    // try next option
                }
                catch (Exception)
                {
                    throw;
                }

                if (fallbackCandidates.Count > 0)
                {
                    fallbackCandidates.Sort((a, b) => ResponseBodyDeserializer.CompareFallbackCandidates(a.Item1, b.Item1, json));
                    foreach(var (deserializationType, returnObject, propertyName) in fallbackCandidates)
                    {
                        try
                        {
                            return ResponseBodyDeserializer.DeserializeUndiscriminatedUnionFallback(deserializationType, returnObject, propertyName, json);
                        }
                        catch (ResponseBodyDeserializer.DeserializationException)
                        {
                            // try next fallback option
                        }
                        catch (Exception)
                        {
                            throw;
                        }
                    }
                }

                throw new InvalidOperationException("Could not deserialize into any supported types.");
            }

            public override void WriteJson(JsonWriter writer, object? value, JsonSerializer serializer)
            {
                if (value == null)
                {
                    writer.WriteRawValue("null");
                    return;
                }

                MessagingUserResultActiveUnion res = (MessagingUserResultActiveUnion)value;
                if (MessagingUserResultActiveUnionType.FromString(res.Type).Equals(MessagingUserResultActiveUnionType.Null))
                {
                    writer.WriteRawValue("null");
                    return;
                }

                if (res.Boolean != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.Boolean));
                    return;
                }

                if (res.MessagingUserResultActiveEnum != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.MessagingUserResultActiveEnum));
                    return;
                }
            }

        }

    }
}