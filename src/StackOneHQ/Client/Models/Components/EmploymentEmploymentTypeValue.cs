//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace StackOneHQ.Client.Models.Components
{
    using Newtonsoft.Json;
    using StackOneHQ.Client.Utils;
    using System;
    using System.Collections.Concurrent;
    using System.Collections.Generic;
    using System.Linq;
    
    /// <summary>
    /// The type of the employment.
    /// </summary>
    [JsonConverter(typeof(OpenEnumConverter))]
    public class EmploymentEmploymentTypeValue : IEquatable<EmploymentEmploymentTypeValue>
    {
        public static readonly EmploymentEmploymentTypeValue Contractor = new EmploymentEmploymentTypeValue("contractor");
        public static readonly EmploymentEmploymentTypeValue Intern = new EmploymentEmploymentTypeValue("intern");
        public static readonly EmploymentEmploymentTypeValue Permanent = new EmploymentEmploymentTypeValue("permanent");
        public static readonly EmploymentEmploymentTypeValue Apprentice = new EmploymentEmploymentTypeValue("apprentice");
        public static readonly EmploymentEmploymentTypeValue Freelance = new EmploymentEmploymentTypeValue("freelance");
        public static readonly EmploymentEmploymentTypeValue Terminated = new EmploymentEmploymentTypeValue("terminated");
        public static readonly EmploymentEmploymentTypeValue Temporary = new EmploymentEmploymentTypeValue("temporary");
        public static readonly EmploymentEmploymentTypeValue Seasonal = new EmploymentEmploymentTypeValue("seasonal");
        public static readonly EmploymentEmploymentTypeValue Volunteer = new EmploymentEmploymentTypeValue("volunteer");
        public static readonly EmploymentEmploymentTypeValue Probation = new EmploymentEmploymentTypeValue("probation");
        public static readonly EmploymentEmploymentTypeValue Internal = new EmploymentEmploymentTypeValue("internal");
        public static readonly EmploymentEmploymentTypeValue External = new EmploymentEmploymentTypeValue("external");
        public static readonly EmploymentEmploymentTypeValue Expatriate = new EmploymentEmploymentTypeValue("expatriate");
        public static readonly EmploymentEmploymentTypeValue EmployerOfRecord = new EmploymentEmploymentTypeValue("employer_of_record");
        public static readonly EmploymentEmploymentTypeValue Casual = new EmploymentEmploymentTypeValue("casual");
        public static readonly EmploymentEmploymentTypeValue Programme = new EmploymentEmploymentTypeValue("Programme");
        public static readonly EmploymentEmploymentTypeValue UnmappedValue = new EmploymentEmploymentTypeValue("unmapped_value");

        private static readonly Dictionary <string, EmploymentEmploymentTypeValue> _knownValues =
            new Dictionary <string, EmploymentEmploymentTypeValue> ()
            {
                ["contractor"] = Contractor,
                ["intern"] = Intern,
                ["permanent"] = Permanent,
                ["apprentice"] = Apprentice,
                ["freelance"] = Freelance,
                ["terminated"] = Terminated,
                ["temporary"] = Temporary,
                ["seasonal"] = Seasonal,
                ["volunteer"] = Volunteer,
                ["probation"] = Probation,
                ["internal"] = Internal,
                ["external"] = External,
                ["expatriate"] = Expatriate,
                ["employer_of_record"] = EmployerOfRecord,
                ["casual"] = Casual,
                ["Programme"] = Programme,
                ["unmapped_value"] = UnmappedValue
            };

        private static readonly ConcurrentDictionary<string, EmploymentEmploymentTypeValue> _values =
            new ConcurrentDictionary<string, EmploymentEmploymentTypeValue>(_knownValues);

        private EmploymentEmploymentTypeValue(string value)
        {
            if (value == null) throw new ArgumentNullException(nameof(value));
            Value = value;
        }

        public string Value { get; }

        public static EmploymentEmploymentTypeValue Of(string value)
        {
            return _values.GetOrAdd(value, _ => new EmploymentEmploymentTypeValue(value));
        }

        public static implicit operator EmploymentEmploymentTypeValue(string value) => Of(value);
        public static implicit operator string(EmploymentEmploymentTypeValue employmentemploymenttypevalue) => employmentemploymenttypevalue.Value;

        public static EmploymentEmploymentTypeValue[] Values()
        {
            return _values.Values.ToArray();
        }

        public override string ToString() => Value.ToString();

        public bool IsKnown()
        {
            return _knownValues.ContainsKey(Value);
        }

        public override bool Equals(object? obj) => Equals(obj as EmploymentEmploymentTypeValue);

        public bool Equals(EmploymentEmploymentTypeValue? other)
        {
            if (ReferenceEquals(this, other)) return true;
            if (other is null) return false;
            return string.Equals(Value, other.Value);
        }

        public override int GetHashCode() => Value.GetHashCode();
    }

}