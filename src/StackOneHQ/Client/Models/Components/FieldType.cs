//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace StackOneHQ.Client.Models.Components
{
    using Newtonsoft.Json;
    using StackOneHQ.Client.Utils;
    using System;
    using System.Collections.Concurrent;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The type of the field
    /// </summary>
    [JsonConverter(typeof(OpenEnumConverter))]
    public class FieldType : IEquatable<FieldType>
    {
        public static readonly FieldType ShortText = new FieldType("short_text");
        public static readonly FieldType LongText = new FieldType("long_text");
        public static readonly FieldType MultiSelect = new FieldType("multi_select");
        public static readonly FieldType SingleSelect = new FieldType("single_select");
        public static readonly FieldType Boolean = new FieldType("boolean");
        public static readonly FieldType Number = new FieldType("number");
        public static readonly FieldType Date = new FieldType("date");
        public static readonly FieldType Phone = new FieldType("phone");
        public static readonly FieldType Email = new FieldType("email");
        public static readonly FieldType Score = new FieldType("score");
        public static readonly FieldType Location = new FieldType("location");
        public static readonly FieldType UnmappedValue = new FieldType("unmapped_value");

        private static readonly Dictionary <string, FieldType> _knownValues =
            new Dictionary <string, FieldType> ()
            {
                ["short_text"] = ShortText,
                ["long_text"] = LongText,
                ["multi_select"] = MultiSelect,
                ["single_select"] = SingleSelect,
                ["boolean"] = Boolean,
                ["number"] = Number,
                ["date"] = Date,
                ["phone"] = Phone,
                ["email"] = Email,
                ["score"] = Score,
                ["location"] = Location,
                ["unmapped_value"] = UnmappedValue
            };

        private static readonly ConcurrentDictionary<string, FieldType> _values =
            new ConcurrentDictionary<string, FieldType>(_knownValues);

        private FieldType(string value)
        {
            if (value == null) throw new ArgumentNullException(nameof(value));
            Value = value;
        }

        public string Value { get; }

        public static FieldType Of(string value)
        {
            return _values.GetOrAdd(value, _ => new FieldType(value));
        }

        public static implicit operator FieldType(string value) => Of(value);
        public static implicit operator string(FieldType fieldtype) => fieldtype.Value;

        public static FieldType[] Values()
        {
            return _values.Values.ToArray();
        }

        public override string ToString() => Value.ToString();

        public bool IsKnown()
        {
            return _knownValues.ContainsKey(Value);
        }

        public override bool Equals(object? obj) => Equals(obj as FieldType);

        public bool Equals(FieldType? other)
        {
            if (ReferenceEquals(this, other)) return true;
            if (other is null) return false;
            return string.Equals(Value, other.Value);
        }

        public override int GetHashCode() => Value.GetHashCode();
    }

}