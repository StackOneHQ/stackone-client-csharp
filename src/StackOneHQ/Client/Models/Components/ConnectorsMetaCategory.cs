//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace StackOneHQ.Client.Models.Components
{
    using Newtonsoft.Json;
    using StackOneHQ.Client.Utils;
    using System;
    using System.Collections.Concurrent;
    using System.Collections.Generic;
    using System.Linq;
    
    /// <summary>
    /// The provider service category
    /// </summary>
    [JsonConverter(typeof(OpenEnumConverter))]
    public class ConnectorsMetaCategory : IEquatable<ConnectorsMetaCategory>
    {
        public static readonly ConnectorsMetaCategory Ats = new ConnectorsMetaCategory("ats");
        public static readonly ConnectorsMetaCategory Hris = new ConnectorsMetaCategory("hris");
        public static readonly ConnectorsMetaCategory HrisLegacy = new ConnectorsMetaCategory("hris-legacy");
        public static readonly ConnectorsMetaCategory Crm = new ConnectorsMetaCategory("crm");
        public static readonly ConnectorsMetaCategory Iam = new ConnectorsMetaCategory("iam");
        public static readonly ConnectorsMetaCategory Marketing = new ConnectorsMetaCategory("marketing");
        public static readonly ConnectorsMetaCategory Lms = new ConnectorsMetaCategory("lms");
        public static readonly ConnectorsMetaCategory Stackone = new ConnectorsMetaCategory("stackone");
        public static readonly ConnectorsMetaCategory Documents = new ConnectorsMetaCategory("documents");
        public static readonly ConnectorsMetaCategory Ticketing = new ConnectorsMetaCategory("ticketing");
        public static readonly ConnectorsMetaCategory Screening = new ConnectorsMetaCategory("screening");
        public static readonly ConnectorsMetaCategory Messaging = new ConnectorsMetaCategory("messaging");
        public static readonly ConnectorsMetaCategory Accounting = new ConnectorsMetaCategory("accounting");

        private static readonly Dictionary <string, ConnectorsMetaCategory> _knownValues =
            new Dictionary <string, ConnectorsMetaCategory> ()
            {
                ["ats"] = Ats,
                ["hris"] = Hris,
                ["hris-legacy"] = HrisLegacy,
                ["crm"] = Crm,
                ["iam"] = Iam,
                ["marketing"] = Marketing,
                ["lms"] = Lms,
                ["stackone"] = Stackone,
                ["documents"] = Documents,
                ["ticketing"] = Ticketing,
                ["screening"] = Screening,
                ["messaging"] = Messaging,
                ["accounting"] = Accounting
            };

        private static readonly ConcurrentDictionary<string, ConnectorsMetaCategory> _values =
            new ConcurrentDictionary<string, ConnectorsMetaCategory>(_knownValues);

        private ConnectorsMetaCategory(string value)
        {
            if (value == null) throw new ArgumentNullException(nameof(value));
            Value = value;
        }

        public string Value { get; }

        public static ConnectorsMetaCategory Of(string value)
        {
            return _values.GetOrAdd(value, _ => new ConnectorsMetaCategory(value));
        }

        public static implicit operator ConnectorsMetaCategory(string value) => Of(value);
        public static implicit operator string(ConnectorsMetaCategory connectorsmetacategory) => connectorsmetacategory.Value;

        public static ConnectorsMetaCategory[] Values()
        {
            return _values.Values.ToArray();
        }

        public override string ToString() => Value.ToString();

        public bool IsKnown()
        {
            return _knownValues.ContainsKey(Value);
        }

        public override bool Equals(object? obj) => Equals(obj as ConnectorsMetaCategory);

        public bool Equals(ConnectorsMetaCategory? other)
        {
            if (ReferenceEquals(this, other)) return true;
            if (other is null) return false;
            return string.Equals(Value, other.Value);
        }

        public override int GetHashCode() => Value.GetHashCode();
    }

}