//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace StackOneHQ.Client.Models.Components
{
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;
    using StackOneHQ.Client.Models.Components;
    using StackOneHQ.Client.Utils;
    using System;
    using System.Collections.Generic;
    using System.Numerics;
    using System.Reflection;

    public class FilesHasChildrenUnionType
    {
        private FilesHasChildrenUnionType(string value) { Value = value; }

        public string Value { get; private set; }

        public static FilesHasChildrenUnionType Boolean { get { return new FilesHasChildrenUnionType("boolean"); } }

        public static FilesHasChildrenUnionType FilesHasChildrenEnum { get { return new FilesHasChildrenUnionType("Files_has_children_enum"); } }

        public static FilesHasChildrenUnionType Null { get { return new FilesHasChildrenUnionType("null"); } }

        public override string ToString() { return Value; }
        public static implicit operator String(FilesHasChildrenUnionType v) { return v.Value; }
        public static FilesHasChildrenUnionType FromString(string v) {
            switch(v) {
                case "boolean": return Boolean;
                case "Files_has_children_enum": return FilesHasChildrenEnum;
                case "null": return Null;
                default: throw new ArgumentException("Invalid value for FilesHasChildrenUnionType");
            }
        }
        public override bool Equals(object? obj)
        {
            if (obj == null || GetType() != obj.GetType())
            {
                return false;
            }
            return Value.Equals(((FilesHasChildrenUnionType)obj).Value);
        }

        public override int GetHashCode()
        {
            return Value.GetHashCode();
        }
    }


    /// <summary>
    /// Whether the file has children
    /// </summary>
    [JsonConverter(typeof(FilesHasChildrenUnion.FilesHasChildrenUnionConverter))]
    public class FilesHasChildrenUnion
    {
        public FilesHasChildrenUnion(FilesHasChildrenUnionType type)
        {
            Type = type;
        }

        [SpeakeasyMetadata("form:explode=true")]
        public bool? Boolean { get; set; }

        [SpeakeasyMetadata("form:explode=true")]
        public FilesHasChildrenEnum? FilesHasChildrenEnum { get; set; }

        public FilesHasChildrenUnionType Type { get; set; }
        public static FilesHasChildrenUnion CreateBoolean(bool boolean)
        {
            FilesHasChildrenUnionType typ = FilesHasChildrenUnionType.Boolean;

            FilesHasChildrenUnion res = new FilesHasChildrenUnion(typ);
            res.Boolean = boolean;
            return res;
        }
        public static FilesHasChildrenUnion CreateFilesHasChildrenEnum(FilesHasChildrenEnum filesHasChildrenEnum)
        {
            FilesHasChildrenUnionType typ = FilesHasChildrenUnionType.FilesHasChildrenEnum;

            FilesHasChildrenUnion res = new FilesHasChildrenUnion(typ);
            res.FilesHasChildrenEnum = filesHasChildrenEnum;
            return res;
        }

        public static FilesHasChildrenUnion CreateNull()
        {
            FilesHasChildrenUnionType typ = FilesHasChildrenUnionType.Null;
            return new FilesHasChildrenUnion(typ);
        }

        public class FilesHasChildrenUnionConverter : JsonConverter
        {
            public override bool CanConvert(System.Type objectType) => objectType == typeof(FilesHasChildrenUnion);

            public override bool CanRead => true;

            public override object? ReadJson(JsonReader reader, System.Type objectType, object? existingValue, JsonSerializer serializer)
            {
                if (reader.TokenType == JsonToken.Null)
                {
                    return null;
                }

                var json = JRaw.Create(reader).ToString();
                var fallbackCandidates = new List<(System.Type, object, string)>();

                try
                {
                    var converted = Convert.ToBoolean(json);
                    return new FilesHasChildrenUnion(FilesHasChildrenUnionType.Boolean)
                    {
                        Boolean = converted
                    };
                }
                catch (System.FormatException)
                {
                    // try next option
                }

                try
                {
                    return new FilesHasChildrenUnion(FilesHasChildrenUnionType.FilesHasChildrenEnum)
                    {
                        FilesHasChildrenEnum = ResponseBodyDeserializer.DeserializeUndiscriminatedUnionMember<FilesHasChildrenEnum>(json)
                    };
                }
                catch (ResponseBodyDeserializer.MissingMemberException)
                {
                    fallbackCandidates.Add((typeof(FilesHasChildrenEnum), new FilesHasChildrenUnion(FilesHasChildrenUnionType.FilesHasChildrenEnum), "FilesHasChildrenEnum"));
                }
                catch (ResponseBodyDeserializer.DeserializationException)
                {
                    // try next option
                }
                catch (Exception)
                {
                    throw;
                }

                if (fallbackCandidates.Count > 0)
                {
                    fallbackCandidates.Sort((a, b) => ResponseBodyDeserializer.CompareFallbackCandidates(a.Item1, b.Item1, json));
                    foreach(var (deserializationType, returnObject, propertyName) in fallbackCandidates)
                    {
                        try
                        {
                            return ResponseBodyDeserializer.DeserializeUndiscriminatedUnionFallback(deserializationType, returnObject, propertyName, json);
                        }
                        catch (ResponseBodyDeserializer.DeserializationException)
                        {
                            // try next fallback option
                        }
                        catch (Exception)
                        {
                            throw;
                        }
                    }
                }

                throw new InvalidOperationException("Could not deserialize into any supported types.");
            }

            public override void WriteJson(JsonWriter writer, object? value, JsonSerializer serializer)
            {
                if (value == null)
                {
                    writer.WriteRawValue("null");
                    return;
                }

                FilesHasChildrenUnion res = (FilesHasChildrenUnion)value;
                if (FilesHasChildrenUnionType.FromString(res.Type).Equals(FilesHasChildrenUnionType.Null))
                {
                    writer.WriteRawValue("null");
                    return;
                }

                if (res.Boolean != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.Boolean));
                    return;
                }

                if (res.FilesHasChildrenEnum != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.FilesHasChildrenEnum));
                    return;
                }
            }

        }

    }
}