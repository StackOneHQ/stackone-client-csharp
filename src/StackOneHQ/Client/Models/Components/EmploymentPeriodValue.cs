//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace StackOneHQ.Client.Models.Components
{
    using Newtonsoft.Json;
    using StackOneHQ.Client.Utils;
    using System;
    using System.Collections.Concurrent;
    using System.Collections.Generic;
    using System.Linq;
    
    /// <summary>
    /// The unified value for the period.
    /// </summary>
    [JsonConverter(typeof(OpenEnumConverter))]
    public class EmploymentPeriodValue : IEquatable<EmploymentPeriodValue>
    {
        public static readonly EmploymentPeriodValue Day = new EmploymentPeriodValue("day");
        public static readonly EmploymentPeriodValue Week = new EmploymentPeriodValue("week");
        public static readonly EmploymentPeriodValue Month = new EmploymentPeriodValue("month");
        public static readonly EmploymentPeriodValue Year = new EmploymentPeriodValue("year");
        public static readonly EmploymentPeriodValue UnmappedValue = new EmploymentPeriodValue("unmapped_value");

        private static readonly Dictionary <string, EmploymentPeriodValue> _knownValues =
            new Dictionary <string, EmploymentPeriodValue> ()
            {
                ["day"] = Day,
                ["week"] = Week,
                ["month"] = Month,
                ["year"] = Year,
                ["unmapped_value"] = UnmappedValue
            };

        private static readonly ConcurrentDictionary<string, EmploymentPeriodValue> _values =
            new ConcurrentDictionary<string, EmploymentPeriodValue>(_knownValues);

        private EmploymentPeriodValue(string value)
        {
            if (value == null) throw new ArgumentNullException(nameof(value));
            Value = value;
        }

        public string Value { get; }

        public static EmploymentPeriodValue Of(string value)
        {
            return _values.GetOrAdd(value, _ => new EmploymentPeriodValue(value));
        }

        public static implicit operator EmploymentPeriodValue(string value) => Of(value);
        public static implicit operator string(EmploymentPeriodValue employmentperiodvalue) => employmentperiodvalue.Value;

        public static EmploymentPeriodValue[] Values()
        {
            return _values.Values.ToArray();
        }

        public override string ToString() => Value.ToString();

        public bool IsKnown()
        {
            return _knownValues.ContainsKey(Value);
        }

        public override bool Equals(object? obj) => Equals(obj as EmploymentPeriodValue);

        public bool Equals(EmploymentPeriodValue? other)
        {
            if (ReferenceEquals(this, other)) return true;
            if (other is null) return false;
            return string.Equals(Value, other.Value);
        }

        public override int GetHashCode() => Value.GetHashCode();
    }

}