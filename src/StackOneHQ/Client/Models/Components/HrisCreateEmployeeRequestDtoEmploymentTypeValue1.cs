//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace StackOneHQ.Client.Models.Components
{
    using Newtonsoft.Json;
    using StackOneHQ.Client.Utils;
    using System;
    using System.Collections.Concurrent;
    using System.Collections.Generic;
    using System.Linq;
    
    /// <summary>
    /// The type of the employment.
    /// </summary>
    [JsonConverter(typeof(OpenEnumConverter))]
    public class HrisCreateEmployeeRequestDtoEmploymentTypeValue1 : IEquatable<HrisCreateEmployeeRequestDtoEmploymentTypeValue1>
    {
        public static readonly HrisCreateEmployeeRequestDtoEmploymentTypeValue1 Contractor = new HrisCreateEmployeeRequestDtoEmploymentTypeValue1("contractor");
        public static readonly HrisCreateEmployeeRequestDtoEmploymentTypeValue1 Intern = new HrisCreateEmployeeRequestDtoEmploymentTypeValue1("intern");
        public static readonly HrisCreateEmployeeRequestDtoEmploymentTypeValue1 Permanent = new HrisCreateEmployeeRequestDtoEmploymentTypeValue1("permanent");
        public static readonly HrisCreateEmployeeRequestDtoEmploymentTypeValue1 Apprentice = new HrisCreateEmployeeRequestDtoEmploymentTypeValue1("apprentice");
        public static readonly HrisCreateEmployeeRequestDtoEmploymentTypeValue1 Freelance = new HrisCreateEmployeeRequestDtoEmploymentTypeValue1("freelance");
        public static readonly HrisCreateEmployeeRequestDtoEmploymentTypeValue1 Terminated = new HrisCreateEmployeeRequestDtoEmploymentTypeValue1("terminated");
        public static readonly HrisCreateEmployeeRequestDtoEmploymentTypeValue1 Temporary = new HrisCreateEmployeeRequestDtoEmploymentTypeValue1("temporary");
        public static readonly HrisCreateEmployeeRequestDtoEmploymentTypeValue1 Seasonal = new HrisCreateEmployeeRequestDtoEmploymentTypeValue1("seasonal");
        public static readonly HrisCreateEmployeeRequestDtoEmploymentTypeValue1 Volunteer = new HrisCreateEmployeeRequestDtoEmploymentTypeValue1("volunteer");
        public static readonly HrisCreateEmployeeRequestDtoEmploymentTypeValue1 Probation = new HrisCreateEmployeeRequestDtoEmploymentTypeValue1("probation");
        public static readonly HrisCreateEmployeeRequestDtoEmploymentTypeValue1 Internal = new HrisCreateEmployeeRequestDtoEmploymentTypeValue1("internal");
        public static readonly HrisCreateEmployeeRequestDtoEmploymentTypeValue1 External = new HrisCreateEmployeeRequestDtoEmploymentTypeValue1("external");
        public static readonly HrisCreateEmployeeRequestDtoEmploymentTypeValue1 Expatriate = new HrisCreateEmployeeRequestDtoEmploymentTypeValue1("expatriate");
        public static readonly HrisCreateEmployeeRequestDtoEmploymentTypeValue1 EmployerOfRecord = new HrisCreateEmployeeRequestDtoEmploymentTypeValue1("employer_of_record");
        public static readonly HrisCreateEmployeeRequestDtoEmploymentTypeValue1 Casual = new HrisCreateEmployeeRequestDtoEmploymentTypeValue1("casual");
        public static readonly HrisCreateEmployeeRequestDtoEmploymentTypeValue1 Programme = new HrisCreateEmployeeRequestDtoEmploymentTypeValue1("Programme");
        public static readonly HrisCreateEmployeeRequestDtoEmploymentTypeValue1 UnmappedValue = new HrisCreateEmployeeRequestDtoEmploymentTypeValue1("unmapped_value");

        private static readonly Dictionary <string, HrisCreateEmployeeRequestDtoEmploymentTypeValue1> _knownValues =
            new Dictionary <string, HrisCreateEmployeeRequestDtoEmploymentTypeValue1> ()
            {
                ["contractor"] = Contractor,
                ["intern"] = Intern,
                ["permanent"] = Permanent,
                ["apprentice"] = Apprentice,
                ["freelance"] = Freelance,
                ["terminated"] = Terminated,
                ["temporary"] = Temporary,
                ["seasonal"] = Seasonal,
                ["volunteer"] = Volunteer,
                ["probation"] = Probation,
                ["internal"] = Internal,
                ["external"] = External,
                ["expatriate"] = Expatriate,
                ["employer_of_record"] = EmployerOfRecord,
                ["casual"] = Casual,
                ["Programme"] = Programme,
                ["unmapped_value"] = UnmappedValue
            };

        private static readonly ConcurrentDictionary<string, HrisCreateEmployeeRequestDtoEmploymentTypeValue1> _values =
            new ConcurrentDictionary<string, HrisCreateEmployeeRequestDtoEmploymentTypeValue1>(_knownValues);

        private HrisCreateEmployeeRequestDtoEmploymentTypeValue1(string value)
        {
            if (value == null) throw new ArgumentNullException(nameof(value));
            Value = value;
        }

        public string Value { get; }

        public static HrisCreateEmployeeRequestDtoEmploymentTypeValue1 Of(string value)
        {
            return _values.GetOrAdd(value, _ => new HrisCreateEmployeeRequestDtoEmploymentTypeValue1(value));
        }

        public static implicit operator HrisCreateEmployeeRequestDtoEmploymentTypeValue1(string value) => Of(value);
        public static implicit operator string(HrisCreateEmployeeRequestDtoEmploymentTypeValue1 hriscreateemployeerequestdtoemploymenttypevalue1) => hriscreateemployeerequestdtoemploymenttypevalue1.Value;

        public static HrisCreateEmployeeRequestDtoEmploymentTypeValue1[] Values()
        {
            return _values.Values.ToArray();
        }

        public override string ToString() => Value.ToString();

        public bool IsKnown()
        {
            return _knownValues.ContainsKey(Value);
        }

        public override bool Equals(object? obj) => Equals(obj as HrisCreateEmployeeRequestDtoEmploymentTypeValue1);

        public bool Equals(HrisCreateEmployeeRequestDtoEmploymentTypeValue1? other)
        {
            if (ReferenceEquals(this, other)) return true;
            if (other is null) return false;
            return string.Equals(Value, other.Value);
        }

        public override int GetHashCode() => Value.GetHashCode();
    }

}