//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace StackOneHQ.Client.Models.Components
{
    using Newtonsoft.Json;
    using StackOneHQ.Client.Utils;
    using System;
    using System.Collections.Concurrent;
    using System.Collections.Generic;
    using System.Linq;
    
    /// <summary>
    /// The schedule type of the campaign.
    /// </summary>
    [JsonConverter(typeof(OpenEnumConverter))]
    public class ScheduleTypeValue : IEquatable<ScheduleTypeValue>
    {
        public static readonly ScheduleTypeValue Immediate = new ScheduleTypeValue("immediate");
        public static readonly ScheduleTypeValue Scheduled = new ScheduleTypeValue("scheduled");
        public static readonly ScheduleTypeValue Recurring = new ScheduleTypeValue("recurring");
        public static readonly ScheduleTypeValue Custom = new ScheduleTypeValue("custom");
        public static readonly ScheduleTypeValue Triggered = new ScheduleTypeValue("triggered");
        public static readonly ScheduleTypeValue UnmappedValue = new ScheduleTypeValue("unmapped_value");

        private static readonly Dictionary <string, ScheduleTypeValue> _knownValues =
            new Dictionary <string, ScheduleTypeValue> ()
            {
                ["immediate"] = Immediate,
                ["scheduled"] = Scheduled,
                ["recurring"] = Recurring,
                ["custom"] = Custom,
                ["triggered"] = Triggered,
                ["unmapped_value"] = UnmappedValue
            };

        private static readonly ConcurrentDictionary<string, ScheduleTypeValue> _values =
            new ConcurrentDictionary<string, ScheduleTypeValue>(_knownValues);

        private ScheduleTypeValue(string value)
        {
            if (value == null) throw new ArgumentNullException(nameof(value));
            Value = value;
        }

        public string Value { get; }

        public static ScheduleTypeValue Of(string value)
        {
            return _values.GetOrAdd(value, _ => new ScheduleTypeValue(value));
        }

        public static implicit operator ScheduleTypeValue(string value) => Of(value);
        public static implicit operator string(ScheduleTypeValue scheduletypevalue) => scheduletypevalue.Value;

        public static ScheduleTypeValue[] Values()
        {
            return _values.Values.ToArray();
        }

        public override string ToString() => Value.ToString();

        public bool IsKnown()
        {
            return _knownValues.ContainsKey(Value);
        }

        public override bool Equals(object? obj) => Equals(obj as ScheduleTypeValue);

        public bool Equals(ScheduleTypeValue? other)
        {
            if (ReferenceEquals(this, other)) return true;
            if (other is null) return false;
            return string.Equals(Value, other.Value);
        }

        public override int GetHashCode() => Value.GetHashCode();
    }

}