//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace StackOneHQ.Client.Models.Components
{
    using Newtonsoft.Json;
    using StackOneHQ.Client.Utils;
    using System;
    using System.Collections.Concurrent;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The unified value for the type of the time off policy. If the provider does not specify this unit, the value will be set to unmapped_value
    /// </summary>
    [JsonConverter(typeof(OpenEnumConverter))]
    public class TimeOffPolicyTypeValue : IEquatable<TimeOffPolicyTypeValue>
    {
        public static readonly TimeOffPolicyTypeValue Sick = new TimeOffPolicyTypeValue("sick");
        public static readonly TimeOffPolicyTypeValue UnmappedValue = new TimeOffPolicyTypeValue("unmapped_value");
        public static readonly TimeOffPolicyTypeValue Vacation = new TimeOffPolicyTypeValue("vacation");
        public static readonly TimeOffPolicyTypeValue LongTermDisability = new TimeOffPolicyTypeValue("long_term_disability");
        public static readonly TimeOffPolicyTypeValue ShortTermDisability = new TimeOffPolicyTypeValue("short_term_disability");
        public static readonly TimeOffPolicyTypeValue Absent = new TimeOffPolicyTypeValue("absent");
        public static readonly TimeOffPolicyTypeValue CompTime = new TimeOffPolicyTypeValue("comp_time");
        public static readonly TimeOffPolicyTypeValue Training = new TimeOffPolicyTypeValue("training");
        public static readonly TimeOffPolicyTypeValue AnnualLeave = new TimeOffPolicyTypeValue("annual_leave");
        public static readonly TimeOffPolicyTypeValue LeaveOfAbsence = new TimeOffPolicyTypeValue("leave_of_absence");
        public static readonly TimeOffPolicyTypeValue Break = new TimeOffPolicyTypeValue("break");
        public static readonly TimeOffPolicyTypeValue ChildCareLeave = new TimeOffPolicyTypeValue("child_care_leave");
        public static readonly TimeOffPolicyTypeValue MaternityLeave = new TimeOffPolicyTypeValue("maternity_leave");
        public static readonly TimeOffPolicyTypeValue JuryDuty = new TimeOffPolicyTypeValue("jury_duty");
        public static readonly TimeOffPolicyTypeValue Sabbatical = new TimeOffPolicyTypeValue("sabbatical");
        public static readonly TimeOffPolicyTypeValue Accident = new TimeOffPolicyTypeValue("accident");
        public static readonly TimeOffPolicyTypeValue Paid = new TimeOffPolicyTypeValue("paid");
        public static readonly TimeOffPolicyTypeValue Unpaid = new TimeOffPolicyTypeValue("unpaid");
        public static readonly TimeOffPolicyTypeValue Holiday = new TimeOffPolicyTypeValue("holiday");
        public static readonly TimeOffPolicyTypeValue Personal = new TimeOffPolicyTypeValue("personal");
        public static readonly TimeOffPolicyTypeValue InLieu = new TimeOffPolicyTypeValue("in_lieu");
        public static readonly TimeOffPolicyTypeValue Bereavement = new TimeOffPolicyTypeValue("bereavement");

        private static readonly Dictionary <string, TimeOffPolicyTypeValue> _knownValues =
            new Dictionary <string, TimeOffPolicyTypeValue> ()
            {
                ["sick"] = Sick,
                ["unmapped_value"] = UnmappedValue,
                ["vacation"] = Vacation,
                ["long_term_disability"] = LongTermDisability,
                ["short_term_disability"] = ShortTermDisability,
                ["absent"] = Absent,
                ["comp_time"] = CompTime,
                ["training"] = Training,
                ["annual_leave"] = AnnualLeave,
                ["leave_of_absence"] = LeaveOfAbsence,
                ["break"] = Break,
                ["child_care_leave"] = ChildCareLeave,
                ["maternity_leave"] = MaternityLeave,
                ["jury_duty"] = JuryDuty,
                ["sabbatical"] = Sabbatical,
                ["accident"] = Accident,
                ["paid"] = Paid,
                ["unpaid"] = Unpaid,
                ["holiday"] = Holiday,
                ["personal"] = Personal,
                ["in_lieu"] = InLieu,
                ["bereavement"] = Bereavement
            };

        private static readonly ConcurrentDictionary<string, TimeOffPolicyTypeValue> _values =
            new ConcurrentDictionary<string, TimeOffPolicyTypeValue>(_knownValues);

        private TimeOffPolicyTypeValue(string value)
        {
            if (value == null) throw new ArgumentNullException(nameof(value));
            Value = value;
        }

        public string Value { get; }

        public static TimeOffPolicyTypeValue Of(string value)
        {
            return _values.GetOrAdd(value, _ => new TimeOffPolicyTypeValue(value));
        }

        public static implicit operator TimeOffPolicyTypeValue(string value) => Of(value);
        public static implicit operator string(TimeOffPolicyTypeValue timeoffpolicytypevalue) => timeoffpolicytypevalue.Value;

        public static TimeOffPolicyTypeValue[] Values()
        {
            return _values.Values.ToArray();
        }

        public override string ToString() => Value.ToString();

        public bool IsKnown()
        {
            return _knownValues.ContainsKey(Value);
        }

        public override bool Equals(object? obj) => Equals(obj as TimeOffPolicyTypeValue);

        public bool Equals(TimeOffPolicyTypeValue? other)
        {
            if (ReferenceEquals(this, other)) return true;
            if (other is null) return false;
            return string.Equals(Value, other.Value);
        }

        public override int GetHashCode() => Value.GetHashCode();
    }

}