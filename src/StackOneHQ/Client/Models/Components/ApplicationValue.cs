//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace StackOneHQ.Client.Models.Components
{
    using Newtonsoft.Json;
    using StackOneHQ.Client.Utils;
    using System;
    using System.Collections.Concurrent;
    using System.Collections.Generic;
    using System.Linq;
    
    /// <summary>
    /// The status of the application.
    /// </summary>
    [JsonConverter(typeof(OpenEnumConverter))]
    public class ApplicationValue : IEquatable<ApplicationValue>
    {
        public static readonly ApplicationValue Active = new ApplicationValue("active");
        public static readonly ApplicationValue Assessment = new ApplicationValue("assessment");
        public static readonly ApplicationValue BackgroundCheck = new ApplicationValue("background_check");
        public static readonly ApplicationValue Converted = new ApplicationValue("converted");
        public static readonly ApplicationValue DeclinedByCandidate = new ApplicationValue("declined_by_candidate");
        public static readonly ApplicationValue Hired = new ApplicationValue("hired");
        public static readonly ApplicationValue Interview = new ApplicationValue("interview");
        public static readonly ApplicationValue Lead = new ApplicationValue("lead");
        public static readonly ApplicationValue Offer = new ApplicationValue("offer");
        public static readonly ApplicationValue ReferenceCheck = new ApplicationValue("reference_check");
        public static readonly ApplicationValue Rejected = new ApplicationValue("rejected");
        public static readonly ApplicationValue Review = new ApplicationValue("review");
        public static readonly ApplicationValue Screen = new ApplicationValue("screen");
        public static readonly ApplicationValue New = new ApplicationValue("new");
        public static readonly ApplicationValue Onboarding = new ApplicationValue("onboarding");
        public static readonly ApplicationValue Created = new ApplicationValue("created");
        public static readonly ApplicationValue Accepted = new ApplicationValue("accepted");
        public static readonly ApplicationValue ShortList = new ApplicationValue("short_list");
        public static readonly ApplicationValue Approved = new ApplicationValue("approved");
        public static readonly ApplicationValue UnmappedValue = new ApplicationValue("unmapped_value");

        private static readonly Dictionary <string, ApplicationValue> _knownValues =
            new Dictionary <string, ApplicationValue> ()
            {
                ["active"] = Active,
                ["assessment"] = Assessment,
                ["background_check"] = BackgroundCheck,
                ["converted"] = Converted,
                ["declined_by_candidate"] = DeclinedByCandidate,
                ["hired"] = Hired,
                ["interview"] = Interview,
                ["lead"] = Lead,
                ["offer"] = Offer,
                ["reference_check"] = ReferenceCheck,
                ["rejected"] = Rejected,
                ["review"] = Review,
                ["screen"] = Screen,
                ["new"] = New,
                ["onboarding"] = Onboarding,
                ["created"] = Created,
                ["accepted"] = Accepted,
                ["short_list"] = ShortList,
                ["approved"] = Approved,
                ["unmapped_value"] = UnmappedValue
            };

        private static readonly ConcurrentDictionary<string, ApplicationValue> _values =
            new ConcurrentDictionary<string, ApplicationValue>(_knownValues);

        private ApplicationValue(string value)
        {
            if (value == null) throw new ArgumentNullException(nameof(value));
            Value = value;
        }

        public string Value { get; }

        public static ApplicationValue Of(string value)
        {
            return _values.GetOrAdd(value, _ => new ApplicationValue(value));
        }

        public static implicit operator ApplicationValue(string value) => Of(value);
        public static implicit operator string(ApplicationValue applicationvalue) => applicationvalue.Value;

        public static ApplicationValue[] Values()
        {
            return _values.Values.ToArray();
        }

        public override string ToString() => Value.ToString();

        public bool IsKnown()
        {
            return _knownValues.ContainsKey(Value);
        }

        public override bool Equals(object? obj) => Equals(obj as ApplicationValue);

        public bool Equals(ApplicationValue? other)
        {
            if (ReferenceEquals(this, other)) return true;
            if (other is null) return false;
            return string.Equals(Value, other.Value);
        }

        public override int GetHashCode() => Value.GetHashCode();
    }

}