//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace StackOneHQ.Client.Models.Components
{
    using Newtonsoft.Json;
    using StackOneHQ.Client.Utils;
    using System;
    using System.Collections.Concurrent;
    using System.Collections.Generic;
    using System.Linq;
    
    [JsonConverter(typeof(OpenEnumConverter))]
    public class CompletionLearningObjectTypeValue : IEquatable<CompletionLearningObjectTypeValue>
    {
        public static readonly CompletionLearningObjectTypeValue Content = new CompletionLearningObjectTypeValue("content");
        public static readonly CompletionLearningObjectTypeValue Course = new CompletionLearningObjectTypeValue("course");
        public static readonly CompletionLearningObjectTypeValue Collection = new CompletionLearningObjectTypeValue("collection");
        public static readonly CompletionLearningObjectTypeValue UnmappedValue = new CompletionLearningObjectTypeValue("unmapped_value");

        private static readonly Dictionary <string, CompletionLearningObjectTypeValue> _knownValues =
            new Dictionary <string, CompletionLearningObjectTypeValue> ()
            {
                ["content"] = Content,
                ["course"] = Course,
                ["collection"] = Collection,
                ["unmapped_value"] = UnmappedValue
            };

        private static readonly ConcurrentDictionary<string, CompletionLearningObjectTypeValue> _values =
            new ConcurrentDictionary<string, CompletionLearningObjectTypeValue>(_knownValues);

        private CompletionLearningObjectTypeValue(string value)
        {
            if (value == null) throw new ArgumentNullException(nameof(value));
            Value = value;
        }

        public string Value { get; }

        public static CompletionLearningObjectTypeValue Of(string value)
        {
            return _values.GetOrAdd(value, _ => new CompletionLearningObjectTypeValue(value));
        }

        public static implicit operator CompletionLearningObjectTypeValue(string value) => Of(value);
        public static implicit operator string(CompletionLearningObjectTypeValue completionlearningobjecttypevalue) => completionlearningobjecttypevalue.Value;

        public static CompletionLearningObjectTypeValue[] Values()
        {
            return _values.Values.ToArray();
        }

        public override string ToString() => Value.ToString();

        public bool IsKnown()
        {
            return _knownValues.ContainsKey(Value);
        }

        public override bool Equals(object? obj) => Equals(obj as CompletionLearningObjectTypeValue);

        public bool Equals(CompletionLearningObjectTypeValue? other)
        {
            if (ReferenceEquals(this, other)) return true;
            if (other is null) return false;
            return string.Equals(Value, other.Value);
        }

        public override int GetHashCode() => Value.GetHashCode();
    }

}