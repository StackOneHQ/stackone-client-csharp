//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace StackOneHQ.Client.Models.Components
{
    using Newtonsoft.Json;
    using StackOneHQ.Client.Utils;
    using System;
    using System.Collections.Concurrent;
    using System.Collections.Generic;
    using System.Linq;
    
    [JsonConverter(typeof(OpenEnumConverter))]
    public class HrisUpdateEmployeeRequestDtoEmploymentTypeValue2 : IEquatable<HrisUpdateEmployeeRequestDtoEmploymentTypeValue2>
    {
        public static readonly HrisUpdateEmployeeRequestDtoEmploymentTypeValue2 Contractor = new HrisUpdateEmployeeRequestDtoEmploymentTypeValue2("contractor");
        public static readonly HrisUpdateEmployeeRequestDtoEmploymentTypeValue2 Intern = new HrisUpdateEmployeeRequestDtoEmploymentTypeValue2("intern");
        public static readonly HrisUpdateEmployeeRequestDtoEmploymentTypeValue2 Permanent = new HrisUpdateEmployeeRequestDtoEmploymentTypeValue2("permanent");
        public static readonly HrisUpdateEmployeeRequestDtoEmploymentTypeValue2 Apprentice = new HrisUpdateEmployeeRequestDtoEmploymentTypeValue2("apprentice");
        public static readonly HrisUpdateEmployeeRequestDtoEmploymentTypeValue2 Freelance = new HrisUpdateEmployeeRequestDtoEmploymentTypeValue2("freelance");
        public static readonly HrisUpdateEmployeeRequestDtoEmploymentTypeValue2 Terminated = new HrisUpdateEmployeeRequestDtoEmploymentTypeValue2("terminated");
        public static readonly HrisUpdateEmployeeRequestDtoEmploymentTypeValue2 Temporary = new HrisUpdateEmployeeRequestDtoEmploymentTypeValue2("temporary");
        public static readonly HrisUpdateEmployeeRequestDtoEmploymentTypeValue2 Seasonal = new HrisUpdateEmployeeRequestDtoEmploymentTypeValue2("seasonal");
        public static readonly HrisUpdateEmployeeRequestDtoEmploymentTypeValue2 Volunteer = new HrisUpdateEmployeeRequestDtoEmploymentTypeValue2("volunteer");
        public static readonly HrisUpdateEmployeeRequestDtoEmploymentTypeValue2 Probation = new HrisUpdateEmployeeRequestDtoEmploymentTypeValue2("probation");
        public static readonly HrisUpdateEmployeeRequestDtoEmploymentTypeValue2 Internal = new HrisUpdateEmployeeRequestDtoEmploymentTypeValue2("internal");
        public static readonly HrisUpdateEmployeeRequestDtoEmploymentTypeValue2 External = new HrisUpdateEmployeeRequestDtoEmploymentTypeValue2("external");
        public static readonly HrisUpdateEmployeeRequestDtoEmploymentTypeValue2 Expatriate = new HrisUpdateEmployeeRequestDtoEmploymentTypeValue2("expatriate");
        public static readonly HrisUpdateEmployeeRequestDtoEmploymentTypeValue2 EmployerOfRecord = new HrisUpdateEmployeeRequestDtoEmploymentTypeValue2("employer_of_record");
        public static readonly HrisUpdateEmployeeRequestDtoEmploymentTypeValue2 Casual = new HrisUpdateEmployeeRequestDtoEmploymentTypeValue2("casual");
        public static readonly HrisUpdateEmployeeRequestDtoEmploymentTypeValue2 Programme = new HrisUpdateEmployeeRequestDtoEmploymentTypeValue2("Programme");
        public static readonly HrisUpdateEmployeeRequestDtoEmploymentTypeValue2 UnmappedValue = new HrisUpdateEmployeeRequestDtoEmploymentTypeValue2("unmapped_value");

        private static readonly Dictionary <string, HrisUpdateEmployeeRequestDtoEmploymentTypeValue2> _knownValues =
            new Dictionary <string, HrisUpdateEmployeeRequestDtoEmploymentTypeValue2> ()
            {
                ["contractor"] = Contractor,
                ["intern"] = Intern,
                ["permanent"] = Permanent,
                ["apprentice"] = Apprentice,
                ["freelance"] = Freelance,
                ["terminated"] = Terminated,
                ["temporary"] = Temporary,
                ["seasonal"] = Seasonal,
                ["volunteer"] = Volunteer,
                ["probation"] = Probation,
                ["internal"] = Internal,
                ["external"] = External,
                ["expatriate"] = Expatriate,
                ["employer_of_record"] = EmployerOfRecord,
                ["casual"] = Casual,
                ["Programme"] = Programme,
                ["unmapped_value"] = UnmappedValue
            };

        private static readonly ConcurrentDictionary<string, HrisUpdateEmployeeRequestDtoEmploymentTypeValue2> _values =
            new ConcurrentDictionary<string, HrisUpdateEmployeeRequestDtoEmploymentTypeValue2>(_knownValues);

        private HrisUpdateEmployeeRequestDtoEmploymentTypeValue2(string value)
        {
            if (value == null) throw new ArgumentNullException(nameof(value));
            Value = value;
        }

        public string Value { get; }

        public static HrisUpdateEmployeeRequestDtoEmploymentTypeValue2 Of(string value)
        {
            return _values.GetOrAdd(value, _ => new HrisUpdateEmployeeRequestDtoEmploymentTypeValue2(value));
        }

        public static implicit operator HrisUpdateEmployeeRequestDtoEmploymentTypeValue2(string value) => Of(value);
        public static implicit operator string(HrisUpdateEmployeeRequestDtoEmploymentTypeValue2 hrisupdateemployeerequestdtoemploymenttypevalue2) => hrisupdateemployeerequestdtoemploymenttypevalue2.Value;

        public static HrisUpdateEmployeeRequestDtoEmploymentTypeValue2[] Values()
        {
            return _values.Values.ToArray();
        }

        public override string ToString() => Value.ToString();

        public bool IsKnown()
        {
            return _knownValues.ContainsKey(Value);
        }

        public override bool Equals(object? obj) => Equals(obj as HrisUpdateEmployeeRequestDtoEmploymentTypeValue2);

        public bool Equals(HrisUpdateEmployeeRequestDtoEmploymentTypeValue2? other)
        {
            if (ReferenceEquals(this, other)) return true;
            if (other is null) return false;
            return string.Equals(Value, other.Value);
        }

        public override int GetHashCode() => Value.GetHashCode();
    }

}