//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace StackOneHQ.Client.Models.Components
{
    using Newtonsoft.Json;
    using StackOneHQ.Client.Utils;
    using System;
    using System.Collections.Concurrent;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The pay frequency of the job postings.
    /// </summary>
    [JsonConverter(typeof(OpenEnumConverter))]
    public class HrisCreateEmploymentRequestDtoPayFrequencyValue : IEquatable<HrisCreateEmploymentRequestDtoPayFrequencyValue>
    {
        public static readonly HrisCreateEmploymentRequestDtoPayFrequencyValue Hourly = new HrisCreateEmploymentRequestDtoPayFrequencyValue("hourly");
        public static readonly HrisCreateEmploymentRequestDtoPayFrequencyValue Weekly = new HrisCreateEmploymentRequestDtoPayFrequencyValue("weekly");
        public static readonly HrisCreateEmploymentRequestDtoPayFrequencyValue BiWeekly = new HrisCreateEmploymentRequestDtoPayFrequencyValue("bi_weekly");
        public static readonly HrisCreateEmploymentRequestDtoPayFrequencyValue FourWeekly = new HrisCreateEmploymentRequestDtoPayFrequencyValue("four_weekly");
        public static readonly HrisCreateEmploymentRequestDtoPayFrequencyValue SemiMonthly = new HrisCreateEmploymentRequestDtoPayFrequencyValue("semi_monthly");
        public static readonly HrisCreateEmploymentRequestDtoPayFrequencyValue Monthly = new HrisCreateEmploymentRequestDtoPayFrequencyValue("monthly");
        public static readonly HrisCreateEmploymentRequestDtoPayFrequencyValue BiMonthly = new HrisCreateEmploymentRequestDtoPayFrequencyValue("bi_monthly");
        public static readonly HrisCreateEmploymentRequestDtoPayFrequencyValue Quarterly = new HrisCreateEmploymentRequestDtoPayFrequencyValue("quarterly");
        public static readonly HrisCreateEmploymentRequestDtoPayFrequencyValue SemiAnnually = new HrisCreateEmploymentRequestDtoPayFrequencyValue("semi_annually");
        public static readonly HrisCreateEmploymentRequestDtoPayFrequencyValue Yearly = new HrisCreateEmploymentRequestDtoPayFrequencyValue("yearly");
        public static readonly HrisCreateEmploymentRequestDtoPayFrequencyValue ThirteenMonthly = new HrisCreateEmploymentRequestDtoPayFrequencyValue("thirteen_monthly");
        public static readonly HrisCreateEmploymentRequestDtoPayFrequencyValue ProRata = new HrisCreateEmploymentRequestDtoPayFrequencyValue("pro_rata");
        public static readonly HrisCreateEmploymentRequestDtoPayFrequencyValue UnmappedValue = new HrisCreateEmploymentRequestDtoPayFrequencyValue("unmapped_value");
        public static readonly HrisCreateEmploymentRequestDtoPayFrequencyValue HalfYearly = new HrisCreateEmploymentRequestDtoPayFrequencyValue("half_yearly");
        public static readonly HrisCreateEmploymentRequestDtoPayFrequencyValue Daily = new HrisCreateEmploymentRequestDtoPayFrequencyValue("daily");

        private static readonly Dictionary <string, HrisCreateEmploymentRequestDtoPayFrequencyValue> _knownValues =
            new Dictionary <string, HrisCreateEmploymentRequestDtoPayFrequencyValue> ()
            {
                ["hourly"] = Hourly,
                ["weekly"] = Weekly,
                ["bi_weekly"] = BiWeekly,
                ["four_weekly"] = FourWeekly,
                ["semi_monthly"] = SemiMonthly,
                ["monthly"] = Monthly,
                ["bi_monthly"] = BiMonthly,
                ["quarterly"] = Quarterly,
                ["semi_annually"] = SemiAnnually,
                ["yearly"] = Yearly,
                ["thirteen_monthly"] = ThirteenMonthly,
                ["pro_rata"] = ProRata,
                ["unmapped_value"] = UnmappedValue,
                ["half_yearly"] = HalfYearly,
                ["daily"] = Daily
            };

        private static readonly ConcurrentDictionary<string, HrisCreateEmploymentRequestDtoPayFrequencyValue> _values =
            new ConcurrentDictionary<string, HrisCreateEmploymentRequestDtoPayFrequencyValue>(_knownValues);

        private HrisCreateEmploymentRequestDtoPayFrequencyValue(string value)
        {
            if (value == null) throw new ArgumentNullException(nameof(value));
            Value = value;
        }

        public string Value { get; }

        public static HrisCreateEmploymentRequestDtoPayFrequencyValue Of(string value)
        {
            return _values.GetOrAdd(value, _ => new HrisCreateEmploymentRequestDtoPayFrequencyValue(value));
        }

        public static implicit operator HrisCreateEmploymentRequestDtoPayFrequencyValue(string value) => Of(value);
        public static implicit operator string(HrisCreateEmploymentRequestDtoPayFrequencyValue hriscreateemploymentrequestdtopayfrequencyvalue) => hriscreateemploymentrequestdtopayfrequencyvalue.Value;

        public static HrisCreateEmploymentRequestDtoPayFrequencyValue[] Values()
        {
            return _values.Values.ToArray();
        }

        public override string ToString() => Value.ToString();

        public bool IsKnown()
        {
            return _knownValues.ContainsKey(Value);
        }

        public override bool Equals(object? obj) => Equals(obj as HrisCreateEmploymentRequestDtoPayFrequencyValue);

        public bool Equals(HrisCreateEmploymentRequestDtoPayFrequencyValue? other)
        {
            if (ReferenceEquals(this, other)) return true;
            if (other is null) return false;
            return string.Equals(Value, other.Value);
        }

        public override int GetHashCode() => Value.GetHashCode();
    }

}