//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace StackOneHQ.Client.Models.Components
{
    using Newtonsoft.Json;
    using StackOneHQ.Client.Utils;
    using System;
    using System.Collections.Concurrent;
    using System.Collections.Generic;
    using System.Linq;
    
    /// <summary>
    /// The pay period of the job postings.
    /// </summary>
    [JsonConverter(typeof(OpenEnumConverter))]
    public class HrisCreateEmployeeRequestDtoPayPeriodValue : IEquatable<HrisCreateEmployeeRequestDtoPayPeriodValue>
    {
        public static readonly HrisCreateEmployeeRequestDtoPayPeriodValue Hour = new HrisCreateEmployeeRequestDtoPayPeriodValue("hour");
        public static readonly HrisCreateEmployeeRequestDtoPayPeriodValue Day = new HrisCreateEmployeeRequestDtoPayPeriodValue("day");
        public static readonly HrisCreateEmployeeRequestDtoPayPeriodValue Week = new HrisCreateEmployeeRequestDtoPayPeriodValue("week");
        public static readonly HrisCreateEmployeeRequestDtoPayPeriodValue EveryTwoWeeks = new HrisCreateEmployeeRequestDtoPayPeriodValue("every_two_weeks");
        public static readonly HrisCreateEmployeeRequestDtoPayPeriodValue Month = new HrisCreateEmployeeRequestDtoPayPeriodValue("month");
        public static readonly HrisCreateEmployeeRequestDtoPayPeriodValue TwiceAMonth = new HrisCreateEmployeeRequestDtoPayPeriodValue("twice_a_month");
        public static readonly HrisCreateEmployeeRequestDtoPayPeriodValue EveryTwoMonths = new HrisCreateEmployeeRequestDtoPayPeriodValue("every_two_months");
        public static readonly HrisCreateEmployeeRequestDtoPayPeriodValue Quarter = new HrisCreateEmployeeRequestDtoPayPeriodValue("quarter");
        public static readonly HrisCreateEmployeeRequestDtoPayPeriodValue EverySixMonths = new HrisCreateEmployeeRequestDtoPayPeriodValue("every_six_months");
        public static readonly HrisCreateEmployeeRequestDtoPayPeriodValue Year = new HrisCreateEmployeeRequestDtoPayPeriodValue("year");
        public static readonly HrisCreateEmployeeRequestDtoPayPeriodValue OneOff = new HrisCreateEmployeeRequestDtoPayPeriodValue("one_off");
        public static readonly HrisCreateEmployeeRequestDtoPayPeriodValue None = new HrisCreateEmployeeRequestDtoPayPeriodValue("none");
        public static readonly HrisCreateEmployeeRequestDtoPayPeriodValue UnmappedValue = new HrisCreateEmployeeRequestDtoPayPeriodValue("unmapped_value");

        private static readonly Dictionary <string, HrisCreateEmployeeRequestDtoPayPeriodValue> _knownValues =
            new Dictionary <string, HrisCreateEmployeeRequestDtoPayPeriodValue> ()
            {
                ["hour"] = Hour,
                ["day"] = Day,
                ["week"] = Week,
                ["every_two_weeks"] = EveryTwoWeeks,
                ["month"] = Month,
                ["twice_a_month"] = TwiceAMonth,
                ["every_two_months"] = EveryTwoMonths,
                ["quarter"] = Quarter,
                ["every_six_months"] = EverySixMonths,
                ["year"] = Year,
                ["one_off"] = OneOff,
                ["none"] = None,
                ["unmapped_value"] = UnmappedValue
            };

        private static readonly ConcurrentDictionary<string, HrisCreateEmployeeRequestDtoPayPeriodValue> _values =
            new ConcurrentDictionary<string, HrisCreateEmployeeRequestDtoPayPeriodValue>(_knownValues);

        private HrisCreateEmployeeRequestDtoPayPeriodValue(string value)
        {
            if (value == null) throw new ArgumentNullException(nameof(value));
            Value = value;
        }

        public string Value { get; }

        public static HrisCreateEmployeeRequestDtoPayPeriodValue Of(string value)
        {
            return _values.GetOrAdd(value, _ => new HrisCreateEmployeeRequestDtoPayPeriodValue(value));
        }

        public static implicit operator HrisCreateEmployeeRequestDtoPayPeriodValue(string value) => Of(value);
        public static implicit operator string(HrisCreateEmployeeRequestDtoPayPeriodValue hriscreateemployeerequestdtopayperiodvalue) => hriscreateemployeerequestdtopayperiodvalue.Value;

        public static HrisCreateEmployeeRequestDtoPayPeriodValue[] Values()
        {
            return _values.Values.ToArray();
        }

        public override string ToString() => Value.ToString();

        public bool IsKnown()
        {
            return _knownValues.ContainsKey(Value);
        }

        public override bool Equals(object? obj) => Equals(obj as HrisCreateEmployeeRequestDtoPayPeriodValue);

        public bool Equals(HrisCreateEmployeeRequestDtoPayPeriodValue? other)
        {
            if (ReferenceEquals(this, other)) return true;
            if (other is null) return false;
            return string.Equals(Value, other.Value);
        }

        public override int GetHashCode() => Value.GetHashCode();
    }

}