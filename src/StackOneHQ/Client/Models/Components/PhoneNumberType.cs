//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace StackOneHQ.Client.Models.Components
{
    using Newtonsoft.Json;
    using StackOneHQ.Client.Utils;
    using System;
    using System.Collections.Concurrent;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Type of phone number
    /// </summary>
    [JsonConverter(typeof(OpenEnumConverter))]
    public class PhoneNumberType : IEquatable<PhoneNumberType>
    {
        public static readonly PhoneNumberType Personal = new PhoneNumberType("personal");
        public static readonly PhoneNumberType Work = new PhoneNumberType("work");
        public static readonly PhoneNumberType Mobile = new PhoneNumberType("mobile");
        public static readonly PhoneNumberType Home = new PhoneNumberType("home");
        public static readonly PhoneNumberType Unknown = new PhoneNumberType("unknown");
        public static readonly PhoneNumberType Other = new PhoneNumberType("other");
        public static readonly PhoneNumberType UnmappedValue = new PhoneNumberType("unmapped_value");

        private static readonly Dictionary <string, PhoneNumberType> _knownValues =
            new Dictionary <string, PhoneNumberType> ()
            {
                ["personal"] = Personal,
                ["work"] = Work,
                ["mobile"] = Mobile,
                ["home"] = Home,
                ["unknown"] = Unknown,
                ["other"] = Other,
                ["unmapped_value"] = UnmappedValue
            };

        private static readonly ConcurrentDictionary<string, PhoneNumberType> _values =
            new ConcurrentDictionary<string, PhoneNumberType>(_knownValues);

        private PhoneNumberType(string value)
        {
            if (value == null) throw new ArgumentNullException(nameof(value));
            Value = value;
        }

        public string Value { get; }

        public static PhoneNumberType Of(string value)
        {
            return _values.GetOrAdd(value, _ => new PhoneNumberType(value));
        }

        public static implicit operator PhoneNumberType(string value) => Of(value);
        public static implicit operator string(PhoneNumberType phonenumbertype) => phonenumbertype.Value;

        public static PhoneNumberType[] Values()
        {
            return _values.Values.ToArray();
        }

        public override string ToString() => Value.ToString();

        public bool IsKnown()
        {
            return _knownValues.ContainsKey(Value);
        }

        public override bool Equals(object? obj) => Equals(obj as PhoneNumberType);

        public bool Equals(PhoneNumberType? other)
        {
            if (ReferenceEquals(this, other)) return true;
            if (other is null) return false;
            return string.Equals(Value, other.Value);
        }

        public override int GetHashCode() => Value.GetHashCode();
    }

}